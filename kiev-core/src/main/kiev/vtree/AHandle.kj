/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.vtree;

import syntax kiev.Syntax;

import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicInteger;

// Base context class.
// Holds only flags about it's lifecycle.
public class Context {
	public static final Context DEFAULT = new Context();

	// a flag that says, that data with this context is expired and can be deleted from AHandle
	public boolean expired;
}

public abstract class AHandleData {
	private final Context context;
	AHandleData h_hext_handle_data;

	public AHandleData(Context context) {
		this.context = context;
		assert(context != null);
	}

	public final Context getDataContext() {
		return this.context;
	}

	public final AHandleData getNextHandleData() {
		return this.h_hext_handle_data;
	}
}

public final class AHandle {
	// List of nodes for this handle
	AHandleData			h_nodes;

	public AHandle() {
	}

	public synchronized void addData(AHandleData data) {
		assert (data.h_hext_handle_data == null);
		data.h_hext_handle_data = this.h_nodes;
		this.h_nodes = data;
	}

	public synchronized void delData(AHandleData data) {
		if (this.h_nodes == data) {
			this.h_nodes = data.h_hext_handle_data;
			data.h_hext_handle_data = null;
			return;
		}
		for (AHandleData hd = this.h_nodes; hd != null; hd = hd.h_hext_handle_data) {
			if (hd.h_hext_handle_data == data) {
				hd.h_hext_handle_data = data.h_hext_handle_data;
				data.h_hext_handle_data = null;
				return;
			}
		}
	}

	public AHandleData getFirstHandleData() {
		return this.h_nodes;
	}

	//public AHandleData[] getHandleDataArray() {
	//	int i = 0;
	//	for (AHandleData hd = this.h_nodes; hd != null; hd = hd.h_hext_handle_data)
	//		i += 1;
	//	AHandleData[] array = new AHandleData[i];
	//	i = 0;
	//	for (AHandleData hd = this.h_nodes; hd != null; hd = hd.h_hext_handle_data)
	//		array[i++] = hd;
	//	return array;
	//}

	public void applyToAll((AHandleData)->void apply) {
		AHandleData hd = this.h_nodes;
		while (hd != null) {
			AHandleData hd_next = hd.h_hext_handle_data;
			apply(hd);
			hd = hd_next;
		}
	}

	public void cleanupIf((AHandleData)->boolean needToCleanup) {
		AHandleData hd_prev = null;
		AHandleData hd = this.h_nodes;
		while (hd != null) {
			AHandleData hd_next = hd.h_hext_handle_data;
			if (needToCleanup(hd) || hd.getDataContext().expired) {
				if (hd_prev == null) {
					this.h_nodes = hd_next;
				} else {
					hd_prev.h_hext_handle_data = hd_next;
					hd.h_hext_handle_data = null;
				}
			} else {
				hd_prev = hd;
			}
			hd = hd_next;
		}
	}

	public <T extends ANode> void cleanupIf((AHandleData, T)->boolean needToCleanup, T arg) {
		AHandleData hd_prev = null;
		AHandleData hd = this.h_nodes;
		while (hd != null) {
			AHandleData hd_next = hd.h_hext_handle_data;
			if (needToCleanup(hd, arg) || hd.getDataContext().expired) {
				if (hd_prev == null) {
					this.h_nodes = hd_next;
				} else {
					hd_prev.h_hext_handle_data = hd_next;
					hd.h_hext_handle_data = null;
				}
			} else {
				hd_prev = hd;
			}
			hd = hd_next;
		}
	}
}



/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.vlang;

import syntax kiev.Syntax;

/**
 * @author Maxim Kizub
 *
 */


@ThisIsANode(lang=CoreLang)
public final class SymadeNode extends Struct {
	@DataFlowDefinition(in="root()") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="false")	DNode[]		members;
	}

	@nodeAttr public NodeDecl		node_decl;

	public SymadeNode() {}

	@getter public JavaClassMode get$class_mode() {
		if (this.mflags_is_struct_interface)
			return JavaClassMode.INTERFACE;
		return JavaClassMode.CLASS;
	}
	@setter public void set$class_mode(JavaClassMode mode) {
		if (mode == JavaClassMode.INTERFACE) {
			this.mflags_is_struct_interface = true;
			return;
		}
		else if (mode == JavaClassMode.CLASS) {
			this.mflags_is_struct_interface = false;
			return;
		}
		throw new RuntimeException("Cannot set mode "+mode);
	}

	protected rule resolveNameR_1(ResInfo info)
	{
			info ?= this
		;	info ?= node_decl
		;	super.resolveNameR_1(info)
	}

	public NodeTypeInfo makeNodeTypeInfo() {
		return node_decl.makeNodeTypeInfo();
	}

}

@ThisIsANode(lang=CoreLang)
public class JavaClass extends Struct {
	@DataFlowDefinition(in="root()") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="false")	DNode[]		members;
	}

	@getter public JavaClassMode get$class_mode() {
		if (this.mflags_is_struct_interface)
			return JavaClassMode.INTERFACE;
		return JavaClassMode.CLASS;
	}
	@setter public void set$class_mode(JavaClassMode mode) {
		if (mode == JavaClassMode.INTERFACE) {
			this.mflags_is_struct_interface = true;
			return;
		}
		else if (mode == JavaClassMode.CLASS) {
			this.mflags_is_struct_interface = false;
			return;
		}
		throw new RuntimeException("Cannot set mode "+mode);
	}
}

@ThisIsANode(lang=CoreLang)
public final class JavaAnonymouseClass extends JavaClass {
	@DataFlowDefinition(in="root()") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="false")	DNode[]		members;
	}
	@getter public JavaClassMode get$class_mode() {
		return JavaClassMode.ANONYMOUSE;
	}
	@setter public void set$class_mode(JavaClassMode mode) {
		if (mode == JavaClassMode.ANONYMOUSE)
			return;
		throw new RuntimeException("Cannot set mode "+mode);
	}
}

@ThisIsANode(lang=CoreLang)
public final class KievView extends Struct {
	@DataFlowDefinition(in="root()") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="false")	DNode[]		members;
	}

	@nodeAttr public TypeRef						view_of;

	public KievView() {
		this.mflags_is_virtual = true;
	}
	public void cleanupOnReload() {
		super.cleanupOnReload();
		this.mflags_is_virtual = true;
	}

	public Struct getViewImpl() {
		UserMeta view_meta = (UserMeta)this.getMeta("kiev·stdlib·meta·ViewOf");
		if (view_meta != null && view_meta.getZ("iface"))
			return this.iface_impl;
		return this;
	}
}

@ThisIsANode(lang=CoreLang)
public final class JavaAnnotation extends JavaClass {
	public JavaAnnotation() {
		this.mflags_is_struct_interface = true;
		this.mflags_is_struct_annotation = true;
	}
	@getter public JavaClassMode get$class_mode() {
		return JavaClassMode.ANNOTATION;
	}
	@setter public void set$class_mode(JavaClassMode mode) {
		if (mode == JavaClassMode.ANNOTATION)
			return;
		throw new RuntimeException("Cannot set mode "+mode);
	}
	public void cleanupOnReload() {
		super.cleanupOnReload();
		this.mflags_is_struct_interface = true;
		this.mflags_is_struct_annotation = true;
	}

	public void resolveMetaDefaults(Env env) {
		foreach(Method m; members) {
			try {
				m.resolveMetaDefaults(env);
			} catch(Exception e) {
				Kiev.reportError(m,e);
			}
		}
	}

}

@ThisIsANode(lang=CoreLang)
public final class PizzaCase extends Struct {
	@DataFlowDefinition(in="root()") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="false")	DNode[]		members;
	}

	@nodeAttr public Field∅	case_fields;

	public int tag;

	public PizzaCase() {}

	public Field[] getCaseFields() {
		return this.case_fields;
	}

	public ASTNode[] getContainerMembers() {
		ASTNode[] members = this.members;
		ASTNode[] case_fields = this.case_fields;
		ASTNode[] arr = new ASTNode[members.length + case_fields.length];
		int i = 0;
		for (; i < case_fields.length; i++)
			arr[i] = case_fields[i];
		for (int j=0; j < members.length; j++)
			arr[i+j] = members[j];
		return arr;
	}

	protected rule resolveNameR_1(ResInfo info)
	{
			info ?= this
		;	info @= case_fields
		;	super.resolveNameR_1(info)
	}

	public Field resolveField(Env env, String name, boolean fatal) {
		this = checkResolved(env);
		foreach (Field f; this.case_fields; f.sname == name)
			return f;
		return super.resolveField(env, name, fatal);
	}

}

@ThisIsANode(lang=CoreLang)
public final class JavaEnum extends JavaClass {
	@DataFlowDefinition(in="root()") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="false")	DNode[]		members;
	}

	@nodeAttr public		Field∅			enum_fields;

	public JavaEnum() {
		this.mflags_is_enum = true;
	}

	@getter public JavaClassMode get$class_mode() {
		return JavaClassMode.ENUM;
	}
	@setter public void set$class_mode(JavaClassMode mode) {
		if (mode == JavaClassMode.ENUM)
			return;
		throw new RuntimeException("Cannot set mode "+mode);
	}
	public Field[] getEnumFields() {
		return enum_fields;
	}

	public void cleanupOnReload() {
		super.cleanupOnReload();
		this.mflags_is_enum = true;
	}

	public ASTNode[] getContainerMembers() {
		ASTNode[] members = this.members;
		ASTNode[] enum_fields = this.enum_fields;
		ASTNode[] arr = new ASTNode[members.length + enum_fields.length];
		int i = 0;
		for (; i < enum_fields.length; i++)
			arr[i] = enum_fields[i];
		for (int j=0; j < members.length; j++)
			arr[i+j] = members[j];
		return arr;
	}

	protected rule resolveNameR_1(ResInfo info)
	{
			info ?= this
		;	info @= enum_fields
		;	super.resolveNameR_1(info)
	}

	public Field resolveField(Env env, String name, boolean fatal) {
		this = checkResolved(env);
		foreach (Field f; this.enum_fields; f.sname == name)
			return f;
		return super.resolveField(env, name, fatal);
	}

	public int getIndexOfEnumField(Field f) {
		Field[] enum_fields = this.enum_fields;
		for (int i=0; i < enum_fields.length; i++) {
			if (f == enum_fields[i])
				return i;
		}
		throw new RuntimeException("Enum value for field "+f+" not found in "+this);
	}

	public void callbackChanged(NodeChangeInfo info) {
		if (info.content_change && info.slot.name == "enum_fields") {
			if (info.ct == ChangeType.ATTR_MODIFIED && info.old_value instanceof Var) {
				Field f = (Field)info.old_value;
				f.mflags_is_enum = false;
			}
			if (info.ct == ChangeType.ATTR_MODIFIED && info.new_value instanceof Var) {
				Field f = (Field)info.new_value;
				f.mflags_is_enum = true;
				f.setPublic();
				f.setStatic(true);
				f.setFinal(true);
				f.vtype = new TypeRef(this.getType(Env.getEnv()));
				f.vtype.setAutoGenerated(true);
			}
		}
		super.callbackChanged(info);
	}
}

@ThisIsANode(lang=void)
public final class InnerStructInfo extends ASTNode {
	@nodeAttr public int			inner_count;
	@nodeData public DNode∅		inners;	// structures, static fields in methods, etc
}

@ThisIsANode(lang=CoreLang)
public abstract class Struct extends ComplexTypeDecl {

	public static enum JavaClassMode {
		UNKNOWN, CLASS, INTERFACE, ENUM, ANONYMOUSE, ANNOTATION
	};

	@AttrXMLDumpInfo(attr=true, name="mode")
	@nodeAttr public abstract JavaClassMode class_mode;

	@nodeData(ext_data=true)		public InnerStructInfo		inner_info;
	@nodeData(ext_data=true)		public Struct				typeinfo_clazz;
	@nodeData(ext_data=true)		public Struct				iface_impl;

	@getter public JavaClassMode get$class_mode() {
		return JavaClassMode.UNKNOWN;
	}
	@setter public void set$class_mode(JavaClassMode mode) {
		return;
	}

	public boolean includeInDump(String dump, AttrSlot attr, Object val) {
		if (attr.name == "class_mode" && class_mode == JavaClassMode.UNKNOWN)
			return false;
		return super.includeInDump(dump, attr, val);
	}

	public boolean isClazz() {
		return !isInterface();
	}

	// indicates that structure members were generated
	public final boolean isMembersGenerated() {
		return this.is_struct_fe_passed || this.is_struct_members_generated;
	}
	public final void setMembersGenerated(boolean on) {
		assert (!this.is_struct_fe_passed);
		if (this.is_struct_members_generated != on) {
			this.is_struct_members_generated = on;
		}
	}
	// indicates that structure members were pre-generated
	public final boolean isMembersPreGenerated() {
		return this.is_struct_pre_generated;
	}
	public final void setMembersPreGenerated(boolean on) {
		if (this.is_struct_pre_generated != on) {
			this.is_struct_pre_generated = on;
		}
	}

	/** Add information about new method that belongs to this class */
	public Method addMethod(Method m) {
		// Check we already have this method
		members.append(m);
		trace(Kiev.debug && Kiev.debugMembers,"Method "+m+" added to class "+this);
		if (m instanceof Constructor) {
			foreach (Constructor mm; members; mm != m) {
				if (mm.mtype.equals(m.mtype))
					Kiev.reportError(m,"Constructor "+m+" already exists in class "+this);
			}
		} else {
			foreach (Method mm; members; mm != m) {
				if (mm.sname == m.sname && mm.mtype.equals(m.mtype))
					Kiev.reportError(m,"Method "+m+" already exists in class "+this);
			}
		}
		return m;
	}

	/** Add information about new field that belongs to this class */
	public Field addField(Field f) {
		// Check we already have this field
		foreach (Field ff; this.members) {
			if( ff.equals(f) ) {
				throw new RuntimeException("Field "+f+" already exists in class "+this);
			}
		}
		members.append(f);
		trace(Kiev.debug && Kiev.debugMembers,"Field "+f+" added to class "+this);
		return f;
	}

	/** Add information about new pizza case of this class */
	public PizzaCase addCase(PizzaCase cas) {
		setHasCases(true);
		int caseno = 0;
		foreach (PizzaCase pcase; members; pcase.tag > caseno)
			caseno = pcase.tag;
		cas.tag = caseno + 1;
		trace(Kiev.debug && Kiev.debugMembers,"Class's case "+cas+" added to class "	+this+" as case # "+(caseno+1));
		return cas;
	}

	public Constructor getClazzInitMethod() {
		foreach(Constructor n; members; n.isStatic())
			return n;
		Constructor class_init = new Constructor(ACC_STATIC);
		class_init.pos = pos;
		class_init.setAutoGenerated(true);
		addMethod(class_init);
		class_init.body = new Block(pos);
		return class_init;
	}

	public Struct() {
		super(new AHandle(), new Symbol());
	}
	public Struct(Symbol symbol, int flags) {
		super(new AHandle(), symbol);
		this.nodeflags |= flags;
	}

	public CompaundMetaType getMetaType(Env env) {
		synchronized (env.tenv) {
			MetaType mt = env.tenv.getExistingMetaType(this.symbol);
			if (mt != null)
				return (CompaundMetaType)mt;
			return new CompaundMetaType(env.tenv,this);
		}
	}

	public Struct getStruct() { return this; }

	public void cleanupOnReload() {
		this.metas.delAll();
		this.nodeflags = 0;
		this.typeinfo_clazz = null;
		super.cleanupOnReload();
	}

	public boolean preResolveIn(Env env, INode parent, AttrSlot slot) {
		if (this.isInterfaceOnly())
			return false;
		return true;
	}

	// verify resolved tree
	public boolean preVerify(Env env, INode parent, AttrSlot slot) {
		setFrontEndPassed();
		foreach (TypeRef tr; super_types; !(tr instanceof MacroSubstTypeRef)) {
			TypeDecl td = tr.getTypeDecl(env);
			if (td == null)
				Kiev.reportError(this, "Struct "+this+" extends unresolved type "+tr);
			else if (td.isFinal())
				Kiev.reportError(this, "Struct "+this+" extends final type "+tr);
		}
		if (isInterface() && !isStructView() && !isMixin()) {
			foreach (ASTNode n; members; n instanceof Field || n instanceof Initializer) {
				if (n instanceof Field && !n.isAbstract()) {
					verifyFieldInIface((Field)n);
				}
				else if (n instanceof Initializer) {
					verifyInitializerInIface((Initializer)n);
				}
			}
		}
		return true;
	}

	private void verifyFieldInIface(Field n) {
		if (!n.isStatic()) {
			Kiev.reportError(n,"Non-static field "+n+" in interface "+this);
			n.setStatic(true);
		}
		if (!n.isFinal()) {
			Kiev.reportError(n,"Non-final field "+n+" in interface "+this);
			n.setFinal(true);
		}
	}
	private void verifyInitializerInIface(Initializer n) {
		if (!n.isStatic()) {
			Kiev.reportError(n,"Non-static initializer in interface "+this);
			n.setStatic(true);
		}
	}

	public void postVerify(Env env, INode parent, AttrSlot slot) {
		this.walkTree(new TreeWalker() {
			public boolean pre_exec(ANode n) {
				foreach (DataFlowInfo nh; n.handle().getHandleData(); nh.node_impl == n)
					n.handle().delData(nh);
				return true;
			}
			public void post_exec(ANode n) {}
		});
	}

	static class StructDFFunc extends DFFunc {
		final int res_idx;
		StructDFFunc(DataFlowInfo dfi) {
			res_idx = dfi.allocResult();
		}
		DFState calc(DataFlowInfo dfi) {
			DFState res = dfi.getResult(res_idx);
			if (res != null) return res;
			res = DFState.makeNewState();
			dfi.setResult(res_idx, res);
			return res;
		}
	}
	public DFFunc newDFFuncIn(DataFlowInfo dfi) {
		return new StructDFFunc(dfi);
	}
}



/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.vlang;
import syntax kiev.Syntax;

/**
 * A node that is a declaration: class, formal parameters and vars, methods, fields, etc.
 */
@ThisIsANode(lang=CoreLang)
public abstract class DNode extends ASTNode implements ISymbolHost {

	public static final DNode[] emptyArray = new DNode[0];

	public static final int MASK_ACC_DEFAULT   = 0;
	public static final int MASK_ACC_PUBLIC    = ACC_PUBLIC;
	public static final int MASK_ACC_PRIVATE   = ACC_PRIVATE;
	public static final int MASK_ACC_PROTECTED = ACC_PROTECTED;

	private static final Class[] $meta_flags = new Class[] {
		MetaPublic.class,    MetaPrivate.class,MetaProtected.class, MetaStatic.class,
		MetaFinal.class,     null,             null,                null,
		MetaNative.class,    null,             MetaAbstract.class,  null,
		MetaSynthetic.class, null,             null,                null,
		MetaForward.class,   MetaVirtual.class,MetaUnerasable.class,MetaMacro.class,
		null,                null,              null,               null,
		null,                null,              null,               null,
		null,                null,              null,               null
	};

	public static final class NodeAttr_metas extends ExtSpaceAttrSlot<MNode> {
		NodeAttr_metas() { super("metas", ANode.nodeattr$parent, TypeInfo.newTypeInfo(MNode.class, null)); }
		public final Enumeration<MNode> iterate(INode parent) {
			return ((DNode)parent.asANode()).getExtSpaceIterator<MNode>(this);
		}
		public final void add(INode parent, INode value) {
			if (value instanceof MetaFlag && parent instanceof DNode) {
				MetaFlag flag = (MetaFlag)value;
				int bit = flag.getBitPos();
				if (bit >= 0) {
					Class[] flags = parent.getMetaFlags();
					if (flags[bit] == value.getClass()) {
						((DNode)parent).nodeflags |= (1 << bit);
						parent.callbackMetaSet(this,flag);
						return;
					}
				}
			}
			parent.addVal(this, value);
		}
		public final void detach(INode parent, INode value) {
			if (value instanceof MetaFlag && parent instanceof DNode) {
				MetaFlag flag = (MetaFlag)value;
				int bit = flag.getBitPos();
				if (bit >= 0) {
					Class[] flags = ((DNode)parent).getMetaFlags();
					if (flags[bit] == value.getClass()) {
						((DNode)parent).nodeflags &= ~(1 << bit);
						parent.callbackMetaDel(this,flag);
						return;
					}
				}
			}
			super.detach(parent, value);
		}
	}

	@abstract
	@nodeAttr(ext_data=true)
	public MNodeâ‹ˆ		metas;

	@AttrBinDumpInfo(leading=true)
	@AttrXMLDumpInfo(ignore=true)
	@nodeAttr
	public Symbol		symbol;

	@abstract
	@AttrBinDumpInfo(ignore=true)
	@AttrXMLDumpInfo(attr=true, name="name")
	@nodeAttr
	public							String			sname; // source code name, may be null for anonymouse symbols

	@virtual @abstract
	public:ro						DNode			dnode;

	public int						nodeflags;		// presistent flags of the node

	public @packed(3,nodeflags, 0) int     mflags_access;

	public @packed(1,nodeflags, 3) boolean mflags_is_static;
	public @packed(1,nodeflags, 4) boolean mflags_is_final;
	public @packed(1,nodeflags, 5) boolean mflags_is_mth_synchronized;	// method
	public @packed(1,nodeflags, 5) boolean mflags_is_struct_super;		// struct
	public @packed(1,nodeflags, 6) boolean mflags_is_fld_volatile;		// field
	public @packed(1,nodeflags, 6) boolean mflags_is_mth_bridge;			// method
	public @packed(1,nodeflags, 7) boolean mflags_is_fld_transient;		// field
	public @packed(1,nodeflags, 7) boolean mflags_is_mth_varargs;			// method
	public @packed(1,nodeflags, 8) boolean mflags_is_native;				// native method, backend operation/field/struct
	public @packed(1,nodeflags, 9) boolean mflags_is_struct_interface;
	public @packed(1,nodeflags,10) boolean mflags_is_abstract;
	public @packed(1,nodeflags,11) boolean mflags_is_math_strict;			// strict math
	public @packed(1,nodeflags,12) boolean mflags_is_synthetic;			// any decl that was generated (not in sources)
	public @packed(1,nodeflags,13) boolean mflags_is_struct_annotation;
	public @packed(1,nodeflags,14) boolean mflags_is_enum;				// struct/decl group/fields

	// Flags temporary used with java flags
	public @packed(1,nodeflags,16) boolean mflags_is_forward;				// var/field/method, type is wrapper
	public @packed(1,nodeflags,17) boolean mflags_is_virtual;				// var/field, method is 'static virtual', struct is 'view'
	public @packed(1,nodeflags,18) boolean mflags_is_type_unerasable;		// typedecl, method/struct as parent of typedef
	public @packed(1,nodeflags,19) boolean mflags_is_macro;				// macro-declarations for fields, methods, etc

	// General flags
	public @packed(1,nodeflags,23) boolean is_interface_only;		// only node's interface was scanned/loded; no implementation

	// Structures
	public @packed(1,nodeflags,24) boolean is_struct_fe_passed;
	public @packed(1,nodeflags,25) boolean is_struct_has_pizza_cases;
	public @packed(1,nodeflags,26) boolean is_tdecl_not_loaded;	// TypeDecl was fully loaded (from src or bytecode)
	// Method flags
	public @packed(1,nodeflags,24) boolean is_mth_virtual_static;
	public @packed(1,nodeflags,25) boolean is_mth_invariant;
	// Var/Field
	public @packed(7,nodeflags,24) int     mflags_var_kind;				// var/field kind


	public Class[] getMetaFlags() { return DNode.$meta_flags; }

	public final MetaAccess getMetaAccess() {
		foreach (MetaAccess ma; metas)
			return ma;
		return null;
	}
	public final void setMetaAccess(MetaAccess value) {
		foreach (MetaAccess ma; metas) {
			if (ma != value) {
				if (value == null)
					ma.detach();
				else
					ma.replaceWithNode(value,this,nodeattr$metas);
				return;
			}
		}
		if (value != null)
			metas.append(value);
	}

	@getter final public DNode get$dnode() { return this; }
	@getter final public Symbol get$symbol() { return this.symbol; }

	@getter final public String get$sname() {
		Symbol symbol = this.symbol;
		if (symbol == null)
			return null;
		return symbol.sname;
	}
	@setter final public void set$sname(String value) {
		Symbol symbol = this.symbol;
		if (symbol == null)
			this.symbol = new Symbol(value);
		else
			symbol.sname = value;
	}

	public final boolean isPublic()			{ return this.mflags_access == MASK_ACC_PUBLIC; }
	public final boolean isPrivate()			{ return this.mflags_access == MASK_ACC_PRIVATE; }
	public final boolean isProtected()			{ return this.mflags_access == MASK_ACC_PROTECTED; }
	public final boolean isPkgPrivate()		{ return this.mflags_access == MASK_ACC_DEFAULT; }
	public final boolean isStatic()			{ return this.mflags_is_static; }
	public final boolean isFinal()				{ return this.mflags_is_final; }
	public final boolean isSynchronized()		{ return this.mflags_is_mth_synchronized; }
	public final boolean isFieldVolatile()		{ return this.mflags_is_fld_volatile; }
	public final boolean isMethodBridge()		{ return this.mflags_is_mth_bridge; }
	public final boolean isFieldTransient()	{ return this.mflags_is_fld_transient; }
	public final boolean isMethodVarargs()		{ return this.mflags_is_mth_varargs; }
	public final boolean isNative()			{ return this.mflags_is_native; }
	public final boolean isInterface()			{ return this.mflags_is_struct_interface; }
	public final boolean isAbstract()			{ return this.mflags_is_abstract; }
	public final boolean isMathStrict()		{ return this.mflags_is_math_strict; }
	public final boolean isSynthetic()			{ return this.mflags_is_synthetic; }

	public final boolean isMacro()				{ return this.mflags_is_macro; }
	public final boolean isVirtual()			{ return this.mflags_is_virtual; }
	public final boolean isForward()			{ return this.mflags_is_forward; }

	public final boolean isStructView()		{ return this instanceof KievView; }
	public final boolean isTypeUnerasable()	{ return this.mflags_is_type_unerasable; }
	public final boolean isStructInner()		{ return !(this.parent() instanceof KievPackage); }

	public final boolean isInterfaceOnly()		{ return this.is_interface_only; }
	public final void setInterfaceOnly()		{ this.is_interface_only = true; }

	public void setPublic() {
		MetaAccess m = getMetaAccess();
		if (m != null && m.simple != "public")
			m.simple = "public";
		this.mflags_access = MASK_ACC_PUBLIC;
	}
	public void setPrivate() {
		MetaAccess m = getMetaAccess();
		if (m != null && m.simple != "private")
			m.simple = "private";
		this.mflags_access = MASK_ACC_PRIVATE;
	}
	public void setProtected() {
		MetaAccess m = getMetaAccess();
		if (m != null && m.simple != "protected")
			m.simple = "private";
		this.mflags_access = MASK_ACC_PROTECTED;
	}
	public void setPkgPrivate() {
		MetaAccess m = getMetaAccess();
		if (m != null) {
			if (m.flags != -1 || m.flags != 0xF)
				m.simple = "";
			else
				m.detach();
		}
		this.mflags_access = MASK_ACC_DEFAULT;
	}
	public void setPkgPrivateKeepAccess() {
		int flags = MetaAccess.getFlags(this);
		MetaAccess m = getMetaAccess();
		if (m != null) {
			m.simple = "";
			m.flags = flags;
		} else {
			if (flags != -1 && flags != MetaAccess.getFlags(this))
				this.setMetaAccess(new MetaAccess("", flags));
		}
		this.mflags_access = MASK_ACC_DEFAULT;
	}
	public void setPrivateKeepAccess() {
		int flags = MetaAccess.getFlags(this);
		MetaAccess m = getMetaAccess();
		if (m != null) {
			m.simple = "private";
			m.flags = flags;
		} else {
			if (flags != -1 && flags != MetaAccess.getFlags(this))
				this.setMetaAccess(new MetaAccess("private", flags));
		}
		this.mflags_access = MASK_ACC_PRIVATE;
	}

	public final void setStatic(boolean on) {
		this.mflags_is_static = on;
	}
	public final void setFinal(boolean on) {
		this.mflags_is_final = on;
	}
	public final void setSynchronized(boolean on) {
		this.mflags_is_mth_synchronized = on;
	}
	public final void setFieldVolatile(boolean on) {
		this.mflags_is_fld_volatile = on;
	}
	public final void setMethodBridge(boolean on) {
		this.mflags_is_mth_bridge = on;
	}
	public final void setFieldTransient(boolean on) {
		this.mflags_is_fld_transient = on;
	}
	public final void setMethodVarargs(boolean on) {
		this.mflags_is_mth_varargs = on;
	}
	public final void setNative(boolean on) {
		this.mflags_is_native = on;
	}
	public final void setAbstract(boolean on) {
		this.mflags_is_abstract = on;
	}
	public final void setSynthetic(boolean on) {
		this.mflags_is_synthetic = on;
	}

	public final void setMacro(boolean on) {
		this.mflags_is_macro = on;
	}

	public final void setTypeUnerasable(boolean on) {
		this.mflags_is_type_unerasable = on;
	}

	public final void setVirtual(boolean on) {
		this.mflags_is_virtual = on;
	}

	public final void setForward(boolean on) {
		this.mflags_is_forward = on;
	}

	// resolved
	public final boolean isTypeDeclNotLoaded() {
		return this.is_tdecl_not_loaded;
	}
	public final void setTypeDeclNotLoaded(boolean on) {
		if (this.is_tdecl_not_loaded != on) {
			this.is_tdecl_not_loaded = on;
		}
	}

	public DNode() {
		this(new AHandle(), new Symbol());
	}

	public DNode(AHandle handle, Symbol symbol) {
		super(handle);
		this.symbol = symbol;
	}

	public void cleanupOnReload() {
		this.metas.delAll();
		this.nodeflags = 0;
		this.compflagsClear();
	}

	public void callbackChanged(NodeChangeInfo info) {
		if (info.tree_change && this instanceof GlobalDNode) {
			if (info.ct == ChangeType.THIS_DETACHED) {
				Symbol symbol = this.symbol;
				if (symbol != null) {
					Symbol ns = symbol.getNameSpaceSymbol();
					if (ns != null)
						ns.sub_symbols.detach(symbol);
				}
			}
			else if (info.ct == ChangeType.THIS_ATTACHED) {
				if (info.parent instanceof GlobalDNode) {
					Symbol symbol = this.symbol;
					if (symbol != null) {
						DNode dn = (DNode)info.parent;
						Symbol ns = dn.symbol;
						if (ns != null && ns.sub_symbols.indexOf(symbol) < 0)
							ns.sub_symbols += symbol;
					}
				}
			}
		}
		else if (info.content_change) {
			if (info.slot == DNode.nodeattr$symbol && info.new_value == null) {
				if (isAttached())
					System.out.println("Replacing unattached node "+info.old_value);
			}
		}
		super.callbackChanged(info);
	}

	public String toString() { return sname; }

	public int getFlags() {
		return this.nodeflags & 0xFFFFF;
	}
	public short getJavaFlags() {
		return (short)(getFlags() & JAVA_ACC_MASK);
	}

	public boolean includeInDump(String dump, AttrSlot attr, Object val) {
		if (dump == "api" && attr.name == "this" && ((isPrivate() && !isMacro()) || isAutoGenerated() || isSynthetic()))
			return false;
		return super.includeInDump(dump, attr, val);
	}

	public INode doRewrite(RewriteContext ctx) {
		DNode dn = (DNode)super.doRewrite(ctx);
		String id = this.sname;
		String rw = ctx.replace(id);
		if (id != rw)
			dn.sname = rw;
		return dn;
	}

	public boolean hasRuntimeVisibleMetas() {
		foreach (MNode m; metas; m.isRuntimeVisible())
			return true;
		return false;
	}
	public boolean hasRuntimeInvisibleMetas() {
		foreach (MNode m; metas; m.isRuntimeInvisible())
			return true;
		return false;
	}

	public final MNode getMeta(String name) {
		foreach (MNode m; metas; m.qname() == name)
			return m;
		return null;
	}

	public final MNode setMeta(MNode meta)
		operator "V += V"
		alias add
	{
		if (meta instanceof MetaFlag) {
			MetaFlag flag = (MetaFlag)meta;
			int bit = flag.getBitPos();
			if (bit >= 0) {
				Class[] flags = this.getMetaFlags();
				if (flags[bit] == flag.getClass()) {
					this.nodeflags |= (1 << bit);
					this.callbackMetaSet(DNode.nodeattr$metas,flag);
					return flag;
				}
			}
		}
		String qname = meta.qname();
		foreach (MNode m; metas; m.qname() == qname) {
			if (meta != m)
				m.replaceWithNode(meta,this,nodeattr$metas);
			return meta;
		}
		metas.append(meta);
		return meta;
	}

	public void verifyMetas() {
		foreach (MNode m; metas) {
			try {
				m.verify(this,DNode.nodeattr$metas);
			} catch (CompilerException e) {
				Kiev.reportError(m, e);
				continue;
			}
		}
	}

}

public interface GlobalDNode {
	public String qname();
}

public interface GlobalDNodeContainer extends GlobalDNode, ScopeOfNames {
	public ASTNode[] getContainerMembers();
}

@ThisIsANode(lang=CoreLang)
public abstract class TypeDecl extends DNode implements ScopeOfNames, ScopeOfMethods {

	public static final TypeDecl[] emptyArray = new TypeDecl[0];

	@nodeAttr
	public TypeRefâˆ…						super_types;

	public ASTNode[] getContainerMembers() { ASTNode.emptyArray }

	public abstract MetaType getMetaType(Env env);

	public boolean isClazz() {
		return false;
	}
	// kiev annotation
	public final boolean isAnnotation() {
		return this.mflags_is_struct_annotation;
	}
	// java enum
	public final boolean isEnum() {
		return this.mflags_is_enum;
	}

	// a pizza case
	public final boolean isPizzaCase() {
		return this instanceof PizzaCase;
	}
	// has pizza cases
	public final boolean isHasCases() {
		return this.is_struct_has_pizza_cases;
	}
	public final void setHasCases(boolean on) {
		if (this.is_struct_has_pizza_cases != on) {
			this.is_struct_has_pizza_cases = on;
		}
	}

	// a structure with the only one instance (singleton)
	public final boolean isSingleton() {
		return this.getMeta("kievÂ·stdlibÂ·metaÂ·singleton") != null;
	}
	// an interface with methdos and fields (mixin)
	public final boolean isMixin() {
		return this.getMeta("kievÂ·stdlibÂ·metaÂ·mixin") != null;
	}

	// indicates that type of the structure was attached
	public final boolean isTypeResolved() {
		return this.is_struct_fe_passed || this.is_struct_type_resolved;
	}
	public final void setTypeResolved(boolean on) {
		assert (!this.is_struct_fe_passed);
		if (this.is_struct_type_resolved != on) {
			this.is_struct_type_resolved = on;
		}
	}
	// indicates that type arguments of the structure were resolved
	public final boolean isArgsResolved() {
		return this.is_struct_fe_passed || this.is_struct_args_resolved;
	}
	public final void setArgsResolved(boolean on) {
		assert (!this.is_struct_fe_passed);
		if (this.is_struct_args_resolved != on) {
			this.is_struct_args_resolved = on;
		}
	}
	public final boolean isFrontEndPassed() {
		return this.is_struct_fe_passed;
	}
	public final void setFrontEndPassed() {
		this.is_struct_fe_passed = true;
	}

	public TypeDecl(AHandle handle, Symbol symbol) {
		super(handle, symbol);
	}

	public String qname() { sname }

	public void cleanupOnReload() {
		super.cleanupOnReload();
		this.super_types.delAll();
	}

	public Type getType(Env env) { return this.getMetaType(env).getDefType(); }
	public Struct getStruct() { return null; }

	public final boolean isTypeAbstract()		{ return this.isAbstract(); }
	public final boolean isTypeVirtual()		{ return this.isVirtual(); }
	public final boolean isTypeFinal()			{ return this.isFinal(); }
	public final boolean isTypeStatic()		{ return !this.isStructInner() || this.isStatic(); }
	public final boolean isTypeForward()		{ return this.isForward(); }

	public String toString() { return sname; }

	public this.type checkResolved(Env env) {
		if( isTypeDeclNotLoaded() ) {
			TypeDecl td = env.loadTypeDecl(this);
			if (td.isTypeDeclNotLoaded())
				throw new RuntimeException("TypeDecl "+this+" unresolved");
			return td;
		}
		return this;
	}

	public boolean preVerify(Env env, INode parent, AttrSlot slot) {
		setFrontEndPassed();
		return true;
	}

	public final boolean instanceOf(TypeDecl tdecl) {
		if (tdecl == null) return false;
		if (this == tdecl) return true;
		foreach (TypeRef st; super_types; st.getTypeDecl(Env.getEnv()) != null) {
			if (st.getTypeDecl(Env.getEnv()).instanceOf(tdecl))
				return true;
		}
		return false;
	}

	public Field resolveField(Env env, String name) {
		return resolveField(env,name,true);
	}

	public Field resolveField(Env env, String name, boolean fatal) {
		this = checkResolved(env);
		if (this instanceof ComplexTypeDecl) {
			foreach (Field f; ((ComplexTypeDecl)this).members; f.sname == name)
				return f;
		}
		foreach (TypeRef tr; this.super_types; tr.getTypeDecl(env) != null) {
			Field f = tr.getTypeDecl(env).resolveField(env, name, false);
			if (f != null)
				return f;
		}
		if (fatal)
			throw new RuntimeException("Unresolved field "+name+" in class "+this);
		return null;
	}

	public Method resolveMethod(Env env, String name, Type ret, Type... va_args) {
		Type[] args = new Type[va_args.length];
		for (int i=0; i < va_args.length; i++)
			args[i] = (Type)va_args[i];
		CallType mt = new CallType(null,null,args,ret,false);
		ResInfo info = new ResInfo(env,this,name,ResInfo.noForwards|ResInfo.noSyntaxContext|ResInfo.noStatic).match(Method.class);
		if (!this.getType(env).resolveCallAccessR(info, mt)) {
			info = new ResInfo(env,this,name,ResInfo.noForwards|ResInfo.noSyntaxContext).match(Method.class);
			if (!this.resolveMethodR(info, mt))
				throw new CompilerException(this,"Unresolved method "+name+mt+" in class "+this);
		}
		return (Method)info.resolvedDNode();
	}

	public rule resolveNameR(ResInfo info)
	{
		info.isStaticAllowed(),
		trace(Kiev.debug && Kiev.debugResolve,"TypeDecl: Resolving name "+info.getName()+" in "+this),
		checkResolved(info.env),
		{
			trace(Kiev.debug && Kiev.debugResolve,"TypeDecl: resolving in "+this),
			resolveNameR_1(info) // resolve in this class
		;
			info.isSuperAllowed(),
			info.getPrevSlotName() != "super_types",
			trace(Kiev.debug && Kiev.debugResolve,"TypeDecl: resolving in super-class of "+this),
			resolveNameR_3(info) // resolve in super-classes
		}
	}
	protected rule resolveNameR_1(ResInfo info)
	{
		info ?= this
	}
	protected rule resolveNameR_3(ResInfo info)
		TypeRef@ sup_ref;
	{
		sup_ref @= super_types,
		sup_ref.getTypeDecl(info.env) != null,
		info.enterSuper() : info.leaveSuper(),
		sup_ref.getTypeDecl(info.env).resolveNameR(info)
	}

	public rule resolveMethodR(ResInfo info, CallType mt)
		TypeRef@ supref;
	{
		info.isStaticAllowed(),
		info.isSuperAllowed(),
		checkResolved(info.env),
		trace(Kiev.debug && Kiev.debugResolve, "Resolving "+info.getName()+" in "+this),
		supref @= super_types,
		info.enterSuper() : info.leaveSuper(),
		supref.getType(info.env).meta_type.tdecl.resolveMethodR(info,mt)
	}

}

@ThisIsANode(lang=CoreLang)
public abstract class ComplexTypeDecl extends TypeDecl implements GlobalDNodeContainer, CompilationUnit {

	@DataFlowDefinition(in="root()") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="false")	DNode[]		members;
	}

	@nodeAttr public TypeConstrâˆ…					args;
	@nodeAttr public ASTNodeâˆ…						members;
	          public String							q_name;	// qualified name

	@AttrBinDumpInfo(ignore=true)
	@nodeData(ext_data=true, copyable=false) public String			bytecode_name; // used by backend for anonymouse and inner declarations
	@nodeData(ext_data=true, copyable=false) public TypeAssign		ometa_tdef;


	public ASTNode[] getContainerMembers() { this.members }

	public ComplexTypeDecl(AHandle handle, Symbol symbol) {
		super(handle, symbol);
	}

	public void callbackChanged(NodeChangeInfo info) {
		//if (info.content_change) {
		//	if (info.slot.name == "sname")
		//		resetNames();
		if (info.slot.name == "super_types" || info.slot.name == "args" || info.slot.name == "symbol")
			Env.getEnv().tenv.callbackTypeVersionChanged(this);
		if (info.tree_change) {
			if (info.slot.isSemantic())
				resetNames();
		}
		super.callbackChanged(info);
	}

	private void resetNames() {
		q_name = null;
		foreach (ComplexTypeDecl s; members)
			s.resetNames();
	}

	public Object copy(CopyContext cc) {
		ComplexTypeDecl obj = (ComplexTypeDecl)super.copy(cc);
		if (this == obj)
			return this;
		obj.q_name = null;
		return obj;
	}

	public void cleanupOnReload() {
		super.cleanupOnReload();
		this.args.delAll();
		//foreach (Method m; this.members) {
		//	foreach (OperatorAlias a; m.aliases) {
		//		Opdef opd = a.opdef.dnode;
		//		if (opd != null) {
		//			foreach (Methodâ‡‘ mref; opd.methods; mref.dnode == m)
		//				mref.detach();
		//		}
		//	}
		//}
		this.members.delAll();
		Env.getEnv().tenv.callbackTypeVersionChanged(this);
	}

	public String qname() {
		if (q_name != null)
			return q_name;
		if (sname == null || sname == "")
			return null;
		ANode p = parent();
		if (p instanceof GlobalDNode)
			q_name = (p.qname()+"Â·"+sname).intern();
		else
			q_name = sname;
		return q_name;
	}

	public String toString() {
		String q = qname();
		if (q == null)
			return "<anonymouse>";
		return q.replace('Â·','.');
	}

	static class TypeDeclDFFunc extends DFFunc {
		final int res_idx;
		TypeDeclDFFunc(DataFlowInfo dfi) {
			res_idx = dfi.allocResult();
		}
		DFState calc(DataFlowInfo dfi) {
			DFState res = dfi.getResult(res_idx);
			if (res != null) return res;
			res = DFState.makeNewState();
			dfi.setResult(res_idx, res);
			return res;
		}
	}
	public DFFunc newDFFuncIn(DataFlowInfo dfi) {
		return new TypeDeclDFFunc(dfi);
	}

	public String allocateAccessName() {
		int x = 0;
		foreach (Method m; members; m.sname != null && m.sname.startsWith("access$")) {
			int v = Integer.parseInt(m.sname.substring(7),10);
			if (x <= v)
				x = v+1;
		}
		String name = String.valueOf(x);
		while (name.length() < 3)
			name = "0"+name;
		return "access$"+name;
	}

	protected rule resolveNameR_1(ResInfo info)
	{
			info ?= this
		;	info @= args
		;	info @= members
		;	info.isCmpByEquals(),
			info ?= tryLoad(info.getName())
	}

	protected rule resolveNameR_Syntax(ResInfo info)
		Import@ syn;
	{
		syn @= members,
		syn instanceof ScopeOfNames,
		trace( Kiev.debug && Kiev.debugResolve, "In import ("+(info.doImportStar() ? "with star" : "no star" )+"): "+syn),
		((ScopeOfNames)syn).resolveNameR(info)
	}

	public rule resolveMethodR(ResInfo info, CallType mt)
		Method@ method;
		TypeRef@ supref;
	{
		info.isStaticAllowed(),
		checkResolved(info.env),
		trace(Kiev.debug && Kiev.debugResolve, "Resolving "+info.getName()+" in "+this),
		{
			method @= members,
			info ?= method.equalsByCast(info.getName(),mt,info.env.tenv.tpVoid,info)
		;	info.isSuperAllowed(),
			supref @= super_types,
			info.enterSuper() : info.leaveSuper(),
			supref.getType(info.env).meta_type.tdecl.resolveMethodR(info,mt)
		}
	}

	public DNode tryLoad(String name) {
		if (name.indexOf(' ') >= 0)
			return null;
		String qname = this.qname();
		if (qname == null || qname.indexOf("Â·") < 0)
			return null;
		trace(Kiev.debug && Kiev.debugResolve,"Package: trying to load in "+this);
		String qn = qname+"Â·"+name;
		DNode dn = Env.getEnv().loadAnyDecl(qn);
		trace(Kiev.debug && Kiev.debugResolve,"DNode "+(dn != null ? dn+" found " : qn+" not found")+" in "+this);
		return dn;
	}

}

@ThisIsANode(lang=CoreLang)
public final class MetaTypeDecl extends ComplexTypeDecl {
	@DataFlowDefinition(in="root()") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="false")	DNode[]		members;
	}

	public MetaTypeDecl() {
		this(new AHandle(), new Symbol());
	}
	public MetaTypeDecl(Symbol symbol) {
		this(new AHandle(), symbol);
	}
	public MetaTypeDecl(AHandle handle, Symbol symbol) {
		super(handle, symbol);
	}

	public MetaType getMetaType(Env env) {
		synchronized (env.tenv) {
			MetaType mt = env.tenv.getExistingMetaType(this.symbol);
			if (mt != null)
				return mt;
			return new XMetaType(env.tenv, this, 0);
		}
	}

}

@ThisIsANode(lang=CoreLang, copyable=false)
public class KievPackage extends DNode implements GlobalDNodeContainer {

	@nodeAttr public DNodeâˆ…						pkg_members;

	public KievPackage(Symbol symbol) {
		super(new AHandle(), symbol);
		assert (symbol.isGlobalSymbol());
		symbol.setUUID(null, "");
	}

	public final ASTNode[] getContainerMembers() { this.pkg_members }

	public void callbackChanged(NodeChangeInfo info) {
		if (info.content_change) {
			if (info.slot.name == "symbol")
				assert (info.old_value == null || info.old_value == info.new_value);
		}
		super.callbackChanged(info);
	}

	public String qname() {
		ANode p = parent();
		if ((p instanceof KievPackage) && !(p instanceof KievRoot))
			return (p.qname()+"Â·"+sname).intern();
		return sname;
	}

	public String toString() {
		String q = qname();
		if (q == null)
			return "<anonymouse>";
		return q.replace('Â·','.');
	}

	public final rule resolveNameR(ResInfo info)
		DNode@ dn;
	{
		info.isStaticAllowed(),
		trace(Kiev.debug && Kiev.debugResolve,"KievPackage: Resolving name "+info.getName()+" in "+this),
		{
			trace(Kiev.debug && Kiev.debugResolve,"TypeDecl: resolving in "+this),
			info ?= this
		;
			info @= pkg_members
		;
			info.isCmpByEquals(),
			info ?= tryLoad(info.getName())
		}
	}

	public DNode tryLoad(String name) {
		int nlen = name.length();
		if (nlen == 0 || !Character.isJavaIdentifierStart(name.charAt(0)))
			return null;
		for (int i=1; i < nlen; i++) {
			if (!Character.isJavaIdentifierPart(name.charAt(i)))
				return null;
		}
		trace(Kiev.debug && Kiev.debugResolve,"Package: trying to load in package "+this);
		DNode dn = null;
		String qn = name;
		if (this instanceof KievRoot) {
			dn = Env.getEnv().loadAnyDecl(qn);
		} else {
			dn = Env.getEnv().loadAnyDecl(qn=(this.qname()+"Â·"+name));
		}
		trace(Kiev.debug && Kiev.debugResolve,"DNode "+(dn != null ? dn+" found " : qn+" not found")+" in "+this);
		return dn;
	}

}

@ThisIsANode(lang=CoreLang, copyable=false)
public class KievRoot extends KievPackage {
	public KievRoot() {
		super(new Symbol());
		this.setTypeDeclNotLoaded(false);
	}
	public String toString() {
		return "<root>";
	}
}


/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.vlang;

import syntax kiev.Syntax;

/**
 * @author Maxim Kizub
 * @version $Revision: 296 $
 *
 */


@ThisIsANode(name="Shadow", lang=CoreLang)
public class Shadow extends ENode {

	@DataFlowDefinition(out="this:in") private static class DFI {}

	@nodeData public ASTNode	rnode;

	public Shadow() {}
	public Shadow(ASTNode node) {
		this.rnode = node;
	}

	public int getPriority(Env env) {
		if (rnode instanceof ENode)
			return ((ENode)rnode).getPriority(env);
		return 255;
	}

	public Type getType(Env env) { return rnode.getType(env); }

	public String toString() {
		return "(shadow of) "+rnode;
	}
}

@ThisIsANode(lang=CoreLang)
public class TypeClassExpr extends ENode {

	@DataFlowDefinition(out="this:in") private static class DFI {}

	@nodeAttr public TypeRef		ttype;

	public TypeClassExpr() {}

	public TypeClassExpr(long pos, TypeRef ttype) {
		this.pos = pos;
		this.ttype = ttype;
	}

	public CoreOperation getOperation(Env env) { env.coreFuncs.fClassAccess.operation }

	public Type getType(Env env) {
		if (this.ttype == null || env.tenv.tpClass.getArgsLength() == 0)
			return env.tenv.tpClass;
		return env.tenv.tpClass.make(new TVarBld(env.tenv.tpClass.getArg(0), this.ttype.getType(env)));
	}

	public String toString() {
		return ttype.toString()+".class";
	}
}

@ThisIsANode(lang=CoreLang)
public class TypeInfoExpr extends ENode {

	@DataFlowDefinition(out="this:in") private static class DFI {}

	@nodeAttr public TypeRef				ttype;
	@nodeAttr public ENode					cl_expr;
	@nodeAttr public ENodeâˆ…				cl_args;

	public TypeInfoExpr() {}

	public TypeInfoExpr(long pos, TypeRef ttype) {
		this.pos = pos;
		this.ttype = ttype;
	}

	public TypeInfoExpr(Type tp) {
		this.ttype = new TypeRef(tp);
	}

	public CoreOperation getOperation(Env env) { env.coreFuncs.fTypeinfoAccess.operation }

	public Type getType(Env env) {
		Type t = ttype.getType(env).getErasedType();
		if (t.isUnerasable()) {
			Struct s = t.getStruct();
			if (s == null)
				return env.tenv.tpTypeInfo;
			s = s.typeinfo_clazz;
			if (s == null)
				return env.tenv.tpTypeInfo;
			return s.getType(env);
		}
		return env.tenv.tpTypeInfo;
	}

	public String toString() {
		return ttype+".type";
	}
}

@ThisIsANode(name="AssertEnabled", lang=CoreLang)
public class AssertEnabledExpr extends ENode {

	@DataFlowDefinition(out="this:in") private static class DFI {}

	public AssertEnabledExpr() {}

	public Type getType(Env env) {
		return env.tenv.tpBoolean;
	}

	public boolean	isConstantExpr(Env env) { return !Kiev.debugOutputA; }
	public Object	getConstValue(Env env) { return Boolean.FALSE; }

	public String toString() {
		return "$assertionsEnabled";
	}
}

@ThisIsANode(name="Set", lang=CoreLang)
public class AssignExpr extends ENode {

	@DataFlowDefinition(out="this:out()") private static class DFI {
	@DataFlowDefinition(in="this:in")	ENode			lval;
	@DataFlowDefinition(in="lval")		ENode			value;
	}

	@nodeAttr public ENode			lval;
	@nodeAttr public ENode			value;

	public AssignExpr() {}

	public AssignExpr(long pos, ENode lval, ENode value) {
		this.pos = pos;
		this.symbol = getOperation(Env.getEnv()).symbol;
		this.lval = lval;
		this.value = value;
	}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		this.lval = args[0];
		this.value = args[1];
	}

	public CoreOperation getOperation(Env env) { env.coreFuncs.fObjectAssign.operation }

	public ENode[] getEArgs() { return new ENode[]{lval,value}; }

	public Type getType(Env env) { return lval.getType(env); }

	public String toString() { toStringByOpdef() }

	public boolean preResolveIn(Env env, INode parent, AttrSlot slot) {
		resolveOpdef(env);
		return true;
	}

	public void mainResolveOut(Env env, INode parent, AttrSlot slot) {
		if (lval.getLvalArity() < 0 && !(Env.ctxMethod(this) != null && Env.ctxMethod(this).isMacro()))
			Kiev.reportWarning(this,"Assigning to a non-lvalue "+lval);
		Type et1 = lval.getType(env);
		Type et2 = value.getType(env);
		// Find out overloaded operator
		if (lval instanceof ContainerAccessExpr) {
			ContainerAccessExpr cae = (ContainerAccessExpr)lval;
			Type ect1 = cae.obj.getType(env);
			Type ect2 = cae.index.getType(env);
			ResInfo info = new ResInfo(env,this,nameArraySetOp,ResInfo.noStatic | ResInfo.noSyntaxContext).match(Method.class);
			CallType mt = new CallType(null,null,new Type[]{ect2,et2},et2,false);
			if (PassInfo.resolveBestMethodR(ect1,info,mt)) {
				Method rm = (Method)info.resolvedDNode();
				if !(rm.isMacro() && rm.isNative()) {
					ENode res = info.buildCall((ASTNode)this, cae.obj, null, new ENode[]{~cae.index,~value});
					res = res.closeBuild();
					this.replaceWithNodeReWalk(res,parent,slot);
					return;
				}
				this.symbol = info.resolvedSymbol();
				return;
			}
		}
		resolveMethodAndNormalize(env,parent,slot);
	}

	public void postVerify(Env env, INode parent, AttrSlot slot) {
		if (lval.getLvalArity() < 0 && !(Env.ctxMethod(this) != null && Env.ctxMethod(this).isMacro()))
			Kiev.reportError(this,"Assigning to a non-lvalue "+lval);
	}

	static class AssignExprDFFunc extends DFFunc {
		final DFFunc f;
		final int res_idx;
		AssignExprDFFunc(DataFlowInfo dfi) {
			f = new DFFunc.DFFuncChildOut(dfi.getSocket("value"));
			res_idx = dfi.allocResult();
		}
		DFState calc(DataFlowInfo dfi) {
			DFState res = dfi.getResult(res_idx);
			if (res != null) return res;
			res = ((AssignExpr)dfi.node_impl).addNodeTypeInfo(f.calc(dfi));
			dfi.setResult(res_idx, res);
			return res;
		}
	}
	public DFFunc newDFFuncOut(DataFlowInfo dfi) {
		return new AssignExprDFFunc(dfi);
	}

	DFState addNodeTypeInfo(DFState dfs) {
		if (value instanceof TypeRef)
			return dfs;
		Var[] path = null;
		switch(lval) {
		case LVarExpr:
			path = new Var[]{((LVarExpr)lval).getVarSafe()};
			break;
		case IFldExpr:
			path = ((IFldExpr)lval).getAccessPath();
			break;
		case SFldExpr:
			path = new Var[]{((SFldExpr)lval).var};
			break;
		}
		if (path != null)
			return dfs.setNodeValue(path,value);
		return dfs;
	}

}


@ThisIsANode(name="Modify", lang=CoreLang)
public class ModifyExpr extends ENode {

	@DataFlowDefinition(out="this:out()") private static class DFI {
	@DataFlowDefinition(in="this:in")	ENode			lval;
	@DataFlowDefinition(in="lval")		ENode			value;
	}

	@nodeAttr public ENode			lval;
	@nodeAttr public ENode			value;

	public ModifyExpr() {}

	public ModifyExpr(long pos, Operator op, ENode lval, ENode value) {
		this.pos = pos;
		this.ident = op.name;
		this.lval = lval;
		this.value = value;
	}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		this.lval = args[0];
		this.value = args[1];
	}

	public ENode[] getEArgs() { return new ENode[]{lval,value}; }

	public Type getType(Env env) { return lval.getType(env); }

	public String toString() { toStringByOpdef() }

	public boolean preResolveIn(Env env, INode parent, AttrSlot slot) {
		resolveOpdef(env);
		return true;
	}

	public void mainResolveOut(Env env, INode parent, AttrSlot slot) {
		if (lval.getLvalArity() < 0) {
			if (Env.ctxMethod(this) != null && Env.ctxMethod(this).isMacro())
				return;
			Kiev.reportWarning(this,"Assigning/modify of a non-lvalue "+lval);
		}
		resolveMethodAndNormalize(env,parent,slot);
	}

	public void postVerify(Env env, INode parent, AttrSlot slot) {
		if (lval.getLvalArity() < 0) {
			if (Env.ctxMethod(this) != null && Env.ctxMethod(this).isMacro())
				return;
			Kiev.reportError(this,"Assigning/modify of a non-lvalue "+lval);
		}
	}

	static class ModifyExprDFFunc extends DFFunc {
		final DFFunc f;
		final int res_idx;
		ModifyExprDFFunc(DataFlowInfo dfi) {
			f = new DFFunc.DFFuncChildOut(dfi.getSocket("value"));
			res_idx = dfi.allocResult();
		}
		DFState calc(DataFlowInfo dfi) {
			DFState res = dfi.getResult(res_idx);
			if (res != null) return res;
			res = ((ModifyExpr)dfi.node_impl).addNodeTypeInfo(f.calc(dfi));
			dfi.setResult(res_idx, res);
			return res;
		}
	}
	public DFFunc newDFFuncOut(DataFlowInfo dfi) {
		return new ModifyExprDFFunc(dfi);
	}

	DFState addNodeTypeInfo(DFState dfs) {
		if (value instanceof TypeRef)
			return dfs;
		Var[] path = null;
		switch(lval) {
		case LVarExpr:
			path = new Var[]{((LVarExpr)lval).getVarSafe()};
			break;
		case IFldExpr:
			path = ((IFldExpr)lval).getAccessPath();
			break;
		case SFldExpr:
			path = new Var[]{((SFldExpr)lval).var};
			break;
		}
		if (path != null)
			return dfs.setNodeValue(path,value);
		return dfs;
	}

}


@ThisIsANode(name="BinOp", lang=CoreLang)
public class BinaryExpr extends ENode {

	@DataFlowDefinition(out="expr2") private static class DFI {
	@DataFlowDefinition(in="this:in")	ENode				expr1;
	@DataFlowDefinition(in="expr1")		ENode				expr2;
	}

	@nodeAttr public ENode			expr1;
	@nodeAttr public ENode			expr2;

	public BinaryExpr() {}

	public BinaryExpr(long pos, Operator op, ENode expr1, ENode expr2) {
		this.pos = pos;
		this.ident = op.name;
		this.expr1 = expr1;
		this.expr2 = expr2;
	}

	public BinaryExpr(long pos, CoreFunc op, ENode expr1, ENode expr2) {
		this.pos = pos;
		this.symbol = op.operation.symbol;
		this.expr1 = expr1;
		this.expr2 = expr2;
	}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		this.expr1 = args[0];
		this.expr2 = args[1];
	}

	public ENode[] getEArgs() { return new ENode[]{expr1,expr2}; }

	public String toString() { toStringByOpdef() }

	public Type getType(Env env) {
		DNode dn = this.dnode;
		Method m;
		if (dn instanceof Method) {
			m = (Method)dn;
		} else {
			Opdef opd = resolveOpdef(env);
			if (opd == null)
				return env.tenv.tpVoid;
			Symbol sym = opd.resolveMethod(env,this);
			if (sym == null)
				return env.tenv.tpVoid;
			this.symbol = sym;
			m = (Method)sym.dnode;
		}
		Type ret = m.mtype.ret();
		if (!(ret instanceof ArgType) && !ret.isAbstract()) return ret;
		return m.makeType(this).ret();
	}

	public boolean preResolveIn(Env env, INode parent, AttrSlot slot) {
		resolveOpdef(env);
		return true;
	}

	public void mainResolveOut(Env env, INode parent, AttrSlot slot) {
		resolveMethodAndNormalize(env,parent,slot);
	}

	public boolean	isConstantExpr(Env env) {
		if (!expr1.isConstantExpr(env))
			return false;
		if (!expr2.isConstantExpr(env))
			return false;
		DNode m = this.dnode;
		if !(m instanceof Method) {
			Opdef opd = resolveOpdef(env);
			if (opd == null)
				return false;
			Symbol sym = opd.resolveMethod(env,this);
			if (sym != null) {
				this.symbol = sym;
				m = sym.dnode;
			}
		}
		if (m instanceof CoreOperation)
			return true;
		return false;
	}
	public Object	getConstValue(Env env) {
		Method m = (Method)this.dnode;
		if (m == null)
			m = (Method)resolveOpdef(env).resolveMethod(env,this).dnode;
		return ((CoreOperation)m).calc(this).getConstValue(env);
	}
}

@ThisIsANode(name="UnaryOp", lang=CoreLang)
public class UnaryExpr extends ENode {

	@DataFlowDefinition(out="expr") private static class DFI {
	@DataFlowDefinition(out="this:in")			ENode		expr;
	}

	@nodeAttr public ENode			expr;

	public UnaryExpr() {}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		this.expr = args[0];
	}

	public ENode[] getEArgs() { return new ENode[]{expr}; }

	public String toString() { toStringByOpdef() }

	public Type getType(Env env) {
		DNode dn = this.dnode;
		Method m;
		if (dn instanceof Method) {
			m = (Method)dn;
		} else {
			Opdef opd = resolveOpdef(env);
			if (opd == null)
				return env.tenv.tpVoid;
			Symbol sym = opd.resolveMethod(env,this);
			if (sym == null)
				return env.tenv.tpVoid;
			this.symbol = sym;
			m = (Method)sym.dnode;
		}
		Type ret = m.mtype.ret();
		if (!(ret instanceof ArgType) && !ret.isAbstract()) return ret;
		return m.makeType(this).ret();
	}

	public boolean preResolveIn(Env env, INode parent, AttrSlot slot) {
		resolveOpdef(env);
		return true;
	}

	public void mainResolveOut(Env env, INode parent, AttrSlot slot) {
		Method m = resolveMethodAndNormalize(env,parent,slot);
		if (m == null)
			return; // error already reported
		// Check if expression is a constant
		if (m instanceof CoreOperation && expr.isConstantExpr(env)) {
			replaceWithNodeReWalk(((CoreOperation)m).calc(this),parent,slot);
			return;
		}
	}
	public boolean	isConstantExpr(Env env) {
		if (!expr.isConstantExpr(env))
			return false;
		DNode m = this.dnode;
		if !(m instanceof Method) {
			Opdef opd = resolveOpdef(env);
			if (opd == null)
				return false;
			Symbol sym = opd.resolveMethod(env,this);
			if (sym != null) {
				this.symbol = sym;
				m = sym.dnode;
			}
		}
		if (m instanceof CoreOperation)
			return true;
		return false;
	}
	public Object getConstValue(Env env) {
		return ((CoreOperation)this.dnode).calc(this).getConstValue(env);
	}
}

@ThisIsANode(name="StrConcat", lang=CoreLang)
public class StringConcatExpr extends ENode {

	@DataFlowDefinition(out="args") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="true")	ENode[]	args;
	}

	@nodeAttr public ENodeâˆ…				args;

	public StringConcatExpr() {}

	public StringConcatExpr(long pos) {
		this.pos = pos;
	}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		ENode arg1 = args[0];
		ENode arg2 = args[1];
		if (arg1 instanceof StringConcatExpr)
			this.args.addAll(arg1.args.delToArray());
		else
			this.args.add(arg1);
		if (arg2 instanceof StringConcatExpr)
			this.args.addAll(arg2.args.delToArray());
		else
			this.args.add(arg2);
	}

	public CoreOperation getOperation(Env env) { env.coreFuncs.fStringConcatSS.operation }

	public Type getType(Env env) { return env.tenv.tpString; }

	public String toString() {
		StringBuffer sb = new StringBuffer();
		for(int i=0; i < args.length; i++) {
			sb.append(args[i].toString());
			if( i < args.length-1 )
				sb.append('+');
		}
		return sb.toString();
	}

	public void appendArg(ENode expr) {
		args.append(~expr);
	}

	public boolean	isConstantExpr(Env env) {
		foreach (ENode arg; args; !arg.isConstantExpr(env))
			return false;
		return true;
	}
	public Object getConstValue(Env env) {
		StringBuilder sb = new StringBuilder();
		foreach (ENode arg; args) {
			sb.append(arg.getConstValue(env));
		}
		return sb.toString();
	}
}

@ThisIsANode(name="Comma", lang=CoreLang)
public class CommaExpr extends ENode {

	@DataFlowDefinition(out="exprs") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="true")	ENode[]	exprs;
	}

	@nodeAttr public ENodeâˆ…			exprs;

	public CommaExpr() {}

	public CommaExpr(ENode expr) {
		this.pos = pos;
		this.exprs.add(expr);
	}

	public int getPriority(Env env) { return 0; }

	public Type getType(Env env) { return exprs[exprs.length-1].getType(env); }

	public String toString() {
		StringBuffer sb = new StringBuffer();
		for(int i=0; i < exprs.length; i++) {
			sb.append(exprs[i]);
			if( i < exprs.length-1 )
				sb.append(',');
		}
		return sb.toString();
	}
}

@ThisIsANode(name="Block", lang=CoreLang)
public class Block extends ENode implements ScopeOfNames, ScopeOfMethods {

	@DataFlowDefinition(out="this:out()") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="true")	ENode[]		stats;
	}

	@nodeAttr
	public ASTNodeâˆ…			stats;
	@nodeAttr(ext_data=true)
	public Label				lblbrk;

	public Block() {}

	public Block(long pos) {
		this.pos = pos;
	}

	public Block(long pos, ASTNode[] sts) {
		this.pos = pos;
		this.stats.addAll(sts);
	}

	// break target (ENodes)
	public boolean isBreakTarget() {
		return lblbrk != null;
	}

	public void addSymbol(DNode sym) {
		foreach(DNode n; stats; n.sname == sym.sname)
			Kiev.reportError((ASTNode)sym,"Symbol "+sym.sname+" already declared in this scope");
		stats.append((ASTNode)sym);
	}

	public void insertSymbol(DNode sym, int idx) {
		foreach(DNode n; stats; n.sname == sym.sname)
			Kiev.reportError((ASTNode)sym,"Symbol "+sym.sname+" already declared in this scope");
		stats.insert(idx,(ASTNode)sym);
	}

	public rule resolveNameR(ResInfo info)
		ASTNode@ n;
	{
		n @= new SymbolIterator(this.stats, info.getPrevNode()),
		{
			n instanceof CaseLabel,
			((CaseLabel)n).resolveNameR(info)
		;
			info ?= n
		;
			info.isForwardsAllowed(),
			n instanceof Var && ((Var)n).isForward(),
			info.enterForward((Var)n) : info.leaveForward((Var)n),
			((Var)n).getType(info.env).resolveNameAccessR(info)
		}
	}

	public rule resolveMethodR(ResInfo info, CallType mt)
		ASTNode@ n;
	{
		info.isForwardsAllowed(),
		n @= new SymbolIterator(this.stats, info.getPrevNode()),
		{
			n instanceof CaseLabel,
			((CaseLabel)n).resolveMethodR(info, mt)
		;
			n instanceof Var && ((Var)n).isForward(),
			info.enterForward((Var)n) : info.leaveForward((Var)n),
			((Var)n).getType(info.env).resolveCallAccessR(info, mt)
		}
	}

	public int getPriority(Env env) { return 255; }

	public Type getType(Env env) {
		if (isGenVoidExpr()) return env.tenv.tpVoid;
		if (stats.length == 0) return env.tenv.tpVoid;
		return stats[stats.length-1].getType(env);
	}

	static class BlockDFFunc extends DFFunc {
		final DFFunc f;
		final int res_idx;
		BlockDFFunc(DataFlowInfo dfi) {
			f = new DFFunc.DFFuncChildOut(dfi.getSocket("stats"));
			res_idx = dfi.allocResult();
		}
		DFState calc(DataFlowInfo dfi) {
			DFState res = dfi.getResult(res_idx);
			if (res != null) return res;
			Block node = (Block)dfi.node_impl;
			Vector<Var> vars = new Vector<Var>();
			foreach (ASTNode dn; node.stats) {
				if (dn instanceof Var) {
					vars.append((Var)dn);
					continue;
				}
			}
			if (vars.length > 0)
				res = DFFunc.calc(f, dfi).cleanInfoForVars(vars.toArray());
			else
				res = DFFunc.calc(f, dfi);
			dfi.setResult(res_idx, res);
			return res;
		}
	}
	public DFFunc newDFFuncOut(DataFlowInfo dfi) {
		return new BlockDFFunc(dfi);
	}

	public String toString() {
		return "{...}";
	}

}

@ThisIsANode(name="IncrOp", lang=CoreLang)
public class IncrementExpr extends ENode {

	@DataFlowDefinition(out="lval") private static class DFI {
	@DataFlowDefinition(in="this:in")	ENode			lval;
	}

	@nodeAttr public ENode				lval;

	public IncrementExpr() {}

	public IncrementExpr(long pos, CoreFunc op, ENode lval) {
		this.pos = pos;
		this.symbol = op.operation.symbol;
		this.lval = lval;
	}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		this.lval = args[0];
	}

	public ENode[] getEArgs() { return new ENode[]{lval}; }

	public Type getType(Env env) {
		return lval.getType(env);
	}

	public String toString() { toStringByOpdef() }

	public boolean preResolveIn(Env env, INode parent, AttrSlot slot) {
		resolveOpdef(env);
		return true;
	}

	public void mainResolveOut(Env env, INode parent, AttrSlot slot) {
		resolveMethodAndNormalize(env,parent,slot);
	}
}

@ThisIsANode(name="IfOp", lang=CoreLang)
public class ConditionalExpr extends ENode {

	@DataFlowDefinition(out="join expr1 expr2") private static class DFI {
	@DataFlowDefinition(in="this:in")	ENode		cond;
	@DataFlowDefinition(in="cond:true")	ENode		expr1;
	@DataFlowDefinition(in="cond:false")	ENode		expr2;
	}

	@nodeAttr public ENode			cond;
	@nodeAttr public ENode			expr1;
	@nodeAttr public ENode			expr2;

	public ConditionalExpr() {}

	public ConditionalExpr(long pos, ENode cond, ENode expr1, ENode expr2) {
		this.pos = pos;
		this.cond = cond;
		this.expr1 = expr1;
		this.expr2 = expr2;
	}

	public CoreOperation getOperation(Env env) { env.coreFuncs.fConditional.operation }

	public ENode[] getEArgs() { return new ENode[]{cond, expr1, expr2}; }

	public String toString() { toStringByOpdef() }

	public Type getType(Env env) {
		Type t1 = expr1.getType(env);
		Type t2 = expr2.getType(env);
		if( t1.isReference() && t2.isReference() ) {
			if( t1 â‰¡ t2 ) return t1;
			if( t1 â‰¡ env.tenv.tpNull ) return t2;
			if( t2 â‰¡ env.tenv.tpNull ) return t1;
			return Type.leastCommonType(t1,t2);
		}
		if( t1.isNumber() && t2.isNumber() ) {
			if( t1 â‰¡ t2 ) return t1;
			return CoreType.upperCastNumbers(t1,t2);
		}
		return expr1.getType(env);
	}
}

@ThisIsANode(name="Cast", lang=CoreLang)
public class CastExpr extends ENode {

	@DataFlowDefinition(out="expr") private static class DFI {
	@DataFlowDefinition(in="this:in")	ENode		expr;
	}

	@nodeAttr public TypeRef		ctype;
	@nodeAttr public ENode			expr;

	public CastExpr() {}

	public CastExpr(long pos, Type ctype, ENode expr) {
		this.pos = pos;
		this.ctype = new TypeRef(ctype);
		this.expr = expr;
	}

	public CastExpr(long pos, TypeRef ctype, ENode expr) {
		this.pos = pos;
		this.ctype = ctype;
		this.expr = expr;
	}

	public CastExpr(Type ctype, ENode expr) {
		this.ctype = new TypeRef(ctype);
		this.expr = expr;
	}

	public CoreOperation getOperation(Env env) { env.coreFuncs.fCast.operation }

	public int getPriority(Env env) { return opCastPriority; }

	public ENode[] getEArgs() { return new ENode[]{ctype, expr}; }

	public String toString() { toStringByOpdef() }

	public Type getType(Env env) {
		return ctype.getType(env);
	}

	public Type[] getAccessTypes(Env env) {
		return new Type[]{getType(env)};
	}

	public void mainResolveOut(Env env, INode parent, AttrSlot slot) {
		Type ctype = this.ctype.getType(env);
		Type extp = Type.getRealType(ctype,expr.getType(env));
		if (extp.getAutoCastTo(ctype) == null) {
			resolveOverloadedCast(extp,env);
		}
		else if (extp instanceof CTimeType && extp.getUnboxedType().getAutoCastTo(ctype) != null) {
			resolveOverloadedCast(extp,env);
		}
		else if (!extp.isInstanceOf(ctype) && extp.getStruct() != null && extp.getStruct().isStructView()
				&& ((KievView)extp.getStruct()).view_of.getType(env).getAutoCastTo(ctype) != null)
		{
			resolveOverloadedCast(extp,env);
		}
	}

	private boolean resolveOverloadedCast(Type et, Env env) {
		ResInfo info = new ResInfo(env,this,nameCastOp,ResInfo.noStatic|ResInfo.noForwards|ResInfo.noSyntaxContext).match(Method.class);
		CallType mt = new CallType(et,null,null,this.ctype.getType(env),false);
		if( PassInfo.resolveBestMethodR(et,info,mt) ) {
			this.symbol = info.resolvedSymbol();
			return true;
		}
		info = new ResInfo(env,this,nameCastOp,ResInfo.noForwards|ResInfo.noSyntaxContext).match(Method.class);
		mt = new CallType(null,null,new Type[]{expr.getType(env)},this.ctype.getType(env),false);
		if( PassInfo.resolveMethodR(this,info,mt) ) {
			this.symbol = info.resolvedSymbol();
			return true;
		}
		info = new ResInfo(env,this,nameCastOp,ResInfo.noForwards|ResInfo.noSyntaxContext).match(Method.class);
		if( this.ctype.getTypeDecl(env).resolveMethodR(info,mt) ) {
			this.symbol = info.resolvedSymbol();
			return true;
		}
		info = new ResInfo(env,this,nameCastOp,ResInfo.noForwards|ResInfo.noSyntaxContext).match(Method.class);
		if( expr.getType(env).meta_type.tdecl.resolveMethodR(info,mt) ) {
			this.symbol = info.resolvedSymbol();
			return true;
		}
		return false;
	}

	public static void autoCast(Env env, ENode ex, TypeRef tp, INode parent, AttrSlot slot) {
		autoCast(env, ex, tp.getType(env), parent, slot);
	}
	public static void autoCast(Env env, ENode ex, Type tp, INode parent, AttrSlot slot) {
		assert(ex.isAttached());
		Type at = ex.getType(env);
		if( !at.equals(tp) ) {
			if( at.isReference() && !tp.isReference() && ((CoreType)tp).getRefTypeForPrimitive() â‰ˆ at )
				autoCastToPrimitive(env, ex, (CoreType)tp, parent, slot);
			else if( !at.isReference() && tp.isReference() && ((CoreType)at).getRefTypeForPrimitive() â‰ˆ tp )
				autoCastToReference(env, ex, parent, slot);
			else if( at.isReference() && tp.isReference() && at.isInstanceOf(tp) )
				;
			else
				ex.replaceWith(fun ()->ENode {return new CastExpr(ex.pos,tp,~ex);}, parent, slot);
		}
	}

	public static ENode autoCastToReference(Env env, ENode ex, INode parent, AttrSlot slot) {
		assert(ex.isAttached());
		Type tp = ex.getType(env);
		if( tp.isReference() ) return ex;
		Type ref;
		if     ( tp â‰¡ env.tenv.tpBoolean )	ref = env.tenv.tpBooleanRef;
		else if( tp â‰¡ env.tenv.tpByte    )	ref = env.tenv.tpByteRef;
		else if( tp â‰¡ env.tenv.tpShort   )	ref = env.tenv.tpShortRef;
		else if( tp â‰¡ env.tenv.tpInt     )	ref = env.tenv.tpIntRef;
		else if( tp â‰¡ env.tenv.tpLong    )	ref = env.tenv.tpLongRef;
		else if( tp â‰¡ env.tenv.tpFloat   )	ref = env.tenv.tpFloatRef;
		else if( tp â‰¡ env.tenv.tpDouble  )	ref = env.tenv.tpDoubleRef;
		else if( tp â‰¡ env.tenv.tpChar    )	ref = env.tenv.tpCharRef;
		else
			throw new RuntimeException("Unknown primitive type "+tp);
		return (ENode)ex.replaceWith(fun ()->ENode {return new NewExpr(ex.pos,ref,new ENode[]{~ex});}, parent, slot);
	}

	public static ENode autoCastToPrimitive(Env env, ENode ex, CoreType ctp, INode parent, AttrSlot slot) {
		assert(ex.isAttached());
		Type tp = ex.getType(env);
		if( !tp.isReference() ) return ex;
		if( tp â‰ˆ env.tenv.tpBooleanRef )
			return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
				env.tenv.tpBooleanRef.tdecl.resolveMethod(env,"booleanValue",env.tenv.tpBoolean),ENode.emptyArray
			);}, parent, slot);
		if( tp â‰ˆ env.tenv.tpByteRef )
			return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
				env.tenv.tpByteRef.tdecl.resolveMethod(env,"byteValue",env.tenv.tpByte),ENode.emptyArray
			);}, parent, slot);
		if( tp â‰ˆ env.tenv.tpShortRef )
			return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
				env.tenv.tpShortRef.tdecl.resolveMethod(env,"shortValue",env.tenv.tpShort),ENode.emptyArray
			);}, parent, slot);
		if( tp â‰ˆ env.tenv.tpIntRef )
			return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
				env.tenv.tpIntRef.tdecl.resolveMethod(env,"intValue",env.tenv.tpInt),ENode.emptyArray
			);}, parent, slot);
		if( tp â‰ˆ env.tenv.tpLongRef )
			return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
				env.tenv.tpLongRef.tdecl.resolveMethod(env,"longValue",env.tenv.tpLong),ENode.emptyArray
			);}, parent, slot);
		if( tp â‰ˆ env.tenv.tpFloatRef )
			return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
				env.tenv.tpFloatRef.tdecl.resolveMethod(env,"floatValue",env.tenv.tpFloat),ENode.emptyArray
			);}, parent, slot);
		if( tp â‰ˆ env.tenv.tpDoubleRef )
			return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
				env.tenv.tpDoubleRef.tdecl.resolveMethod(env,"doubleValue",env.tenv.tpDouble),ENode.emptyArray
			);}, parent, slot);
		if( tp â‰ˆ env.tenv.tpCharRef )
			return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
				env.tenv.tpCharRef.tdecl.resolveMethod(env,"charValue",env.tenv.tpChar),ENode.emptyArray
			);}, parent, slot);
		if ( tp â‰ˆ env.tenv.tpNumberRef ) {
			if ( ctp â‰¡ env.tenv.tpBoolean )
				return (ENode)ex.replaceWith(fun ()->ENode {return
						new BinaryBoolExpr(ex.pos, env.coreFuncs.fIntBoolNE,
							new CallExpr(ex.pos,
								new NewExpr(ex.pos,env.tenv.tpBigDecRef,new ENode[]{
									new CallExpr(ex.pos,~ex,env.tenv.tpNumberRef.tdecl.resolveMethod(env,"toString",env.tenv.tpString),ENode.emptyArray)
								}),
								env.tenv.tpBigDecRef.tdecl.resolveMethod(env,"compareTo",env.tenv.tpInt),
								new ENode[]{
									env.tenv.tpBigDecRef.tdecl.resolveField(env,"ZERO")
								}),
							new ConstIntExpr(0)
				);}, parent, slot);
			if ( ctp â‰¡ env.tenv.tpByte )
				return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
					env.tenv.tpNumberRef.tdecl.resolveMethod(env,"byteValue",env.tenv.tpByte),ENode.emptyArray
				);}, parent, slot);
			if ( ctp â‰¡ env.tenv.tpShort )
				return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
					env.tenv.tpNumberRef.tdecl.resolveMethod(env,"shortValue",env.tenv.tpShort),ENode.emptyArray
				);}, parent, slot);
			if ( ctp â‰¡ env.tenv.tpInt )
				return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
					env.tenv.tpNumberRef.tdecl.resolveMethod(env,"intValue",env.tenv.tpInt),ENode.emptyArray
				);}, parent, slot);
			if ( ctp â‰¡ env.tenv.tpLong )
				return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
					env.tenv.tpNumberRef.tdecl.resolveMethod(env,"longValue",env.tenv.tpLong),ENode.emptyArray
				);}, parent, slot);
			if ( ctp â‰¡ env.tenv.tpFloat )
				return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
					env.tenv.tpNumberRef.tdecl.resolveMethod(env,"floatValue",env.tenv.tpFloat),ENode.emptyArray
				);}, parent, slot);
			if ( ctp â‰¡ env.tenv.tpDouble )
				return (ENode)ex.replaceWith(fun ()->ENode {return new CallExpr(ex.pos,~ex,
					env.tenv.tpNumberRef.tdecl.resolveMethod(env,"doubleValue",env.tenv.tpDouble),ENode.emptyArray
				);}, parent, slot);
			if ( ctp â‰¡ env.tenv.tpChar )
				return (ENode)ex.replaceWith(fun ()->ENode {return new CastExpr(ex.pos, env.tenv.tpChar,
					new CallExpr(ex.pos,~ex,
						env.tenv.tpNumberRef.tdecl.resolveMethod(env,"intValue",env.tenv.tpInt),ENode.emptyArray)
				);}, parent, slot);
		}
		throw new RuntimeException("Type "+tp+" is not a reflection of primitive type");
	}
}


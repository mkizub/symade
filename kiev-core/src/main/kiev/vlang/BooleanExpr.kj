/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.vlang;

import syntax kiev.Syntax;

/**
 * @author Maxim Kizub
 *
 */

@ThisIsANode(lang=CoreLang)
public abstract class BoolExpr extends ENode {

	public BoolExpr() {}

	public Type getType(Env env) { return env.tenv.tpBoolean; }

	public boolean preResolveIn(Env env, INode parent, AttrSlot slot) {
		if (getOperation(env) == null)
			resolveOpdef(env);
		return true;
	}

	public void mainResolveOut(Env env, INode parent, AttrSlot slot) {
		resolveMethodAndNormalize(env,parent,slot);
	}

}

@ThisIsANode(name="Or", lang=CoreLang)
public class BinaryBooleanOrExpr extends BoolExpr {

	@DataFlowDefinition(tru="join expr1:true expr2:true", fls="expr2:false") private static class DFI {
	@DataFlowDefinition(in="this:in")			ENode			expr1;
	@DataFlowDefinition(in="expr1:false")		ENode			expr2;
	}

	@nodeAttr public ENode			expr1;
	@nodeAttr public ENode			expr2;

	public BinaryBooleanOrExpr() {
		this.symbol = getOperation(Env.getEnv()).symbol;
	}

	public BinaryBooleanOrExpr(long pos, ENode expr1, ENode expr2) {
		this.pos = pos;
		this.expr1 = expr1;
		this.expr2 = expr2;
		this.symbol = getOperation(Env.getEnv()).symbol;
	}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		this.expr1 = args[0];
		this.expr2 = args[1];
	}

	public CoreOperation getOperation(Env env) { env.coreFuncs.fBoolBoolOR.operation }

	public ENode[] getEArgs() { return new ENode[]{expr1,expr2}; }

	public String toString() { toStringByOpdef() }

	public boolean	isConstantExpr(Env env) {
		if (expr1.isConstantExpr(env)) {
			Object b1 = expr1.getConstValue(env);
			if (b1 instanceof Boolean && b1.booleanValue())
				return true;
		}
		if (expr2.isConstantExpr(env)) {
			Object b2 = expr2.getConstValue(env);
			if (b2 instanceof Boolean && b2.booleanValue())
				return true;
		}
		if (expr1.isConstantExpr(env) && expr2.isConstantExpr(env)) {
			Object b1 = expr1.getConstValue(env);
			Object b2 = expr2.getConstValue(env);
			if (b1 instanceof Boolean && b2 instanceof Boolean)
				return true;
		}
		return false;
	}
	public Object	getConstValue(Env env) {
		if (expr1.isConstantExpr(env)) {
			Object b1 = expr1.getConstValue(env);
			if (b1 instanceof Boolean && b1.booleanValue())
				return Boolean.TRUE;
		}
		if (expr2.isConstantExpr(env)) {
			Object b2 = expr2.getConstValue(env);
			if (b2 instanceof Boolean && b2.booleanValue())
				return Boolean.TRUE;
		}
		Boolean b1 = (Boolean)expr1.getConstValue(env);
		Boolean b2 = (Boolean)expr2.getConstValue(env);
		return Boolean.valueOf(b1.booleanValue() || b2.booleanValue());
	}
}


@ThisIsANode(name="And", lang=CoreLang)
public class BinaryBooleanAndExpr extends BoolExpr {

	@DataFlowDefinition(fls="join expr1:false expr2:false", tru="expr2:true") private static class DFI {
	@DataFlowDefinition(in="this:in")		ENode			expr1;
	@DataFlowDefinition(in="expr1:true")		ENode			expr2;
	}

	@nodeAttr public ENode			expr1;
	@nodeAttr public ENode			expr2;

	public BinaryBooleanAndExpr() {
		this.symbol = getOperation(Env.getEnv()).symbol;
	}

	public BinaryBooleanAndExpr(long pos, ENode expr1, ENode expr2) {
		this.pos = pos;
		this.expr1 = expr1;
		this.expr2 = expr2;
		this.symbol = getOperation(Env.getEnv()).symbol;
	}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		this.expr1 = args[0];
		this.expr2 = args[1];
	}

	public CoreOperation getOperation(Env env) { env.coreFuncs.fBoolBoolAND.operation }

	public ENode[] getEArgs() { return new ENode[]{expr1,expr2}; }

	public String toString() { toStringByOpdef() }

	public boolean	isConstantExpr(Env env) {
		if (expr1.isConstantExpr(env)) {
			Object b1 = expr1.getConstValue(env);
			if (b1 instanceof Boolean && !b1.booleanValue())
				return true;
		}
		if (expr2.isConstantExpr(env)) {
			Object b2 = expr2.getConstValue(env);
			if (b2 instanceof Boolean && !b2.booleanValue())
				return true;
		}
		if (expr1.isConstantExpr(env) && expr2.isConstantExpr(env)) {
			Object b1 = expr1.getConstValue(env);
			Object b2 = expr2.getConstValue(env);
			if (b1 instanceof Boolean && b2 instanceof Boolean)
				return true;
		}
		return false;
	}
	public Object	getConstValue(Env env) {
		if (expr1.isConstantExpr(env)) {
			Object b1 = expr1.getConstValue(env);
			if (b1 instanceof Boolean && !b1.booleanValue())
				return Boolean.FALSE;
		}
		if (expr2.isConstantExpr(env)) {
			Object b2 = expr2.getConstValue(env);
			if (b2 instanceof Boolean && !b2.booleanValue())
				return Boolean.FALSE;
		}
		Boolean b1 = (Boolean)expr1.getConstValue(env);
		Boolean b2 = (Boolean)expr2.getConstValue(env);
		return Boolean.valueOf(b1.booleanValue() && b2.booleanValue());
	}
}

@ThisIsANode(name="Cmp", lang=CoreLang)
public class BinaryBoolExpr extends BoolExpr {

	@DataFlowDefinition(out="expr2") private static class DFI {
	@DataFlowDefinition(in="this:in")		ENode			expr1;
	@DataFlowDefinition(in="expr1")			ENode			expr2;
	}

	@nodeAttr public ENode			expr1;
	@nodeAttr public ENode			expr2;

	public BinaryBoolExpr() {}

	public BinaryBoolExpr(long pos, CoreFunc op, ENode expr1, ENode expr2) {
		this.pos = pos;
		this.symbol = op.operation.symbol;
		this.expr1 = expr1;
		this.expr2 = expr2;
	}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		this.expr1 = args[0];
		this.expr2 = args[1];
	}

	public ENode[] getEArgs() { return new ENode[]{expr1,expr2}; }

	public String toString() { toStringByOpdef() }

	public void mainResolveOut(Env env, INode parent, AttrSlot slot) {
		resolveMethodAndNormalize(env,parent,slot);
	}

	public boolean	isConstantExpr(Env env) {
		if (!expr1.isConstantExpr(env))
			return false;
		if (!expr2.isConstantExpr(env))
			return false;
		DNode m = this.dnode;
		if !(m instanceof Method) {
			Opdef opd = resolveOpdef(env);
			if (opd == null)
				return false;
			Symbol sym = opd.resolveMethod(env,this);
			if (sym != null) {
				this.symbol = sym;
				m = sym.dnode;
			}
		}
		if (m instanceof CoreOperation)
			return true;
		return false;
	}
	public Object	getConstValue(Env env) {
		Method m = (Method)this.dnode;
		if (m == null) {
			Symbol sym = resolveOpdef(env).resolveMethod(env,this);
			if (sym != null)
				m = (Method)sym.dnode;
		}
		return ((CoreOperation)m).calc(this).getConstValue(env);
	}
}

@ThisIsANode(name="InstanceOf", lang=CoreLang)
public class InstanceofExpr extends BoolExpr {

	@DataFlowDefinition(tru="this:tru()", fls="expr") private static class DFI {
	@DataFlowDefinition(in="this:in")		ENode			expr;
	}

	@nodeAttr public ENode			expr;
	@nodeAttr public TypeRef		itype;

	public InstanceofExpr() {
		this.symbol = getOperation(Env.getEnv()).symbol;
	}

	public InstanceofExpr(long pos, ENode expr, TypeRef itype) {
		this.pos = pos;
		this.expr = expr;
		this.itype = itype;
		this.symbol = getOperation(Env.getEnv()).symbol;
	}

	public InstanceofExpr(long pos, ENode expr, Type itype) {
		this.pos = pos;
		this.expr = expr;
		this.itype = new TypeRef(itype);
		this.symbol = getOperation(Env.getEnv()).symbol;
	}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		this.expr = args[0];
		this.itype = (TypeRef)args[1];
	}

	public CoreOperation getOperation(Env env) { env.coreFuncs.fAnyInstanceOf.operation }

	public ENode[] getEArgs() { return new ENode[]{expr,itype}; }

	public String toString() { toStringByOpdef() }

	static class InstanceofExprDFFunc extends DFFunc {
		final DFFunc f;
		final int res_idx;
		InstanceofExprDFFunc(DataFlowInfo dfi) {
			f = new DFFunc.DFFuncChildOut(dfi.getSocket("expr"));
			res_idx = dfi.allocResult();
		}
		DFState calc(DataFlowInfo dfi) {
			DFState res = dfi.getResult(res_idx);
			if (res != null) return res;
			res = ((InstanceofExpr)dfi.node_impl).addNodeTypeInfo(DFFunc.calc(f, dfi));
			dfi.setResult(res_idx, res);
			return res;
		}
	}
	public DFFunc newDFFuncTru(DataFlowInfo dfi) {
		return new InstanceofExprDFFunc(dfi);
	}

	DFState addNodeTypeInfo(DFState dfs) {
		Var[] path = null;
		switch(expr) {
		case LVarExpr:
			path = new Var[]{((LVarExpr)expr).getVarSafe()};
			break;
		case IFldExpr:
			path = ((IFldExpr)expr).getAccessPath();
			break;
		case SFldExpr:
			path = new Var[]{((SFldExpr)expr).var};
			break;
		}
		if (path != null) {
			Type et = expr.getType(Env.getEnv());
			Type tp = itype.getType(Env.getEnv());
			if (et instanceof CTimeType && !(tp instanceof CTimeType)) {
				tp = et.applay(new TVarBld(et.getArg(0), tp));
			}
			return dfs.addNodeType(path,tp);
		}
		return dfs;
	}
}

@ThisIsANode(name="Not", lang=CoreLang)
public class BooleanNotExpr extends BoolExpr {

	@DataFlowDefinition(fls="expr:true", tru="expr:false") private static class DFI {
	@DataFlowDefinition(in="this:in")		ENode			expr;
	}

	@nodeAttr public ENode		expr;

	public BooleanNotExpr() {
		this.symbol = getOperation(Env.getEnv()).symbol;
	}

	public BooleanNotExpr(long pos, ENode expr) {
		this.pos = pos;
		this.expr = expr;
		this.symbol = getOperation(Env.getEnv()).symbol;
	}

	public void initFrom(ENode node, Symbol sym, ENode[] args) {
		this.pos = node.pos;
		this.symbol = sym;
		this.expr = args[0];
	}

	public CoreOperation getOperation(Env env) { env.coreFuncs.fBoolBoolNOT.operation }

	public ENode[] getEArgs() { return new ENode[]{expr}; }

	public String toString() { toStringByOpdef() }

	public boolean	isConstantExpr(Env env) {
		if (expr.isConstantExpr(env)) {
			Object b1 = expr.getConstValue(env);
			if (b1 instanceof Boolean)
				return true;
		}
		return false;
	}
	public Object	getConstValue(Env env) {
		Boolean b = (Boolean)expr.getConstValue(env);
		return b.booleanValue() ? Boolean.FALSE : Boolean.TRUE;
	}
}


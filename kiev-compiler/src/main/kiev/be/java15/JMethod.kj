/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.be.java15;
import syntax kiev.Syntax;

/**
 * @author Maxim Kizub
 *
 */

public class JMethod extends JDNode {

	@virtual typedef VT  ≤ Method;

	public final JWBCCondition[] conditions;

	@abstract
	public:ro	JVar[]					params;
	@abstract
	public:ro	JENode					body;

	@abstract
	public:ro	CallType				mtype;
	@abstract
	public:ro	CallType				dtype;
	@abstract
	public:ro	CallType				etype;

	@abstract
	public:ro	JBlock					block;

	public static JMethod attachJMethod(Method impl)
		operator "new T"
		operator "( T ) V"
	{
		if (impl == null)
			return null;
		JNode jn = getJData(impl);
		if (jn != null)
			return (JMethod)jn;
		return new JMethod(impl);
	}

	JMethod(Method impl) {
		super(impl);
		Vector<JWBCCondition> conds = new Vector<JWBCCondition>();
		foreach (WBCCondition wbc; impl.conditions)
			conds.append((JWBCCondition)wbc);
		if (conds.isEmpty())
			this.conditions = JWBCCondition.emptyArray;
		else
			this.conditions = conds.toArray();
	}

	public void backendCleanup() {
		jattrs = Attr.emptyArray;
	}

	public MetaThrows getMetaThrows() { vn().getMetaThrows() }

	public JVar	getRetVar() { return (JVar)this.vn().getRetVar(); }

	@getter public final JVar[] get$params() {
		return JNode.toJArray<JVar>(vn().params);
	}

	@getter public final JENode get$body() {
		return (JENode)vn().body;
	}

	@getter public final JBlock get$block() {
		return (JBlock)vn().block;
	}

	@getter public final CallType get$mtype() { vn().mtype }
	@getter public final CallType get$dtype() { vn().dtype }
	@getter public final CallType get$etype() { vn().etype }

	public final boolean hasName(String nm) { vn().hasName(nm) }

	public final boolean isVirtualStatic() { vn().isVirtualStatic() }
	public final boolean isVarArgs() { vn().isVarArgs() }
	public final boolean isRuleMethod() { vn().isRuleMethod() }
	public final boolean isNeedFieldInits() { vn().isNeedFieldInits() }
	public final boolean isInvariantMethod() { vn().isInvariantMethod() }
	public final boolean isInlinedByDispatcherMethod() { vn().isInlinedByDispatcherMethod() }

	public boolean isConstructor() {
		return this.vn() instanceof Constructor;
	}

	public JVar getOuterThisParam() { return (JVar) this.vn().getOuterThisParam(); }
	public JVar getClassTypeInfoParam() { return (JVar) this.vn().getClassTypeInfoParam(); }
	public JVar getVarArgParam() { return (JVar) this.vn().getVarArgParam(); }

	public JLabel getBrkLabel() {
		return block.getBrkLabel();
	}

	public void generate(JEnv jenv, ConstPool constPool) {
		if (Kiev.debug && (Kiev.debugStatGen || Kiev.debugInstrGen)) System.out.println("\tgenerating Method "+this);
		foreach(JWBCCondition cond; this.conditions; cond.cond != WBCType.CondInvariant)
			cond.generate(jenv,constPool,jenv.vtypes.tpVoid);
		if( !isAbstract() && body != null && !(body.vn() instanceof MetaValue)) {
			Code code = new Code(jenv,(JStruct)jctx_tdecl, this, constPool);
			code.generation = true;
			try {
				JVar thisPar = null;
				if (!isStatic()) {
					thisPar = (JVar)new LVar(vn().pos,Constants.nameThis,jctx_tdecl.getType(),Var.PARAM_THIS,ACC_FINAL|ACC_FORWARD|ACC_SYNTHETIC);
					code.addVar(thisPar);
				}
				code.addVars(params);
				if( !isBad() && !isMacro() ) {
					if( Kiev.verify )
						generateArgumentCheck(code);
					if( Kiev.debugOutputC ) {
						foreach(JWBCCondition cond; this.conditions)
							cond.generateEntryCall(jenv, code, isConstructor());
					}
					body.generate(code,code.tenv.tpVoid);
					if( Kiev.debugOutputC && code.need_to_gen_post_cond ) {
						if( mtype.ret() ≢ code.tenv.tpVoid ) {
							code.addVar(getRetVar());
							code.addInstr(Instr.op_store,getRetVar());
						}
						foreach(JWBCCondition cond; this.conditions)
							cond.generateLeaveCall(jenv, code);
						if( mtype.ret() ≢ code.tenv.tpVoid ) {
							code.addInstr(Instr.op_load,getRetVar());
							code.addInstr(Instr.op_return);
							code.removeVar(getRetVar());
						} else {
							code.addInstr(Instr.op_return);
						}
					}
				} else {
					code.addInstr(Instr.op_new,code.tenv.tpError);
					code.addInstr(Instr.op_dup);
					String msg;
					if (isMacro())
						msg = "Macro method invocation";
					else
						msg = "Compiled with errors";
					constPool.addStringCP(msg);
					code.addConst(msg);
					JMethod func = jenv.getJTypeEnv().getJType(code.tenv.tpError).getJStruct().resolveMethod(jenv,null,"(Ljava/lang/String;)V");
					code.addInstr(Instr.op_call,func,true);
					code.addInstr(Instr.op_throw);
				}
				code.removeVars(params);
				if( thisPar != null ) code.removeVar(thisPar);
				code.generateCode();
				ENode bl = vn().body;
				if (bl != null) {
					final (AHandleData,ANode)->boolean predicate = fun (AHandleData nh, ANode node)->boolean {
						return  nh instanceof JNode ||
								nh instanceof DataFlowInfo && nh.node_impl == node;
					};
					bl.walkTree(new TreeWalker() {
						public boolean pre_exec(ANode n) {
							n.handle().cleanupIf(predicate, n);
							//foreach (AHandleData nh; n.handle().getHandleData()) {
							//	if (nh instanceof DataFlowInfo && nh.node_impl == n)
							//		n.handle().delData(nh);
							//	else if (nh instanceof JNode)
							//		n.handle().delData(nh);
							//}
							return true;
						}
					});
				}
			} catch(Exception e) {
				Kiev.reportError(this.vn(),e);
			}
		}
		MetaThrows throwns = getMetaThrows();
        if( throwns != null ) {
			ASTNode[] mthrs = throwns.getThrowns();
        	String[] thrs = new String[mthrs.length];
			for (int i=0; i < mthrs.length; i++)
				thrs[i] = jenv.getJTypeEnv().getJType(mthrs[i].getType(jenv.env)).java_signature;
        	ExceptionsAttr athr = new ExceptionsAttr();
        	athr.exceptions = thrs;
			this.addAttr(athr);
        }
	}

	public void generateArgumentCheck(Code code) {
		for(int i=0; i < params.length; i++) {
			Type tp1 = etype.arg(i);
			Type tp2 = params[i].vtype;
			if !(tp2.getErasedType().isInstanceOf(tp1)) {
				code.addInstr(Instr.op_load,params[i]);
				code.addInstr(Instr.op_checkcast,tp1);
				code.addInstr(Instr.op_store,params[i]);
			}
		}
	}
}

public class JInitializer extends JDNode {

	public static JInitializer attachJInitializer(Initializer impl)
		operator "new T"
		operator "( T ) V"
	{
		if (impl == null)
			return null;
		JNode jn = getJData(impl);
		if (jn != null)
			return (JInitializer)jn;
		return new JInitializer(impl);
	}

	protected JInitializer(Initializer impl) {
		super(impl);
	}

	public void backendCleanup() {
		jattrs = Attr.emptyArray;
	}

	public void generate(Code code, Type reqType) {
		trace(Kiev.debug && Kiev.debugStatGen,"\tgenerating Initializer");
		code.setLinePos(this);
		JENode body = (JENode)((Initializer)this.vn()).body;
		body.generate(code,reqType);
	}
}

public class JWBCCondition extends JDNode {

	@virtual typedef VT  ≤ WBCCondition;

	public static final JWBCCondition[] emptyArray = new JWBCCondition[0];

	public WBCType			cond;
	public Symbol				definer;
	public CodeAttr				codeAttr;

	public static JWBCCondition attachJWBCCondition(WBCCondition impl)
		operator "new T"
		operator "( T ) V"
	{
		if (impl == null)
			return null;
		JNode jn = getJData(impl);
		if (jn != null)
			return (JWBCCondition)jn;
		switch (impl.cond) {
		case WBCType.CondUnknown:   return new JWBCConditionUnknown(impl);
		case WBCType.CondInvariant: return new JWBCConditionInvariant(impl);
		case WBCType.CondRequire:   return new JWBCConditionRequire(impl);
		case WBCType.CondEnsure:    return new JWBCConditionEnsure(impl);
		}
	}

	protected JWBCCondition(WBCCondition impl) {
		super(impl);
		cond = impl.cond;
		definer = impl.definer.symbol;
	}

	public void backendCleanup() {
		jattrs = Attr.emptyArray;
	}

	public JMethod getImplMethod() { return null; }

	public CodeAttr getCodeAttr() { return codeAttr; }
	public void setCodeAttr(CodeAttr ca) { codeAttr = ca; }

	public void generateEntryCall(JEnv jenv, Code code, boolean for_constructor) {
	}

	public void generateLeaveCall(JEnv jenv, Code code) {
	}

	public void generate(JEnv jenv, ConstPool constPool, Type reqType) {
		Code code = new Code(jenv,(JStruct)jctx_tdecl, jctx_method, constPool);
		code.generation = true;
		code.cond_generation = true;
		JENode body = (JENode)vn().body;
		if( cond == WBCType.CondInvariant ) {
			body.generate(code,code.tenv.tpVoid);
			code.addInstr(Instr.op_return);
			return;
		}
		CodeAttr code_attr = getCodeAttr();
		if( code_attr == null ) {
			JMethod m = code.method;
			try {
				JVar thisPar = null;
				if( !isStatic() ) {
					thisPar = (JVar)new LVar(m.vn().pos,Constants.nameThis,jctx_tdecl.getType(),Var.PARAM_THIS,ACC_FINAL|ACC_FORWARD|ACC_SYNTHETIC);
					code.addVar(thisPar);
				}
				code.addVars(m.params);
				if( cond==WBCType.CondEnsure && m.mtype.ret() ≢ code.tenv.tpVoid ) code.addVar(m.getRetVar());
				body.generate(code,code.tenv.tpVoid);
				if( cond==WBCType.CondEnsure && m.mtype.ret() ≢ code.tenv.tpVoid ) code.removeVar(m.getRetVar());
				code.removeVars(m.params);
				if( thisPar != null ) code.removeVar(thisPar);
				code.generateCode(this);
			} catch(Exception e) {
				Kiev.reportError(this.vn(),e);
			}
			return;
		}
		code_attr.generate(constPool);
	}
}

public class JWBCConditionUnknown extends JWBCCondition {
	public JWBCConditionUnknown(WBCCondition impl) {
		super(impl);
	}
}

public class JWBCConditionRequire extends JWBCCondition {
	public JWBCConditionRequire(WBCCondition impl) {
		super(impl);
	}
	public void generateEntryCall(JEnv jenv, Code code, boolean for_constructor) {
		code.importCode(this.getCodeAttr());
	}
}

public class JWBCConditionEnsure extends JWBCCondition {
	public JWBCConditionEnsure(WBCCondition impl) {
		super(impl);
	}

	public void generateLeaveCall(JEnv jenv, Code code) {
		code.importCode(this.getCodeAttr());
	}

}

public class JWBCConditionInvariant extends JWBCCondition {
	JMethod impl_method;

	public JWBCConditionInvariant(WBCCondition impl) {
		super(impl);
		impl_method = (JMethod)(Method)impl.parent();
	}

	public void generateEntryCall(JEnv jenv, Code code, boolean for_constructor) {
		code.need_to_gen_post_cond = true;
		assert( impl_method.isInvariantMethod() );
		if( !for_constructor ) {
			if( !impl_method.isStatic() )
				code.addInstrLoadThis();
			code.addInstr(Instr.op_call,impl_method,false);
		}
	}

	public void generateLeaveCall(JEnv jenv, Code code) {
		if( !impl_method.isStatic() )
			code.addInstrLoadThis();
		code.addInstr(Instr.op_call,impl_method,false);
	}

}



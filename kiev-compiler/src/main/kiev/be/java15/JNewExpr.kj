/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.be.java15;
import syntax kiev.Syntax;

import kiev.ir.java15.RNode;
import static kiev.be.java15.Instr.*;

public final class JNewExpr extends JENode {

	@virtual typedef VT  ≤ NewExpr;

	public final JMethod func;

	public static JNewExpr attach(NewExpr impl)
		operator "new T"
		operator "( T ) V"
	{
		if (impl == null)
			return null;
		JNode jn = getJData(impl);
		if (jn != null)
			return (JNewExpr)jn;
		return new JNewExpr(impl);
	}

	protected JNewExpr(NewExpr impl) {
		super(impl);
		this.func = (JMethod)impl.func;
	}

	public void generate(Code code, Type reqType) {
		trace(Kiev.debug && Kiev.debugStatGen,"\t\tgenerating NewExpr: "+this);
		Type ntype = this.getType();
		code.setLinePos(this);
		NewExpr vn = vn();
		JENode outer = (JENode)vn.outer;
		JENode tpinfo = (JENode)vn.tpinfo;
		JENode[] args = JNode.toJArray<JENode>(vn.args);
		while( ntype instanceof ArgType && !ntype.isUnerasable())
			ntype = ntype.getErasedType();
		if( ntype instanceof ArgType ) {
			if( outer != null || args.length > 0 ) {
				Kiev.reportError(vn,"Constructor with arguments for type argument is not supported");
				return;
			} else {
				// If we have primitive type
				if( !ntype.isReference() ) {
					((JENode)new ConstNullExpr()).generate(code,ntype);
					return;
				}
				int i;
				for(i=0; i < ((Struct)code.clazz).args.length; i++)
					if (ntype ≈ ((Struct)code.clazz).args[i].getAType(code.env)) break;
				if( i >= ((Struct)code.clazz).args.length )
					throw new CompilerException(vn,"Can't create an instance of argument type "+ntype);
				long pos = vn.pos;
				ENode tie = new IFldExpr(pos,new ThisExpr(pos),((Struct)code.clazz).resolveField(code.env,nameTypeInfo));
				ENode e = new CastExpr(pos,ntype,
					new CallExpr(pos,tie,
						code.tenv.tpTypeInfo.tdecl.resolveMethod(code.env,"newInstance",code.tenv.tpObject,code.tenv.tpInt),
						new ENode[]{new ConstIntExpr(i)}
					)
				);
				RNode.resolveENode(e,reqType,code.env);
				((JENode)e).generate(code,reqType);
				return;
			}
		}
		code.addInstr(op_new,ntype);
		// First arg ('this' pointer) is generated by 'op_dup'
		if (reqType ≢ code.tenv.tpVoid)
			code.addInstr(op_dup);
		// Generate outer instance argument for this constructor call
		if( outer != null )
			outer.generate(code,null);
		// Generate typeinfo argument for this constructor call
		if (tpinfo != null)
			tpinfo.generate(code,null);
		// Constructor call args (first args 'this' skipped)
		int i=0;
		if !(func.isVarArgs()) {
			for(; i < args.length; i++)
				args[i].generate(code,null);
		} else {
			int N = func.params.length-1;
			for(; i < N; i++)
				args[i].generate(code,null);
			Type tn = func.params[N].vtype;
			Type varg_tp = tn.resolveArg(0);
			if (args.length == func.params.length && args[N].getType().isInstanceOf(new ArrayType(varg_tp))) {
				// array as va_arg
				args[i].generate(code,null);
			} else {
				code.addConst(args.length-N);
				code.addInstr(Instr.op_newarray,varg_tp);
				for(int j=0; i < args.length; i++, j++) {
					code.addInstr(Instr.op_dup);
					code.addConst(j);
					args[i].generate(code,null);
					code.addInstr(Instr.op_arr_store);
				}
			}
		}
		if (ntype.getStruct() != null) {
			JStruct cl = (JStruct)ntype.getStruct();
			foreach (JField f; cl.members) {
				if( !f.isNeedProxy() ) continue;
				JVar v = ((JLVarExpr)f.init).var;
				code.addInstr(Instr.op_load,v);
			}
		}
		code.addInstr(op_call,func,true,ntype);
	}
}

public final class JNewEnumExpr extends JENode {

	@virtual typedef VT  ≤ NewEnumExpr;

	public final JMethod func;

	public static JNewEnumExpr attach(NewEnumExpr impl)
		operator "new T"
		operator "( T ) V"
	{
		if (impl == null)
			return null;
		JNode jn = getJData(impl);
		if (jn != null)
			return (JNewEnumExpr)jn;
		return new JNewEnumExpr(impl);
	}

	protected JNewEnumExpr(NewEnumExpr impl) {
		super(impl);
		this.func = (JMethod)impl.func;
	}

	public void generate(Code code, Type reqType) {
		trace(Kiev.debug && Kiev.debugStatGen,"\t\tgenerating NewEnumExpr: "+this);
		Type ntype = this.getType();
		code.setLinePos(this);
		NewEnumExpr vn = vn();
		JENode[] args = JNode.toJArray<JENode>(vn.args);
		code.addInstr(op_new,ntype);
		// First arg ('this' pointer) is generated by 'op_dup'
		if (reqType ≢ code.tenv.tpVoid)
			code.addInstr(op_dup);
		JAssignExpr assign = (JAssignExpr)jparent;
		Field f = ((SFldExpr)assign.vn().lval).var;
		int idx = ((JavaEnum)this.jctx_tdecl.vn()).getIndexOfEnumField(f);
		// Generate field name constant
		code.addConst(f.sname);
		// Generate field index
		code.addConst(idx);
		// Constructor call args
		for(int i=0; i < args.length; i++)
			args[i].generate(code,null);
		code.addInstr(op_call,func,true,ntype);
	}
}


public final class JNewArrayExpr extends JENode {

	@virtual typedef VT  ≤ NewArrayExpr;

	public final Type ntype;
	public final Type arrtype;

	public static JNewArrayExpr attach(NewArrayExpr impl)
		operator "new T"
		operator "( T ) V"
	{
		if (impl == null)
			return null;
		JNode jn = getJData(impl);
		if (jn != null)
			return (JNewArrayExpr)jn;
		return new JNewArrayExpr(impl);
	}

	protected JNewArrayExpr(NewArrayExpr impl) {
		super(impl);
		this.ntype = impl.ntype.getType(Env.getEnv());
		this.arrtype = impl.arrtype;
	}

	public void generate(Code code, Type reqType) {
		trace(Kiev.debug && Kiev.debugStatGen,"\t\tgenerating NewArrayExpr: "+this);
		code.setLinePos(this);
		NewArrayExpr vn = vn();
		JENode[] args = JNode.toJArray<JENode>(vn.args);
		if( args.length == 1 ) {
			args[0].generate(code,null);
			code.addInstr(Instr.op_newarray,ntype);
		} else {
			int n = 0;
			for(int i=0; i < args.length; i++) {
				JENode arg = args[i];
				if !(arg.vn() instanceof NopExpr) {
					arg.generate(code,null);
					n++;
				}
			}
			code.addInstr(Instr.op_multianewarray,arrtype,n);
		}
		if( reqType ≡ code.tenv.tpVoid ) code.addInstr(Instr.op_pop);
	}

}

public final class JNewInitializedArrayExpr extends JENode {

	@virtual typedef VT  ≤ NewInitializedArrayExpr;

	public final Type ntype;

	public static JNewInitializedArrayExpr attach(NewInitializedArrayExpr impl)
		operator "new T"
		operator "( T ) V"
	{
		if (impl == null)
			return null;
		JNode jn = getJData(impl);
		if (jn != null)
			return (JNewInitializedArrayExpr)jn;
		return new JNewInitializedArrayExpr(impl);
	}

	protected JNewInitializedArrayExpr(NewInitializedArrayExpr impl) {
		super(impl);
		this.ntype = impl.ntype.getType(Env.getEnv());
	}

	public void generate(Code code, Type reqType) {
		trace(Kiev.debug && Kiev.debugStatGen,"\t\tgenerating NewInitializedArrayExpr: "+this);
		code.setLinePos(this);
		NewInitializedArrayExpr vn = vn();
		JENode[] args = JNode.toJArray<JENode>(vn.args);
		Type ntype = ((ArrayType)this.ntype).arg;
		code.addConst(args.length);
		code.addInstr(Instr.op_newarray,ntype);
		for(int i=0; i < args.length; i++) {
			code.addInstr(Instr.op_dup);
			code.addConst(i);
			args[i].generate(code,null);
			code.addInstr(Instr.op_arr_store);
		}
		if( reqType ≡ code.tenv.tpVoid ) code.addInstr(op_pop);
	}
}

public final class JNewClosure extends JENode {

	@virtual typedef VT  ≤ NewClosure;

	public final JStruct clazz;

	public static JNewClosure attach(NewClosure impl)
		operator "new T"
		operator "( T ) V"
	{
		if (impl == null)
			return null;
		JNode jn = getJData(impl);
		if (jn != null)
			return (JNewClosure)jn;
		return new JNewClosure(impl);
	}

	protected JNewClosure(NewClosure impl) {
		super(impl);
		this.clazz = (JStruct)impl.clazz;
	}

	@getter public final CallType getCallType(Env env)	{
		return (CallType) vn().getType(env);
	}

	public void generate(Code code, Type reqType) {
		trace(Kiev.debug && Kiev.debugStatGen,"\t\tgenerating NewClosure: "+this);
		CallType ctype = this.getCallType(code.env);
		code.setLinePos(this);
		JStruct cl = clazz;
		code.addInstr(op_new,clazz.getType());
		// First arg ('this' pointer) is generated by 'op_dup'
		if( reqType ≢ code.tenv.tpVoid )
			code.addInstr(op_dup);
		// Constructor call args (first args 'this' skipped)
		if( code.method!=null && !code.method.isStatic() )
			code.addInstrLoadThis();
		code.addConst(ctype.arity);
		// Now, fill proxyed fields (vars)
		foreach (JField f; cl.members) {
			if( !f.isNeedProxy() ) continue;
			JVar v = ((JLVarExpr)f.init).var;
			code.addInstr(Instr.op_load,v);
		}
		JMethod func = clazz.resolveMethod(code.jenv,null,"(I)V");
		code.addInstr(op_call,func,true);
	}
}


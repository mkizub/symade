/* Generated By:JavaCC: Do not edit this line. kiev050.java */
/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.parser;

/*{

import syntax kiev.Syntax;

import kiev.Kiev;
import java.io.Reader;

import static kiev.vlang.AccessFlags.*;

typedef SymbolRef<Field>		SymbolRefFld;

}*/

public final class Parser extends kiev050 {
        public Parser(Env env, char[] file_chars, int start, int length) {
                super(new JFlexToJavaCCAdapter(file_chars, start, length));
                this.curEnv = env;
        }
}

public interface ParserConstants extends kiev050Constants {
}

public abstract class kiev050 implements kiev050Constants {

        public Env                              curEnv;
        public FileUnit                 curFileUnit;
        public boolean                  interface_only = false;

        public boolean                  declMode = true;

        /** Report Parser Error (Exception) */
        private void rpe(String msg, ParseError e) {
                int pos;
                if( token==null ) pos = 0;
                else if( token.next==null ) pos = (int)token.getPos();
                else pos = (int)token.next.getPos();
                if( kiev.Kiev.debug ) {
                        kiev.Kiev.reportParserError(curFileUnit, pos, msg, e);
                } else {
                        kiev.Kiev.reportParserError(curFileUnit, pos, msg);
                }
        }

    /** Report other Error (Exception) */
        private void rperr(Throwable e) throws Throwable {
                int pos;
                if( token==null ) pos = 0;
                else if( token.next==null ) pos = (int)token.getPos();
                else pos = (int)token.next.getPos();
                if( kiev.Kiev.debug ) {
                        kiev.Kiev.reportParserError(curFileUnit, pos, "Internal parser error:\n"+e, e);
                } else {
                        kiev.Kiev.reportParserError(curFileUnit, pos, "Internal parser error: "+e.getMessage());
                }
                throw e;
        }

        private boolean operatorLA() {
                Token t0 = getToken(0);
                Token t1 = getToken(1);
                if (t1.specialToken != null)
                        return false;
                switch (t1.kind) {
                case OP_ARROW:
                case OP_LT:
                case OP_GT:
                case OP_ASSIGN:
                case OP_AT:
                case OP_SHARP:
                case OP_UPPER_BOUND:
                case OP_LOWER_BOUND:
                case OPERATOR:
                        return true;
                }
                return false;
        }

        private boolean ExpressionNoNoLA() {
                switch (getToken(1).kind) {
                case OP_RPAREN:
                case OP_RBRACE:
                case OP_RBRACKET:
                case OP_SEMICOLON:
                case OP_COLON:
                case OP_COMMA:
                        return false;
                }
                return true;
        }

        /*{
	private Struct mkStruct(Symbol name, Struct variant, int flags, ASTModifiers modifiers, ASTNode parent) {
		String uuid = modifiers == null ? null : modifiers.getUUID();
		Struct clazz;
		if (parent instanceof SyntaxScope) {
			clazz = curEnv.newStruct(name.sname,parent.getPackage(),flags,variant,uuid);
		}
		else if (parent instanceof Struct) {
			clazz = curEnv.newStruct(name.sname,(Struct)parent,flags,variant,uuid);
		}
		else if (name != null) {
			clazz = curEnv.newStruct(name.sname,null,flags,variant,uuid);
		}
		else {
			clazz = curEnv.newStruct(null,null,flags,variant,uuid);
		}
		if (name != null)
			clazz.pos  = name.pos;
		else
			clazz.pos  = parent.pos;
		clazz.setTypeDeclNotLoaded(false);
		modifiers.moveToNode(clazz);
		
		return clazz;
	}

	private TypeAssign mkTypeAssign(long pos, String name, ASTModifiers modifiers, DNode parent) {
		Symbol sym = null;
		String uuid = modifiers == null ? null : modifiers.getUUID();
		if (uuid != null)
			sym = curEnv.getSymbolByUUID(uuid);
		if (sym == null && parent instanceof TypeDecl) {
			if (parent.symbol.isGlobalSymbol())
				sym = parent.symbol.makeGlobalSubSymbol(name);
		}
		if (sym == null)
			sym = new Symbol(name);
		TypeAssign arg = new TypeAssign(sym);
		arg.pos = pos;
		if (modifiers != null)
			modifiers.moveToNode(arg);
		return arg;
	}

	private TypeConstr mkTypeConstr(long pos, String name, ASTModifiers modifiers, DNode parent) {
		Symbol sym = null;
		String uuid = modifiers == null ? null : modifiers.getUUID();
		if (uuid != null)
			sym = curEnv.getSymbolByUUID(uuid);
		if (sym == null && parent instanceof TypeDecl) {
			if (parent.symbol.isGlobalSymbol())
				sym = parent.symbol.makeGlobalSubSymbol(name);
		}
		if (sym == null)
			sym = new Symbol(name);
		TypeConstr arg = new TypeConstr(sym);
		arg.pos = pos;
		if (modifiers != null)
			modifiers.moveToNode(arg);
		return arg;
	}

	private Constructor mkConstructor(Symbol id, ASTModifiers modifiers) {
		Constructor meth = new Constructor(0);
		meth.pos = id.pos;
		modifiers.moveToNode(meth);
		return meth;
	}
	
	private Method mkMethod(Symbol id, ASTModifiers modifiers, TypeRef ret) {
		Method meth;
		if (modifiers.isGetter()) {
			meth = new MethodGetter();
			meth.sname = id.sname;
			meth.type_ret = ret;
		}
		else if (modifiers.isSetter()) {
			meth = new MethodSetter();
			meth.sname = id.sname;
			meth.type_ret = ret;
		}
		else {
			meth = new MethodImpl(id.sname, ret, 0);
		}
		meth.pos = id.pos;
		modifiers.moveToNode(meth);
		return meth;
	}
	
	private RuleMethod mkRuleMethod(Symbol id, ASTModifiers modifiers, TypeRef ret) {
		RuleMethod meth = new RuleMethod(id.sname, 0);
		meth.pos = id.pos;
		modifiers.moveToNode(meth);
		return meth;
	}
	
	private Field mkField(Symbol id, ASTModifiers modifiers, TypeRef tp, ENode init) {
		if (tp == null)
			tp = new TypeDeclRef();
		Field f = new Field(id.sname, tp, 0);
		f.pos = id.pos;
		modifiers.copyToNode(f);
		f.init = init;
		return f;
	}

	private Field mkEnumField(Symbol id, ASTModifiers modifiers) {
		Field f = new Field(id.sname,new TypeDeclRef(),0);
		f.mflags_is_enum = true;
		f.pos = id.pos;
		modifiers.moveToNode(f);
		f.setPublic();
		f.setStatic(true);
		f.setFinal(true);
		return f;
	}

	private Field mkCaseField(Symbol id, ASTModifiers modifiers, TypeRef tp) {
		Field f = new Field(id.sname,tp,0|ACC_PUBLIC);
		f.pos = id.pos;
		modifiers.moveToNode(f);
		return f;
	}
	
	private LVar mkVar(Symbol id, ASTModifiers modifiers, TypeRef tp) {
		if (tp == null)
			tp = new TypeDeclRef();
		LVar v = new LVar(id.pos, id.sname, tp, Var.VAR_LOCAL, 0);
		modifiers.copyToNode(v);
		return v;
	}
	
	private LVar mkRuleVar(Symbol id, ASTModifiers modifiers, TypeRef tp, boolean first) {
		if (!first)
			tp = new Copier().copyFull(tp);
		LVar v = new LVar(id.pos, id.sname, tp, Var.VAR_LOCAL, 0);
		modifiers.copyToNode(v);
		return v;
	}
	
	private LVar mkFormPar(Symbol id, ASTModifiers modifiers, TypeRef vt, TypeRef st) {
		LVar v = new LVar(id.pos, id.sname, vt, LVar.VAR_LOCAL, 0);
		if (st != null)
			v.stype = st;
		modifiers.moveToNode(v);
		return v;
	}
	
	private LVar mkVarargPar(Symbol id, ASTModifiers modifiers, TypeRef vt) {
		LVar v = new LVar(id.pos, id.sname, vt, LVar.VAR_LOCAL, ACC_FINAL);
		modifiers.moveToNode(v);
		return v;
	}
	
	private	Initializer mkInitializer(long pos, ASTModifiers modifiers) {
		Initializer init = new Initializer();
		init.pos = pos;
		modifiers.moveToNode(init);
		return init;
	}

	
	private ENode mkNotExpr(EToken not, ENode cond) {
		cond.setPrimaryExpr(true);
		ASTExpression e = new ASTExpression();
		e.pos = cond.pos;
		e.nodes.append(not);
		e.nodes.append(~cond);
		return e;
	}
	
	private void expandExpr(ASTExpression e, ENode n) {
		if (n instanceof ASTExpression) {
			foreach (ANode x; n.nodes.delToArray())
				e.nodes += x;
		} else {
			e.nodes += n;
		}
	}

	static ConstExpr sourceToConst(Token t) throws ParseException {
		ConstExpr ce = null;
		try
		{
			switch(t.kind) {
			case ParserConstants.INTEGER_LITERAL:
			{
				String image;
				int radix;
				if( t.image.startsWith("0x") || t.image.startsWith("0X") ) { image = t.image.substring(2); radix = 16; }
				else if( t.image.startsWith("0") && t.image.length() > 1 ) { image = t.image.substring(1); radix = 8; }
				else { image = t.image; radix = 10; }
				long i = ConstExpr.parseLong(image,radix);
				ce = new ConstIntExpr((int)i);
				switch (radix) {
				case 16: ce.radix = IntRadix.RADIX_HEX; break;
				case  8: ce.radix = IntRadix.RADIX_OCT; break;
				default: ce.radix = IntRadix.RADIX_DEC; break;
				}
				break;
			}
			case ParserConstants.LONG_INTEGER_LITERAL:
			{
				String image;
				int radix;
				if( t.image.startsWith("0x") || t.image.startsWith("0X") ) { image = t.image.substring(2,t.image.length()-1); radix = 16; }
				else if( t.image.startsWith("0") && !t.image.equals("0") && !t.image.equals("0L") ) { image = t.image.substring(1,t.image.length()-1); radix = 8; }
				else { image = t.image.substring(0,t.image.length()-1); radix = 10; }
				long l = ConstExpr.parseLong(image,radix);
				ce = new ConstLongExpr(l);
				switch (radix) {
				case 16: ce.radix = IntRadix.RADIX_HEX; break;
				case  8: ce.radix = IntRadix.RADIX_OCT; break;
				default: ce.radix = IntRadix.RADIX_DEC; break;
				}
				break;
			}
			case ParserConstants.FLOATING_POINT_LITERAL:
			{
				String image;
				if( t.image.endsWith("f") || t.image.endsWith("F") ) image = t.image.substring(0,t.image.length()-1);
				else image = t.image;
				float f = Float.valueOf(image).floatValue();
				ce = new ConstFloatExpr(f);
				break;
			}
			case ParserConstants.DOUBLE_POINT_LITERAL:
			{
				String image;
				if( t.image.endsWith("d") || t.image.endsWith("D") ) image = t.image.substring(0,t.image.length()-1);
				else image = t.image;
				double d = Double.valueOf(t.image).doubleValue();
				ce = new ConstDoubleExpr(d);
				break;
			}
			case ParserConstants.CHARACTER_LITERAL:
			{
				char c;
				if( t.image.length() == 3 )
					c = t.image.charAt(1);
				else
					c = ConstExpr.source2ascii(t.image.substring(1,t.image.length()-1)).charAt(0);
				ce = new ConstCharExpr(c);
				break;
			}
			case ParserConstants.STRING_LITERAL:
				ce = new ConstStringExpr(ConstExpr.source2ascii(t.image.substring(1,t.image.length()-1)));
				break;
			//case ParserConstants.TRUE:
			//	ce = new ConstBoolExpr(true);
			//	break;
			//case ParserConstants.FALSE:
			//	ce = new ConstBoolExpr(false);
			//	break;
			//case ParserConstants.NULL:
			//	ce = new ConstNullExpr();
			//	break;
			}
		} catch( NumberFormatException e ) {
			throw new ParseException(t.image);
		}
		if (ce == null) {
			Kiev.reportParserError(null, (int)t.getPos(), "Unknown term "+t.image);
			ce = new ConstNullExpr();
		}
		ce.pos = t.getPos();
		return ce;
	}

	private TypeRef makeTypeExpr(TypeRef arg, Token op) {
		if (op.kind == ParserConstants.OP_SHARP)
			return new TypeASTNodeRef(arg.ident, null);
		TypeExpr te = new TypeExpr();
		te.arg = arg;
		if (op.kind == ParserConstants.OP_LRBRACKETS) {
			te.op_name = "T []";
		} else {
			te.op_name = ("T "+op.image).intern();
		}
		te.pos = op.getPos();
		return te;
	}
	

	}*/

        void comments_alone(SpacePtr arr) {
                Comment[] comments = get_comments();
                if (comments == null || comments.length == 0)
                        return;
                for (int i=0; i < comments.length; i++)
                        arr += comments[i];
        }
        //void comments_before(ASTNode node) {
        //	Comment[] comments = get_comments();
        //	if (comments == null || comments.length == 0)
        //		return;
        //	for (int i=0; i < comments.length; i++)
        //		Comment.ATTR_COMMENT.add(node, comments[i]);
        //}

        Comment[] get_comments() {
                Token t0 = getToken(0);
                Token t1 = getToken(1);
                Token st = t1.specialToken;
                if (st == null)
                        return null;
                Comment[] comments = new Comment[0];
                t1.specialToken = null;
                while (st.specialToken != null)
                        st = st.specialToken;
                for (; st != null; st = st.next) {
                        if (st.kind == SINGLE_LINE_COMMENT) {
                                String text = st.image.substring(2);
                                text = text.trim();
                                if (comments.length > 0 && (comments[comments.length-1].mode == CommentMode.LINE || comments[comments.length-1].mode == CommentMode.EOLINE)) {
                                        Comment c = comments[comments.length-1];
                                        c.elems.append(new TextLine(text));
                                } else {
                                        Comment c = new Comment();
                                        c.mode = CommentMode.EOLINE;
                                        c.elems.append(new TextLine(text));
                                        if (st.specialToken != null) {
                                                if (st.beginLine > st.specialToken.endLine)
                                                        c.mode = CommentMode.LINE;
                                        } else {
                                                if (st.beginLine < t0.endLine)
                                                        c.mode = CommentMode.LINE;
                                        }
                                        comments = (Comment[])Arrays.append(comments, c);
                                }
                        }
                        else if (st.kind == FORMAL_COMMENT || st.kind == MULTI_LINE_COMMENT) {
                                String text = (st.kind == FORMAL_COMMENT) ?
                                                st.image.substring(3, st.image.length()-5)
                                        :       st.image.substring(2, st.image.length()-4);
                                String[] lines = text.trim().split("\n");
                                for (int i=0; i < lines.length; i++) {
                                        String l = lines[i].trim();
                                        if (l.length() >= 1 && l.charAt(0) == '*') {
                                                l = l.substring(1);
                                                l = l.trim();
                                        }
                                        lines[i] = l;
                                }
                                boolean nl = false;
                                Comment c = new Comment();
                                for (int i=0; i < lines.length; i++)
                                        c.elems.append(new TextLine(lines[i].trim()));

                                if (st.specialToken != null) {
                                        if (st.beginLine > st.specialToken.endLine)
                                                nl = true;
                                } else {
                                        if (st.beginLine < t0.endLine)
                                                nl = true;
                                }

                                if (st.next != null) {
                                        if (st.endLine < st.next.beginLine)
                                                nl = true;
                                } else {
                                        if (st.endLine < t1.beginLine)
                                                nl = true;
                                }
                                if (st.kind == FORMAL_COMMENT)
                                        c.mode = CommentMode.DOCUMENTATION;
                                else if (nl)
                                        c.mode = CommentMode.FLOW;
                                else
                                        c.mode = CommentMode.INLINE;
                                comments = (Comment[])Arrays.append(comments, c);
                        }
                }
                return comments;
        }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public FileUnit FileUnit(String filename) throws ParseException {
  FileUnit oldFileUnit; SymbolRef pkg;
                oldFileUnit = curFileUnit;
                FileUnit fu = FileUnit.makeFile(filename, curEnv.proj, false);
                curFileUnit = fu;
                declMode = true;
                ASTModifiers modifiers;
    try {
      label_1:
      while (true) {
        if (jj_2_1(1)) {
          ;
        } else {
          break label_1;
        }
        if (getToken(1).kind==KW_IMPORT && getToken(2).kind==IDENTIFIER && getToken(2).image.equals("syntax")) {
          fu.syntaxes += ImportSyntax();
        } else {
          switch (jj_nt.kind) {
          case KW_PACKAGE:
            pkg = Package();
                                if (fu.srpkg.name == null) {
                                        fu.srpkg.symbol = pkg.symbol;
                                        fu.srpkg.pos = pkg.pos;
                                } else
                                        Kiev.reportError(pkg,"Duplicate package declaration "+pkg);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      TopLevelDeclarations(fu);
                  fu.line_count = getToken(0).endLine;
      jj_consume_token(0);
    } catch (ParseError e) {
                              rpe("Bad declaration",e);
    } catch (Throwable e) {
                             rperr(e);
    } finally {
                curFileUnit = oldFileUnit;
                declMode = true;
                {if (true) return fu;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NameSpace NameSpaceDeclaration(ASTModifiers modifiers, SyntaxScope parent) throws ParseException {
  NameSpace ns = new NameSpace(); SymbolRef sr;
          declMode = true;
    try {
      if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("namespace")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      if (parent.getPackage() instanceof KievRoot) {
        sr = QName();
                                                  ns.srpkg.name = sr.name; ns.srpkg.pos = sr.pos;
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
        case ESC_IDENTIFIER:
        case HID_IDENTIFIER:
          sr = NameRef();
                                                  ns.srpkg.name = sr.name; ns.srpkg.pos = sr.pos;
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                  parent.members += ns;
      jj_consume_token(OP_LBRACE);
      TopLevelDeclarations(ns);
      jj_consume_token(OP_RBRACE);
    } catch (ParseError e) {
                              rpe("Bad declaration",e);
    } catch (Throwable e) {
                             rperr(e);
    } finally {
                declMode = true;
                {if (true) return ns;}
    }
    throw new Error("Missing return statement in function");
  }

  final public void TopLevelDeclarations(SyntaxScope ss) throws ParseException {
  ASTModifiers modifiers; SpacePtr ss_members = Env.getSpacePtr(ss, "members");
    label_2:
    while (true) {
      if (getToken(1).kind != OP_RBRACE && getToken(1).kind != EOF) {
        ;
      } else {
        break label_2;
      }
                  comments_alone(ss_members);
      modifiers = Modifiers();
      switch (jj_nt.kind) {
      case KW_IMPORT:
        ss.members += Import(modifiers);
        break;
      case KW_TYPE:
      case KW_TYPEDEF:
        ss.members += Typedef(modifiers);
        break;
      default:
        if (jj_2_2(1)) {
          ss.members += TypeDeclaration(modifiers, ss);
          switch (jj_nt.kind) {
          case OP_SEMICOLON:
            jj_consume_token(OP_SEMICOLON);
            break;
          default:
            ;
          }
        } else if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("namespace")) {
          NameSpaceDeclaration(modifiers, ss);
          switch (jj_nt.kind) {
          case OP_SEMICOLON:
            jj_consume_token(OP_SEMICOLON);
            break;
          default:
            ;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          comments_alone(ss_members);
  }

  final public ASTModifiers Modifiers() throws ParseException {
          ASTModifiers n = new ASTModifiers();
    label_3:
    while (true) {
      if (jj_2_3(1)) {
        ;
      } else {
        break label_3;
      }
      switch (jj_nt.kind) {
      case KW_ABSTRACT:
      case KW_FINAL:
      case KW_NATIVE:
      case KW_STATIC:
      case KW_SYNCHRONIZED:
      case KW_TRANSIENT:
      case KW_VOLATILE:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_GETTER:
      case META_SETTER:
        SpecialAnnotation(n);
        break;
      case META_ACCESS1:
      case META_PUBLIC:
      case KW_PUBLIC:
      case META_PROTECTED:
      case KW_PROTECTED:
      case META_PRIVATE:
      case KW_PRIVATE:
        Access(n);
        break;
      default:
        if (getToken(1).kind==OP_AT) {
          n += Annotation();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public void InBlockModifiersLA() throws ParseException {
    switch (jj_nt.kind) {
    case OP_AT:
      jj_consume_token(OP_AT);
      break;
    case META_ACCESS1:
      jj_consume_token(META_ACCESS1);
      break;
    case META_PUBLIC:
      jj_consume_token(META_PUBLIC);
      break;
    case META_PROTECTED:
      jj_consume_token(META_PROTECTED);
      break;
    case META_PRIVATE:
      jj_consume_token(META_PRIVATE);
      break;
    case META_SINGLETON:
      jj_consume_token(META_SINGLETON);
      break;
    case META_MIXIN:
      jj_consume_token(META_MIXIN);
      break;
    case META_FORWARD:
      jj_consume_token(META_FORWARD);
      break;
    case META_UNERASABLE:
      jj_consume_token(META_UNERASABLE);
      break;
    case META_VIRTUAL:
      jj_consume_token(META_VIRTUAL);
      break;
    case META_MACRO:
      jj_consume_token(META_MACRO);
      break;
    case KW_STATIC:
      jj_consume_token(KW_STATIC);
      break;
    case META_STATIC:
      jj_consume_token(META_STATIC);
      break;
    case KW_ABSTRACT:
      jj_consume_token(KW_ABSTRACT);
      break;
    case META_ABSTRACT:
      jj_consume_token(META_ABSTRACT);
      break;
    case KW_FINAL:
      jj_consume_token(KW_FINAL);
      break;
    case META_FINAL:
      jj_consume_token(META_FINAL);
      break;
    case META_NATIVE:
      jj_consume_token(META_NATIVE);
      break;
    case META_SYNCHRONIZED:
      jj_consume_token(META_SYNCHRONIZED);
      break;
    case META_TRANSIENT:
      jj_consume_token(META_TRANSIENT);
      break;
    case META_VOLATILE:
      jj_consume_token(META_VOLATILE);
      break;
    case META_PACKED:
      jj_consume_token(META_PACKED);
      break;
    case META_THROWS:
      jj_consume_token(META_THROWS);
      break;
    case META_UUID:
      jj_consume_token(META_UUID);
      break;
    case META_GETTER:
      jj_consume_token(META_GETTER);
      break;
    case META_SETTER:
      jj_consume_token(META_SETTER);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public SymbolRef Package() throws ParseException {
  SymbolRef qn;
    jj_consume_token(KW_PACKAGE);
    qn = QName();
    jj_consume_token(OP_SEMICOLON);
                qn.symbol = curEnv.newPackage(qn.name).symbol;
                {if (true) return qn;}
    throw new Error("Missing return statement in function");
  }

  final public ImportSyntax ImportSyntax() throws ParseException {
  SymbolRef qname;
    jj_consume_token(KW_IMPORT);
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    qname = QName();
    jj_consume_token(OP_SEMICOLON);
                ImportSyntax imp = new ImportSyntax();
                imp.name.name = qname.name;
                imp.name.qualified = true;
                imp.pos = qname.pos;
                {if (true) return imp;}
    throw new Error("Missing return statement in function");
  }

  final public Import Import(ASTModifiers modifiers) throws ParseException {
  Import imp = new ImportImpl(); SymbolRef name;
    jj_consume_token(KW_IMPORT);
    switch (jj_nt.kind) {
    case KW_STATIC:
      jj_consume_token(KW_STATIC);
                          imp = new ImportStatic();
      break;
    default:
      ;
    }
    name = QName();
                         imp.name.name = name.name; imp.name.pos = name.pos;
    if (jj_2_5(1)) {
      if (jj_2_4(2147483647) && (getToken(2).image.equals("*"))) {
        jj_consume_token(OP_DOT);
        jj_consume_token(OPERATOR);
                        if (imp instanceof ImportImpl)
                                imp.star = true;
                        else if (imp instanceof ImportStatic)
                                imp.star = true;
      } else {
        switch (jj_nt.kind) {
        case OP_LPAREN:
          jj_consume_token(OP_LPAREN);
                        ImportMethod im = new ImportMethod();
                        int p = imp.name.name.indexOf('\u00b7');
                        String nm;
                        String meth;
                        if (p < 0) {
                                nm = "";
                                meth = imp.name.name;
                        } else {
                                nm = imp.name.name.substring(0,p);
                                meth = imp.name.name.substring(0,p+1);
                        }
                        im.name.name = nm;
                        im.method.name = meth;
                        im.name.pos = imp.pos;
                        im.method.pos = getToken(0).getPos();
                        imp = im;
          switch (jj_nt.kind) {
          case OP_LPAREN:
          case IDENTIFIER:
          case ESC_IDENTIFIER:
          case HID_IDENTIFIER:
            im.args += Type();
            label_4:
            while (true) {
              switch (jj_nt.kind) {
              case OP_COMMA:
                ;
                break;
              default:
                break label_4;
              }
              jj_consume_token(OP_COMMA);
              im.args += Type();
            }
            break;
          default:
            ;
          }
          jj_consume_token(OP_RPAREN);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
    jj_consume_token(OP_SEMICOLON);
          {if (true) return imp;}
    throw new Error("Missing return statement in function");
  }

  final public TypeAssign Typedef(ASTModifiers modifiers) throws ParseException {
  Symbol id; TypeAssign ta; TypeRef tr; Token t; EToken et;
    switch (jj_nt.kind) {
    case KW_TYPEDEF:
      jj_consume_token(KW_TYPEDEF);
      break;
    case KW_TYPE:
      jj_consume_token(KW_TYPE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    tr = Type();
    id = Name();
          ta = mkTypeAssign(id.pos, id.sname, modifiers, null); ta.super_types += tr;
    jj_consume_token(OP_SEMICOLON);
          {if (true) return ta;}
    throw new Error("Missing return statement in function");
  }

  final public Struct TypeDeclaration(ASTModifiers modifiers, ASTNode parent) throws ParseException {
  Struct clazz; Symbol name; TypeConstr[] args;
    switch (jj_nt.kind) {
    case KW_CLASS:
      jj_consume_token(KW_CLASS);
      name = Name();
                        if (modifiers.isSymadeNode())
                                clazz = mkStruct(name, new SymadeNode(), 0, modifiers, parent);
                        else
                                clazz = mkStruct(name, new JavaClass(), 0, modifiers, parent);
      switch (jj_nt.kind) {
      case OP_LT:
      case LANGLE:
        args = ClazzArguments(clazz);
                                                       clazz.args.addAll(args);
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case KW_EXTENDS:
        jj_consume_token(KW_EXTENDS);
        clazz.super_types += Type();
        label_5:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:
            ;
            break;
          default:
            break label_5;
          }
          jj_consume_token(OP_COMMA);
          clazz.super_types += Type();
        }
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case KW_IMPLEMENTS:
        jj_consume_token(KW_IMPLEMENTS);
        clazz.super_types += Type();
        label_6:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:
            ;
            break;
          default:
            break label_6;
          }
          jj_consume_token(OP_COMMA);
          clazz.super_types += Type();
        }
        break;
      default:
        ;
      }
      break;
    case KW_INTERFACE:
      jj_consume_token(KW_INTERFACE);
      name = Name();
                        if (modifiers.isSymadeNode())
                                clazz = mkStruct(name, new SymadeNode(), ACC_INTERFACE, modifiers, parent);
                        else
                                clazz = mkStruct(name, new JavaClass(), ACC_INTERFACE, modifiers, parent);
      switch (jj_nt.kind) {
      case OP_LT:
      case LANGLE:
        args = ClazzArguments(clazz);
                                                       clazz.args.addAll(args);
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case KW_EXTENDS:
        jj_consume_token(KW_EXTENDS);
        clazz.super_types += Type();
        label_7:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:
            ;
            break;
          default:
            break label_7;
          }
          jj_consume_token(OP_COMMA);
          clazz.super_types += Type();
        }
        break;
      default:
        ;
      }
      break;
    case META_INTERFACE:
      jj_consume_token(META_INTERFACE);
      switch (jj_nt.kind) {
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:
        name = Name();
        break;
      case KW_THROWS:
      case KW_ALIAS:
        name = KeywordAsName();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                        clazz = mkStruct(name, new JavaAnnotation(), ACC_INTERFACE|ACC_ANNOTATION, modifiers, parent);
      break;
    case KW_ENUM:
      jj_consume_token(KW_ENUM);
      name = Name();
                        clazz = mkStruct(name, new JavaEnum(), ACC_ENUM|ACC_STATIC, modifiers, parent);
      break;
    default:
      if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("view")) {
        jj_consume_token(IDENTIFIER);
        // "view"
                        name = Name();
                        clazz = mkStruct(name, new KievView(), ACC_VIRTUAL, modifiers, parent);
                        KievView kview = (KievView)clazz;
        switch (jj_nt.kind) {
        case OP_LT:
        case LANGLE:
          args = ClazzArguments(clazz);
                                                       clazz.args.addAll(args);
          break;
        default:
          ;
        }
        if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("of")) {

        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(IDENTIFIER);
        // "of"
                        kview.view_of = NArrType();
        switch (jj_nt.kind) {
        case KW_EXTENDS:
          jj_consume_token(KW_EXTENDS);
          clazz.super_types += Type();
          label_8:
          while (true) {
            switch (jj_nt.kind) {
            case OP_COMMA:
              ;
              break;
            default:
              break label_8;
            }
            jj_consume_token(OP_COMMA);
            clazz.super_types += Type();
          }
          break;
        default:
          ;
        }
        switch (jj_nt.kind) {
        case KW_IMPLEMENTS:
          jj_consume_token(KW_IMPLEMENTS);
          clazz.super_types += Type();
          label_9:
          while (true) {
            switch (jj_nt.kind) {
            case OP_COMMA:
              ;
              break;
            default:
              break label_9;
            }
            jj_consume_token(OP_COMMA);
            clazz.super_types += Type();
          }
          break;
        default:
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    TypeBodyDeclaration(clazz);
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public void TypeBodyDeclaration(ComplexTypeDecl clazz) throws ParseException {
  ASTModifiers modifiers; SpacePtr clazz_members = Env.getSpacePtr(clazz, "members"); Struct sub_struct;
    jj_consume_token(OP_LBRACE);
    if (clazz.isEnum()) {
                  JavaEnum enum_clazz = (JavaEnum)clazz;
      modifiers = Modifiers();
      enum_clazz.enum_fields += EnumFieldDeclaration(modifiers);
      label_10:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:
          ;
          break;
        default:
          break label_10;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        enum_clazz.enum_fields += EnumFieldDeclaration(modifiers);
      }
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    label_11:
    while (true) {
      if (getToken(1).kind != OP_RBRACE) {
        ;
      } else {
        break label_11;
      }
                  comments_alone(clazz_members);
      modifiers = Modifiers();
      if (getToken(1).kind == OP_LBRACE) {
        clazz.members += Initializer(modifiers);
      } else {
        switch (jj_nt.kind) {
        case KW_INVARIANT:
          clazz.members += InvariantDeclaration(modifiers);
          switch (jj_nt.kind) {
          case OP_SEMICOLON:
            jj_consume_token(OP_SEMICOLON);
            break;
          default:
            ;
          }
          break;
        default:
          if (jj_2_6(1)) {
            sub_struct     = TypeDeclaration(modifiers, clazz);
                          if (!sub_struct.isAttached()) clazz.members += sub_struct; else assert(clazz.members.indexOf(sub_struct) >= 0);
            switch (jj_nt.kind) {
            case OP_SEMICOLON:
              jj_consume_token(OP_SEMICOLON);
              break;
            default:
              ;
            }
          } else {
            switch (jj_nt.kind) {
            case KW_TYPE:
            case KW_TYPEDEF:
              clazz.members += MemberArgDecl(modifiers,clazz);
              break;
            case KW_CASE:
              sub_struct     = CaseTypeDeclaration(modifiers, clazz);
                          if (!sub_struct.isAttached()) clazz.members += sub_struct; else assert(clazz.members.indexOf(sub_struct) >= 0);
              break;
            default:
              if (jj_2_7(3) && (getToken(1).image.equals("rule"))) {
                clazz.members += RuleDeclaration(modifiers);
              } else {
                clazz.members += FieldOrMethodDecl(modifiers, clazz);
              }
            }
          }
        }
      }
    }
          comments_alone(clazz_members);
    jj_consume_token(OP_RBRACE);
  }

  final public DNode FieldOrMethodDecl(ASTModifiers modifiers, ComplexTypeDecl clazz) throws ParseException {
  TypeConstr[] args; TypeRef dtype; DNode res = null;
    switch (jj_nt.kind) {
    case OP_LT:
    case LANGLE:
      args = ClazzArguments(null);
      if (getToken(1).kind == IDENTIFIER && getToken(2).kind == OP_LPAREN) {
        // LOOKAHEAD (<IDENTIFIER> "(")
                                res = ConstructorDeclaration(modifiers, args, clazz);
      } else {
        switch (jj_nt.kind) {
        case OP_LPAREN:
        case IDENTIFIER:
        case ESC_IDENTIFIER:
        case HID_IDENTIFIER:
          dtype = Type();
          res = MethodDeclaration(modifiers, args, dtype);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      if (getToken(1).kind == IDENTIFIER && getToken(2).kind == OP_LPAREN) {
        // LOOKAHEAD (<IDENTIFIER> "(")
                        res = ConstructorDeclaration(modifiers, null, clazz);
      } else {
        switch (jj_nt.kind) {
        case OP_LPAREN:
        case IDENTIFIER:
        case ESC_IDENTIFIER:
        case HID_IDENTIFIER:
          dtype = Type();
          if (getToken(1).kind == IDENTIFIER && getToken(2).kind == OP_LPAREN) {
            // LOOKAHEAD (<IDENTIFIER> "(")
                                    res = MethodDeclaration(modifiers, null, dtype);
          } else {
            res = FieldDecl(modifiers, dtype);
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Field EnumFieldDeclaration(ASTModifiers modifiers) throws ParseException {
  Symbol id; Field f; NewEnumExpr ne;
    id = Name();
          f = mkEnumField(id, modifiers);
    switch (jj_nt.kind) {
    case OP_COLON:
      jj_consume_token(OP_COLON);
      f.alt_enum_id = StringConstExpression();
      break;
    case OP_LPAREN:
      jj_consume_token(OP_LPAREN);
                          ne = new NewEnumExpr(); f.init = ne;
      if (getToken(1).kind != OP_RPAREN) {
        ne.args += ExpressionColon();
        label_12:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:
            ;
            break;
          default:
            break label_12;
          }
          jj_consume_token(OP_COMMA);
          ne.args += ExpressionColon();
        }
      } else {
        ;
      }
      jj_consume_token(OP_RPAREN);
      break;
    default:

    }
          {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Struct CaseTypeDeclaration(ASTModifiers modifiers, ComplexTypeDecl parent) throws ParseException {
  Symbol name; PizzaCase clazz; TypeConstr[] args;
    jj_consume_token(KW_CASE);
    name = Name();
                clazz = (PizzaCase)mkStruct(name, new PizzaCase(), ACC_STATIC|ACC_FINAL, modifiers, parent);
    switch (jj_nt.kind) {
    case OP_LT:
    case LANGLE:
      args = ClazzArguments(clazz);
                                               clazz.args.addAll(args);
      break;
    default:
      ;
    }
    switch (jj_nt.kind) {
    case OP_LPAREN:
      jj_consume_token(OP_LPAREN);
      if (getToken(1).kind != OP_RPAREN) {
        modifiers = Modifiers();
        clazz.case_fields += CaseTypeField(modifiers);
        label_13:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:
            ;
            break;
          default:
            break label_13;
          }
          jj_consume_token(OP_COMMA);
          modifiers = Modifiers();
          clazz.case_fields += CaseTypeField(modifiers);
        }
      } else {
        ;
      }
      jj_consume_token(OP_RPAREN);
      jj_consume_token(OP_SEMICOLON);
      break;
    case OP_SEMICOLON:
      jj_consume_token(OP_SEMICOLON);
                  clazz.metas.add(new MetaSingleton());
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public TypeConstr[] ClazzArguments(DNode dn) throws ParseException {
  TypeConstr[] args = new TypeConstr[0]; TypeConstr arg;
    switch (jj_nt.kind) {
    case OP_LT:
      jj_consume_token(OP_LT);
      break;
    case LANGLE:
      jj_consume_token(LANGLE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    arg = ArgumentDeclaration(dn);
                  args = (TypeConstr[])Arrays.append(args,arg);
    label_14:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:
        ;
        break;
      default:
        break label_14;
      }
      jj_consume_token(OP_COMMA);
      arg = ArgumentDeclaration(dn);
                          args = (TypeConstr[])Arrays.append(args,arg);
    }
    switch (jj_nt.kind) {
    case OP_GT:
      jj_consume_token(OP_GT);
      break;
    case RANGLE:
      jj_consume_token(RANGLE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDef MemberArgDecl(ASTModifiers modifiers, DNode dn) throws ParseException {
  Symbol name; TypeDef arg; TypeRef t;
    switch (jj_nt.kind) {
    case KW_TYPEDEF:
      jj_consume_token(KW_TYPEDEF);
      break;
    case KW_TYPE:
      jj_consume_token(KW_TYPE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    name      = Name();
    switch (jj_nt.kind) {
    case OP_ASSIGN:
      jj_consume_token(OP_ASSIGN);
                          arg = mkTypeAssign(name.pos,name.sname,modifiers,dn);
      t = Type();
                                     arg.super_types += t;
      jj_consume_token(OP_SEMICOLON);
      break;
    case OP_UPPER_BOUND:
    case OP_LOWER_BOUND:
                          arg = mkTypeConstr(name.pos,name.sname,modifiers,dn);
      label_15:
      while (true) {
        switch (jj_nt.kind) {
        case OP_UPPER_BOUND:
          jj_consume_token(OP_UPPER_BOUND);
          t = Type();
                                                              arg.super_types.add(t);
          break;
        case OP_LOWER_BOUND:
          jj_consume_token(OP_LOWER_BOUND);
          t = Type();
                                                              arg.lower_bound.add(t);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch (jj_nt.kind) {
        case OP_UPPER_BOUND:
        case OP_LOWER_BOUND:
          ;
          break;
        default:
          break label_15;
        }
      }
      jj_consume_token(OP_SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return arg;}
    throw new Error("Missing return statement in function");
  }

  final public TypeConstr ArgumentDeclaration(DNode dn) throws ParseException {
  ASTModifiers modifiers; Symbol name; TypeConstr arg; TypeRef tr; TypeVariance variance = null;
    modifiers = Modifiers();
    if (jj_2_8(2147483647)) {
      jj_consume_token(OPERATOR);
                        String img = getToken(0).image;
                        if (img.equals("+"))
                                variance = TypeVariance.CO_VARIANT;
                        else if (img.equals("-"))
                                variance = TypeVariance.CONTRA_VARIANT;
                        else if (img.equals("*"))
                                variance = TypeVariance.IN_VARIANT;
    } else {
      ;
    }
    name      = Name();
                arg = mkTypeConstr(name.pos,name.sname,modifiers,dn); arg.setAbstract(true);
                if (variance != null)
                        arg.variance = variance;
    switch (jj_nt.kind) {
    case KW_EXTENDS:
      jj_consume_token(KW_EXTENDS);
      tr = Type();
                              arg.super_types.add(tr);
      label_16:
      while (true) {
        if (jj_2_9(2147483647) && (getToken(1).image.equals("&"))) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(OPERATOR);
        tr = Type();
                                      arg.super_types.add(tr);
      }
      break;
    default:
      ;
    }
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("super")) {
      jj_consume_token(IDENTIFIER);
      tr = Type();
                              arg.lower_bound.add(tr);
      label_17:
      while (true) {
        if (jj_2_10(2147483647) && (getToken(1).image.equals("&"))) {
          ;
        } else {
          break label_17;
        }
        jj_consume_token(OPERATOR);
        tr = Type();
                                      arg.lower_bound.add(tr);
      }
    } else {
      ;
    }
    label_18:
    while (true) {
      switch (jj_nt.kind) {
      case OP_UPPER_BOUND:
      case OP_LOWER_BOUND:
        ;
        break;
      default:
        break label_18;
      }
      switch (jj_nt.kind) {
      case OP_UPPER_BOUND:
        jj_consume_token(OP_UPPER_BOUND);
        tr = Type();
                                               arg.super_types.add(tr);
        break;
      case OP_LOWER_BOUND:
        jj_consume_token(OP_LOWER_BOUND);
        tr = Type();
                                               arg.lower_bound.add(tr);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return arg;}
    throw new Error("Missing return statement in function");
  }

  final public void Access(ASTModifiers modifiers) throws ParseException {
  int acc;      int accflags = 0; int offset = 6; MetaAccess ma;
    switch (jj_nt.kind) {
    case META_ACCESS1:
      jj_consume_token(META_ACCESS1);
                                          ma = new MetaAccess();
      break;
    case META_PUBLIC:
      jj_consume_token(META_PUBLIC);
                                          ma = new MetaAccess("public");
      break;
    case KW_PUBLIC:
      jj_consume_token(KW_PUBLIC);
                                          ma = new MetaAccess("public");
      break;
    case META_PROTECTED:
      jj_consume_token(META_PROTECTED);
                                  ma = new MetaAccess("protected");
      break;
    case KW_PROTECTED:
      jj_consume_token(KW_PROTECTED);
                                          ma = new MetaAccess("protected");
      break;
    case META_PRIVATE:
      jj_consume_token(META_PRIVATE);
                                          ma = new MetaAccess("private");
      break;
    case KW_PRIVATE:
      jj_consume_token(KW_PRIVATE);
                                          ma = new MetaAccess("private");
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case OP_COLON:
    case OP_LPAREN:
      switch (jj_nt.kind) {
      case OP_COLON:
        jj_consume_token(OP_COLON);
        acc = AccessSpec();
                                            for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
        switch (jj_nt.kind) {
        case OP_COMMA:
          jj_consume_token(OP_COMMA);
          acc = AccessSpec();
                                            for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
          switch (jj_nt.kind) {
          case OP_COMMA:
            jj_consume_token(OP_COMMA);
            acc = AccessSpec();
                                            for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
            switch (jj_nt.kind) {
            case OP_COMMA:
              jj_consume_token(OP_COMMA);
              acc = AccessSpec();
                                            for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
              break;
            default:
              ;
            }
            break;
          default:
            ;
          }
          break;
        default:
          ;
        }
                  ma.flags = accflags;
        break;
      case OP_LPAREN:
        jj_consume_token(OP_LPAREN);
        acc = AccessSpec();
                                            for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
        switch (jj_nt.kind) {
        case OP_COMMA:
          jj_consume_token(OP_COMMA);
          acc = AccessSpec();
                                            for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
          switch (jj_nt.kind) {
          case OP_COMMA:
            jj_consume_token(OP_COMMA);
            acc = AccessSpec();
                                            for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
            switch (jj_nt.kind) {
            case OP_COMMA:
              jj_consume_token(OP_COMMA);
              acc = AccessSpec();
                                            for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
              break;
            default:
              ;
            }
            break;
          default:
            ;
          }
          break;
        default:
          ;
        }
        jj_consume_token(OP_RPAREN);
                  ma.flags = accflags;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
                if (ma.flags != -1)
                        modifiers += ma;
                else if (ma.simple == "public")
                        modifiers += new MetaPublic();
                else if (ma.simple == "protected")
                        modifiers += new MetaProtected();
                else if (ma.simple == "private")
                        modifiers += new MetaPrivate();
  }

  final public int AccessSpec() throws ParseException {
    switch (jj_nt.kind) {
    case KW_ACC_RO:
      jj_consume_token(KW_ACC_RO);
                      {if (true) return 2;}
      break;
    case KW_ACC_WO:
      jj_consume_token(KW_ACC_WO);
                      {if (true) return 1;}
      break;
    case KW_ACC_RW:
      jj_consume_token(KW_ACC_RW);
                      {if (true) return 3;}
      break;
    case KW_ACC_NO:
      jj_consume_token(KW_ACC_NO);
                      {if (true) return 0;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void SpecialAnnotation(ASTModifiers modifiers) throws ParseException {
  MetaPacked mp; MetaThrows mthr; MetaUUID muuid; TypeNameRef thr; ConstIntExpr ice; ConstStringExpr cs; SymbolRef nr;
    switch (jj_nt.kind) {
    case META_SINGLETON:
      jj_consume_token(META_SINGLETON);
                                  modifiers += new MetaSingleton();
      break;
    case META_MIXIN:
      jj_consume_token(META_MIXIN);
                                          modifiers += new MetaMixin();
      break;
    case META_FORWARD:
      jj_consume_token(META_FORWARD);
                                  modifiers += new MetaForward();
      break;
    case META_UNERASABLE:
      jj_consume_token(META_UNERASABLE);
                                  modifiers += new MetaUnerasable();
      break;
    case META_VIRTUAL:
      jj_consume_token(META_VIRTUAL);
                                  modifiers += new MetaVirtual();
      break;
    case META_MACRO:
      jj_consume_token(META_MACRO);
                                          modifiers += new MetaMacro();
      break;
    case KW_STATIC:
      jj_consume_token(KW_STATIC);
                                          modifiers += new MetaStatic();
      break;
    case META_STATIC:
      jj_consume_token(META_STATIC);
                                          modifiers += new MetaStatic();
      break;
    case KW_ABSTRACT:
      jj_consume_token(KW_ABSTRACT);
                                  modifiers += new MetaAbstract();
      break;
    case META_ABSTRACT:
      jj_consume_token(META_ABSTRACT);
                                  modifiers += new MetaAbstract();
      break;
    case KW_FINAL:
      jj_consume_token(KW_FINAL);
                                          modifiers += new MetaFinal();
      break;
    case META_FINAL:
      jj_consume_token(META_FINAL);
                                          modifiers += new MetaFinal();
      break;
    case KW_NATIVE:
      jj_consume_token(KW_NATIVE);
                                          modifiers += new MetaNative();
      break;
    case META_NATIVE:
      jj_consume_token(META_NATIVE);
                                          modifiers += new MetaNative();
      break;
    case KW_SYNCHRONIZED:
      jj_consume_token(KW_SYNCHRONIZED);
                                  modifiers += new MetaSynchronized();
      break;
    case META_SYNCHRONIZED:
      jj_consume_token(META_SYNCHRONIZED);
                                  modifiers += new MetaSynchronized();
      break;
    case KW_TRANSIENT:
      jj_consume_token(KW_TRANSIENT);
                                  modifiers += new MetaTransient();
      break;
    case META_TRANSIENT:
      jj_consume_token(META_TRANSIENT);
                                  modifiers += new MetaTransient();
      break;
    case KW_VOLATILE:
      jj_consume_token(KW_VOLATILE);
                                  modifiers += new MetaVolatile();
      break;
    case META_VOLATILE:
      jj_consume_token(META_VOLATILE);
                                  modifiers += new MetaVolatile();
      break;
    case META_PACKED:
      jj_consume_token(META_PACKED);
                  mp = new MetaPacked();
      switch (jj_nt.kind) {
      case OP_LPAREN:
        jj_consume_token(OP_LPAREN);
        ice = IntConstExpression();
                                                                             mp.size = ice.value;
        switch (jj_nt.kind) {
        case OP_COMMA:
          jj_consume_token(OP_COMMA);
          nr  = NameRef();
                                                                  mp.fld = (SymbolRefFld)nr;
          jj_consume_token(OP_COMMA);
          ice = IntConstExpression();
                                                                             mp.offset = ice.value;
          break;
        default:
          ;
        }
        jj_consume_token(OP_RPAREN);
        break;
      case OP_COLON:
        jj_consume_token(OP_COLON);
        ice = IntConstExpression();
                                                             mp.size = ice.value;
        switch (jj_nt.kind) {
        case OP_COMMA:
          jj_consume_token(OP_COMMA);
          nr  = NameRef();
                                                          mp.fld = (SymbolRefFld)nr;
          jj_consume_token(OP_COMMA);
          ice = IntConstExpression();
                                                                     mp.offset = ice.value;
          break;
        default:
          ;
        }
        break;
      default:

      }
                  modifiers += mp;
      break;
    case META_THROWS:
      jj_consume_token(META_THROWS);
                  mthr = new MetaThrows();
      switch (jj_nt.kind) {
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:
        thr = TypeQName();
                                            mthr.add(thr);
        label_19:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:
            ;
            break;
          default:
            break label_19;
          }
          jj_consume_token(OP_COMMA);
          thr = TypeQName();
                                                  mthr.add(thr);
        }
        break;
      case OP_LPAREN:
        jj_consume_token(OP_LPAREN);
        if (jj_2_11(2)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(OP_ASSIGN);
        } else {
          ;
        }
        switch (jj_nt.kind) {
        case OP_LBRACE:
          jj_consume_token(OP_LBRACE);
          break;
        default:
          ;
        }
        thr = TypeQName();
                                            mthr.add(thr);
        label_20:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:
            ;
            break;
          default:
            break label_20;
          }
          jj_consume_token(OP_COMMA);
          thr = TypeQName();
                                                  mthr.add(thr);
        }
        switch (jj_nt.kind) {
        case OP_RBRACE:
          jj_consume_token(OP_RBRACE);
          break;
        default:
          ;
        }
        jj_consume_token(OP_RPAREN);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  modifiers += mthr;
      break;
    case META_UUID:
      jj_consume_token(META_UUID);
                  muuid = new MetaUUID();
      jj_consume_token(OP_LPAREN);
      cs = StringConstExpression();
      jj_consume_token(OP_RPAREN);
                  muuid.value = cs.value; modifiers += muuid;
      break;
    case META_GETTER:
      jj_consume_token(META_GETTER);
                                  modifiers += new MetaGetter();
      break;
    case META_SETTER:
      jj_consume_token(META_SETTER);
                                  modifiers += new MetaSetter();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public SymbolRef KeywordAsNameRef() throws ParseException {
  Token t; SymbolRef id;
    switch (jj_nt.kind) {
    case KW_ALIAS:
      t= jj_consume_token(KW_ALIAS);
      break;
    case KW_THROWS:
      t= jj_consume_token(KW_THROWS);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                id = new SymbolRef();
                id.pos = t.getPos();
                id.name = t.image;
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol KeywordAsName() throws ParseException {
  Token t; Symbol id;
    switch (jj_nt.kind) {
    case KW_ALIAS:
      t= jj_consume_token(KW_ALIAS);
      break;
    case KW_THROWS:
      t= jj_consume_token(KW_THROWS);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                id = new Symbol();
                id.pos = t.getPos();
                id.sname = t.image;
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public UserMeta Annotation() throws ParseException {
  SymbolRef id; MetaValue v;
          UserMeta n = new UserMeta();
    jj_consume_token(OP_AT);
    switch (jj_nt.kind) {
    case IDENTIFIER:
    case ESC_IDENTIFIER:
    case HID_IDENTIFIER:
      id = QName();
      break;
    case KW_THROWS:
    case KW_ALIAS:
      id = KeywordAsNameRef();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                n.pos = id.pos;  n.decl.name = id.name;
    if (getToken(1).kind == OP_LPAREN) {
      jj_consume_token(OP_LPAREN);
      if (getToken(1).kind != OP_RPAREN) {
        if (jj_2_12(2147483647)) {
          AnnotationValues(n);
        } else {
          v = AnnotationValueAny(new SymbolRef("value"));
                                                                                 n.set(v);
        }
      } else {
        ;
      }
      jj_consume_token(OP_RPAREN);
    } else {
      ;
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public void AnnotationValues(UserMeta m) throws ParseException {
  SymbolRef id; MetaValue v;
    id = NameRef();
    jj_consume_token(OP_ASSIGN);
    v = AnnotationValueAny(id);
          m.set(v);
    label_21:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:
        ;
        break;
      default:
        break label_21;
      }
      jj_consume_token(OP_COMMA);
      id = NameRef();
      jj_consume_token(OP_ASSIGN);
      v = AnnotationValueAny(id);
                  v.ident = id.name; v.pos = id.pos; m.set(v);
    }
  }

  final public MetaValue AnnotationValueAny(SymbolRef id) throws ParseException {
  ASTNode n; MetaValue v;
    if (jj_2_13(2147483647)) {
      n = Annotation();
                  v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
    } else {
      switch (jj_nt.kind) {
      case OP_LBRACE:
        v = AnnotationValueValueArrayInitializer(id);
        break;
      default:
        n = Expression();
                  v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
      }
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public MetaValueScalar AnnotationValueScalar(SymbolRef id) throws ParseException {
  ASTNode n; MetaValueScalar v;
    if (jj_2_14(2147483647)) {
      n = Annotation();
                  v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
    } else {
      n = Expression();
                  v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public MetaValueArray AnnotationValueValueArrayInitializer(SymbolRef id) throws ParseException {
  MetaValueScalar n; MetaValueArray v;
          v = new MetaValueArray(id);
    jj_consume_token(OP_LBRACE);
    if (getToken(1).kind != OP_RBRACE) {
      n = AnnotationValueScalar(null);
                                                  v.values.add(~n.value);
      label_22:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:
          ;
          break;
        default:
          break label_22;
        }
        jj_consume_token(OP_COMMA);
        n = AnnotationValueScalar(null);
                                                          v.values.add(~n.value);
      }
    } else {
      ;
    }
    jj_consume_token(OP_RBRACE);
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Field FieldDecl(ASTModifiers modifiers, TypeRef dtype) throws ParseException {
  boolean old_declMode; Symbol id; ENode init; Field fld;
                old_declMode = declMode;
                declMode = false;
                init = null;
    try {
      id = Name();
      switch (jj_nt.kind) {
      case OP_ASSIGN:
        jj_consume_token(OP_ASSIGN);
        init = VariableInitializer();
        break;
      default:
        ;
      }
                        fld = mkField(id, modifiers, dtype, init);
      jj_consume_token(OP_SEMICOLON);
                        {if (true) return fld;}
    } finally {
                    declMode = old_declMode;
    }
    throw new Error("Missing return statement in function");
  }

  final public void LocalVarDecls(ASTModifiers modifiers, RuleMethod meth) throws ParseException {
  TypeRef dtype;
    dtype = Type();
    meth.localvars += RuleVarDecl(modifiers, dtype, true);
    label_23:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:
        ;
        break;
      default:
        break label_23;
      }
      jj_consume_token(OP_COMMA);
      meth.localvars += RuleVarDecl(modifiers, dtype, false);
    }
    jj_consume_token(OP_SEMICOLON);
  }

  final public LVar RuleVarDecl(ASTModifiers modifiers, TypeRef dtype, boolean first) throws ParseException {
  Token t; Symbol id; LVar lv;
    id = Name();
          lv = mkRuleVar(id, modifiers, dtype, first);
    switch (jj_nt.kind) {
    case OP_ASSIGN:
      jj_consume_token(OP_ASSIGN);
      lv.init = VariableInitializer();
      break;
    default:
      ;
    }
          {if (true) return lv;}
    throw new Error("Missing return statement in function");
  }

  final public void VarDecls(ASTModifiers modifiers, SpacePtr stats) throws ParseException {
  boolean old_declMode; TypeRef dtype; Symbol id; ENode init; Var var;
                old_declMode = declMode;
                declMode = false;
                init = null;
                var = null;
    try {
      dtype = Type();
      id = Name();
      switch (jj_nt.kind) {
      case OP_ASSIGN:
        jj_consume_token(OP_ASSIGN);
        init = VariableInitializer();
        break;
      default:
        ;
      }
                        var = mkVar(id, new ASTModifiers(), dtype);
                        modifiers.copyToNode(var);
                        var.init = init;
                        stats += var;
      label_24:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:
          ;
          break;
        default:
          break label_24;
        }
        jj_consume_token(OP_COMMA);
                          init = null;
        id = Name();
        switch (jj_nt.kind) {
        case OP_ASSIGN:
          jj_consume_token(OP_ASSIGN);
          init = VariableInitializer();
          break;
        default:
          ;
        }
                                var = mkVar(id, new ASTModifiers(), new Copier().copyFull(dtype));
                                modifiers.copyToNode(var);
                                var.init = init;
                                stats += var;
      }
    } finally {
                    declMode = old_declMode;
    }
  }

  final public ENode VariableInitializer() throws ParseException {
  ENode e;
    switch (jj_nt.kind) {
    case OP_LBRACE:
      e = ArrayInitializer();
      break;
    default:
      e = ExpressionColon();
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ArrayInitializer() throws ParseException {
  NewInitializedArrayExpr e = new NewInitializedArrayExpr(); e.pos = getToken(1).getPos();
    jj_consume_token(OP_LBRACE);
    if (jj_2_16(2)) {
      e.args += VariableInitializer();
      label_25:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_25;
        }
        jj_consume_token(OP_COMMA);
        e.args += VariableInitializer();
      }
      switch (jj_nt.kind) {
      case OP_COMMA:
        jj_consume_token(OP_COMMA);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    jj_consume_token(OP_RBRACE);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Field CaseTypeField(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; Symbol id;
    tp = Type();
    id = Name();
                {if (true) return mkCaseField(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
  }

  final public Var PizzaCaseFormalParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; Symbol id;
    if (getToken(1).image.equals("_")) {
      id = Name();
                              tp = new TypeRef(curEnv.tenv.tpVoid); tp.pos = id.pos;
    } else {
      switch (jj_nt.kind) {
      case OP_LPAREN:
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:
        tp = Type();
        id = Name();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return mkVar(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
  }

  final public LVar MethodFormalParameter(ASTModifiers modifiers, TypeRef tp) throws ParseException {
  Token t; TypeRef st=null; Symbol id;
    switch (jj_nt.kind) {
    case OP_COLON:
      jj_consume_token(OP_COLON);
      st = Type();
      break;
    default:
      ;
    }
    id = Name();
          {if (true) return mkFormPar(id, modifiers, tp, st);}
    throw new Error("Missing return statement in function");
  }

  final public LVar MethodVarargsParameter(ASTModifiers modifiers, TypeRef tp) throws ParseException {
  Token t; Symbol id = null;
    t = jj_consume_token(OP_VARARGS);
    switch (jj_nt.kind) {
    case IDENTIFIER:
    case ESC_IDENTIFIER:
    case HID_IDENTIFIER:
      id = Name();
      break;
    default:
      ;
    }
                if (tp == null)
                        tp = makeTypeExpr(new TypeRef(curEnv.tenv.tpObject), t);
                else
                        tp = makeTypeExpr(tp, t);
                tp.pos = t.getPos();
                if (id == null) {
                        id = new Symbol(t.getPos(), Constants.nameVarArgs);
                }
                {if (true) return mkVarargPar(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
  }

  final public LVar FormalParameter(ASTModifiers modifiers, TypeRef tp) throws ParseException {
  Token t; Symbol id;
    id = Name();
          {if (true) return mkFormPar(id, modifiers, tp, null);}
    throw new Error("Missing return statement in function");
  }

  final public MetaThrows Throws() throws ParseException {
  MetaThrows n = new MetaThrows(); TypeNameRef thr;
    jj_consume_token(KW_THROWS);
    thr = TypeQName();
                            n.add(thr);
    label_26:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:
        ;
        break;
      default:
        break label_26;
      }
      jj_consume_token(OP_COMMA);
      thr = TypeQName();
                                    n.add(thr);
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Alias MethodAlias(Method m) throws ParseException {
  Alias a; Symbol s; SymbolRef id; EToken op; ConstIntExpr ce; ConstStringExpr cs;
    switch (jj_nt.kind) {
    case KW_ALIAS:
      jj_consume_token(KW_ALIAS);
      switch (jj_nt.kind) {
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:
        s = Name();
                          a = new Alias(s.sname, m); a.pos = s.pos;
        break;
      case KW_OPERATOR:
        jj_consume_token(KW_OPERATOR);
        cs = StringConstExpression();
                          a = new OperatorAlias(cs.value, m); a.pos = cs.pos;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case KW_OPERATOR:
      jj_consume_token(KW_OPERATOR);
      cs = StringConstExpression();
                  a = new OperatorAlias(cs.value, m); a.pos = cs.pos;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public void SkipBlock() throws ParseException {
    if (interface_only) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OP_LBRACE);
                Token tk = getToken(0);
                int depth = 1;
                do {
                        tk = getNextToken();
                        if( tk.kind == OP_LBRACE ) depth++;
                        else if( tk.kind == OP_RBRACE ) depth--;
                } while( depth > 0 );
  }

  final public Method MethodDeclaration(ASTModifiers modifiers, TypeConstr[] args, TypeRef ret) throws ParseException {
  Token t; Method m; Symbol id; ConstStringExpr cor; MetaThrows thr; TypeRef ptype;
    id = Name();
                m = mkMethod(id,modifiers,ret);
                if (args != null)
                        m.targs.addAll(args);
    jj_consume_token(OP_LPAREN);
    if (getToken(1).kind != OP_RPAREN) {
      modifiers = Modifiers();
      ptype = Type();
      switch (jj_nt.kind) {
      case OP_COLON:
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:
        m.params += MethodFormalParameter(modifiers,ptype);
        break;
      case OP_VARARGS:
        m.params += MethodVarargsParameter(modifiers,ptype);
                                  m.setVarArgs(true);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_27:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:
          ;
          break;
        default:
          break label_27;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        ptype = Type();
        switch (jj_nt.kind) {
        case OP_COLON:
        case IDENTIFIER:
        case ESC_IDENTIFIER:
        case HID_IDENTIFIER:
          m.params += MethodFormalParameter(modifiers,ptype);
          break;
        case OP_VARARGS:
          m.params += MethodVarargsParameter(modifiers,ptype);
                                          m.setVarArgs(true);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    label_28:
    while (true) {
      switch (jj_nt.kind) {
      case KW_ALIAS:
      case KW_OPERATOR:
        ;
        break;
      default:
        break label_28;
      }
      m.aliases += MethodAlias(m);
    }
    switch (jj_nt.kind) {
    case KW_THROWS:
      thr = Throws();
                                  m.setMeta(thr);
      break;
    default:
      ;
    }
    label_29:
    while (true) {
      switch (jj_nt.kind) {
      case KW_REQUIRE:
      case KW_ENSURE:
        ;
        break;
      default:
        break label_29;
      }
      switch (jj_nt.kind) {
      case KW_REQUIRE:
        m.conditions += RequareDeclaration();
        break;
      case KW_ENSURE:
        m.conditions += EnsureDeclaration();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (getToken(1).kind == OP_LBRACE && interface_only) {
      SkipBlock();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        ;
      }
    } else if (getToken(1).kind == OP_LBRACE) {
      m.body = Block();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case KW_DEFAULT:
        jj_consume_token(KW_DEFAULT);
        m.body = AnnotationValueAny(new SymbolRef(getToken(0).getPos(),m));
        jj_consume_token(OP_SEMICOLON);
        break;
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Constructor ConstructorDeclaration(ASTModifiers modifiers, TypeConstr[] args, ComplexTypeDecl clazz) throws ParseException {
  Token t; Constructor m; Symbol id; MetaThrows thr; TypeRef ptype;
    id = Name();
                if( !id.sname.equals(clazz.sname) )
                        Kiev.reportError(id,"Return type missed or bad constructor name "+id);
                m = mkConstructor(id,modifiers);
                if (args != null)
                        m.targs.addAll(args);
    jj_consume_token(OP_LPAREN);
    if (getToken(1).kind != OP_RPAREN) {
      modifiers = Modifiers();
      ptype = Type();
      switch (jj_nt.kind) {
      case OP_COLON:
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:
        m.params += MethodFormalParameter(modifiers,ptype);
        break;
      case OP_VARARGS:
        m.params += MethodVarargsParameter(modifiers,ptype);
                                  m.setVarArgs(true);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_30:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:
          ;
          break;
        default:
          break label_30;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        ptype = Type();
        switch (jj_nt.kind) {
        case OP_COLON:
        case IDENTIFIER:
        case ESC_IDENTIFIER:
        case HID_IDENTIFIER:
          m.params += MethodFormalParameter(modifiers,ptype);
          break;
        case OP_VARARGS:
          m.params += MethodVarargsParameter(modifiers,ptype);
                                          m.setVarArgs(true);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    label_31:
    while (true) {
      switch (jj_nt.kind) {
      case KW_ALIAS:
      case KW_OPERATOR:
        ;
        break;
      default:
        break label_31;
      }
      m.aliases += MethodAlias(m);
    }
    switch (jj_nt.kind) {
    case KW_THROWS:
      thr = Throws();
                                  m.setMeta(thr);
      break;
    default:
      ;
    }
    label_32:
    while (true) {
      switch (jj_nt.kind) {
      case KW_REQUIRE:
      case KW_ENSURE:
        ;
        break;
      default:
        break label_32;
      }
      switch (jj_nt.kind) {
      case KW_REQUIRE:
        m.conditions += RequareDeclaration();
        break;
      case KW_ENSURE:
        m.conditions += EnsureDeclaration();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (getToken(1).kind == OP_LBRACE && interface_only) {
      SkipBlock();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        ;
      }
    } else if (getToken(1).kind == OP_LBRACE) {
      m.body = Block();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public WBCCondition RequareDeclaration() throws ParseException {
  Symbol id;
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondRequire;
    jj_consume_token(KW_REQUIRE);
    if (jj_2_17(2147483647)) {
      jj_consume_token(OP_LBRACKET);
      id = Name();
                                  n.sname = id.sname;
      jj_consume_token(OP_RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_18(2147483647)) {
      id     = Name();
                                  n.sname = id.sname;
      n.body = CondBlock();
    } else {
      n.body = CondBlock();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public WBCCondition EnsureDeclaration() throws ParseException {
  Symbol id;
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondEnsure;
    jj_consume_token(KW_ENSURE);
    if (jj_2_19(2147483647)) {
      jj_consume_token(OP_LBRACKET);
      id = Name();
                                  n.sname = id.sname;
      jj_consume_token(OP_RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_20(2147483647)) {
      id     = Name();
                                  n.sname = id.sname;
      n.body = CondBlock();
    } else {
      n.body = CondBlock();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public WBCCondition InvariantDeclaration(ASTModifiers modifiers) throws ParseException {
  Symbol id;
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondInvariant;
    jj_consume_token(KW_INVARIANT);
    if (jj_2_21(2147483647)) {
      jj_consume_token(OP_LBRACKET);
      id = Name();
                                  n.sname = id.sname;
      jj_consume_token(OP_RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_22(2147483647)) {
      id     = Name();
                                  n.sname = id.sname;
      n.body = CondBlock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public RuleMethod RuleDeclaration(ASTModifiers modifiers) throws ParseException {
  RuleBlock bl; RuleMethod m; Symbol id; TypeRef ptype;
    jj_consume_token(IDENTIFIER);
    // "rule"
            id = Name();
          m = mkRuleMethod(id, modifiers, new TypeRef(curEnv.tenv.tpRule));
    jj_consume_token(OP_LPAREN);
    if (getToken(1).kind != OP_RPAREN) {
      modifiers = Modifiers();
      ptype = Type();
      m.params += FormalParameter(modifiers,ptype);
      label_33:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:
          ;
          break;
        default:
          break label_33;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        ptype = Type();
        m.params += FormalParameter(modifiers,ptype);
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    label_34:
    while (true) {
      switch (jj_nt.kind) {
      case KW_ALIAS:
      case KW_OPERATOR:
        ;
        break;
      default:
        break label_34;
      }
      m.aliases += MethodAlias(m);
    }
    label_35:
    while (true) {
      if (jj_2_23(1)) {
        ;
      } else {
        break label_35;
      }
      modifiers = Modifiers();
      LocalVarDecls(modifiers,m);
    }
    label_36:
    while (true) {
      switch (jj_nt.kind) {
      case KW_REQUIRE:
      case KW_ENSURE:
        ;
        break;
      default:
        break label_36;
      }
      switch (jj_nt.kind) {
      case KW_REQUIRE:
        m.conditions += RequareDeclaration();
        break;
      case KW_ENSURE:
        m.conditions += EnsureDeclaration();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (getToken(1).kind == OP_LBRACE && interface_only) {
      SkipBlock();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        ;
      }
    } else if (getToken(1).kind == OP_LBRACE) {
      m.body = RuleBlock();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer(ASTModifiers modifiers) throws ParseException {
        Initializer n = mkInitializer(getToken(0).getPos(),modifiers);
    if (getToken(1).kind == OP_LBRACE && interface_only) {
      SkipBlock();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      n.body = Block();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        jj_consume_token(OP_SEMICOLON);
        break;
      default:
        ;
      }
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  final public TypeRef Type() throws ParseException {
  TypeRef res;
    if (jj_2_24(2147483647)) {
      res = PathType();
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:
        res = TypeExpr();
        break;
      case OP_LPAREN:
        res = ClosureType();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef TypeExpr() throws ParseException {
  TypeRef res; Token t;
    res = TypeWithArgs();
    label_37:
    while (true) {
      switch (jj_nt.kind) {
      case OP_AT:
      case OP_SHARP:
      case OP_LRBRACKETS:
      case OP_SUPERSCRIPT_PLUS:
      case OP_SUPERSCRIPT_MINUS:
      case OPERATOR:
        ;
        break;
      default:
        break label_37;
      }
      switch (jj_nt.kind) {
      case OP_AT:
      case OP_SHARP:
      case OP_SUPERSCRIPT_PLUS:
      case OP_SUPERSCRIPT_MINUS:
      case OPERATOR:
        t = TypeOperatorChar();
        break;
      case OP_LRBRACKETS:
        t = jj_consume_token(OP_LRBRACKETS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  res = makeTypeExpr(res,t);
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public PathTypeRef PathType() throws ParseException {
  Token t; ENode e;
    t = jj_consume_token(IDENTIFIER);
                                                  e = new EToken(t,ETokenKind.MAYBE_IDENTIFIER);
    jj_consume_token(OP_DOT);
    label_38:
    while (true) {
      switch (jj_nt.kind) {
      case IDENTIFIER:
        ;
        break;
      default:
        break label_38;
      }
      t = jj_consume_token(IDENTIFIER);
                                                  e = new AccessExpr(t.getPos(),e,new EToken(t,ETokenKind.MAYBE_IDENTIFIER).ident);
      jj_consume_token(OP_DOT);
    }
    t= jj_consume_token(KW_TYPE);
          PathTypeRef tr = new PathTypeRef(e); tr.pos = t.getPos(); {if (true) return tr;}
    throw new Error("Missing return statement in function");
  }

  final public TypeNameRef TypeQName() throws ParseException {
  SymbolRef id; TypeNameRef res;
    id = NameRef();
                         res = new TypeNameRef(id.name); res.pos = id.pos;
    label_39:
    while (true) {
      if (jj_2_25(2147483647)) {
        ;
      } else {
        break label_39;
      }
      jj_consume_token(OP_DOT);
      id = NameRef();
                                  res.ident = res.ident + '\u00b7' + id.name;
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef TypeWithWildcard() throws ParseException {
  TypeRef res;
    if (getToken(1).kind == OPERATOR && getToken(1).image.equals("?")) {
      jj_consume_token(OPERATOR);
      switch (jj_nt.kind) {
      case KW_EXTENDS:
        jj_consume_token(KW_EXTENDS);
        res = Type();
                          res = new TypeExpr(res, Operator.PostTypeWildcardCoVariant, null);
        break;
      default:
        if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("super")) {
          jj_consume_token(IDENTIFIER);
          res = Type();
                          res = new TypeExpr(res, Operator.PostTypeWildcardContraVariant, null);
        } else {
                          res = new TypeExpr(curEnv.tenv.tpObject, Operator.PostTypeWildcardCoVariant, null); res.pos = getToken(0).getPos();
        }
      }
    } else {
      switch (jj_nt.kind) {
      case OP_LPAREN:
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:
        res = Type();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef TypeWithArgs() throws ParseException {
  SymbolRef qname; TypeRef res; TypeRef arg;
    qname = QName();
    if (getToken(1).kind == OP_LT || getToken(1).kind == OP_LANGLE) {
      switch (jj_nt.kind) {
      case OP_LT:
        jj_consume_token(OP_LT);
        break;
      case OP_LANGLE:
        jj_consume_token(OP_LANGLE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                          res = new TypeNameArgsRef(qname.name);
      if (getToken(1).kind == OPERATOR && getToken(1).image.equals("?")) {
        jj_consume_token(OPERATOR);
        switch (jj_nt.kind) {
        case KW_EXTENDS:
          jj_consume_token(KW_EXTENDS);
          arg = Type();
                                          res.args += new TypeExpr(arg, Operator.PostTypeWildcardCoVariant, null);
          break;
        default:
          if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("super")) {
            jj_consume_token(IDENTIFIER);
            arg = Type();
                                          res.args += new TypeExpr(arg, Operator.PostTypeWildcardContraVariant, null);
          } else {
                                          res.args += new TypeExpr(curEnv.tenv.tpObject, Operator.PostTypeWildcardCoVariant, null);
          }
        }
      } else {
        switch (jj_nt.kind) {
        case OP_LPAREN:
        case IDENTIFIER:
        case ESC_IDENTIFIER:
        case HID_IDENTIFIER:
          res.args += Type();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_40:
      while (true) {
        if (getToken(1).kind == OP_COMMA) {
          ;
        } else {
          break label_40;
        }
        jj_consume_token(OP_COMMA);
        res.args += Type();
      }
      switch (jj_nt.kind) {
      case OP_GT:
        jj_consume_token(OP_GT);
        break;
      case OP_RANGLE:
        jj_consume_token(OP_RANGLE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_41:
      while (true) {
        if (jj_2_26(2147483647)) {
          ;
        } else {
          break label_41;
        }
        jj_consume_token(OP_DOT);
        qname = QName();
                          res = new TypeInnerNameRef(res, qname.name);
        switch (jj_nt.kind) {
        case OP_LT:
          jj_consume_token(OP_LT);
          break;
        case OP_LANGLE:
          jj_consume_token(OP_LANGLE);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        res.args += Type();
        label_42:
        while (true) {
          if (getToken(1).kind == OP_COMMA) {
            ;
          } else {
            break label_42;
          }
          jj_consume_token(OP_COMMA);
          res.args += Type();
        }
        switch (jj_nt.kind) {
        case OP_GT:
          jj_consume_token(OP_GT);
          break;
        case OP_RANGLE:
          jj_consume_token(OP_RANGLE);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
                  res = new TypeNameRef(qname.name);
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef NArrType() throws ParseException {
  TypeRef res; Token t;
    res = TypeWithArgs();
    label_43:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_43;
      }
      switch (jj_nt.kind) {
      case OP_AT:
      case OP_SHARP:
      case OP_SUPERSCRIPT_PLUS:
      case OP_SUPERSCRIPT_MINUS:
      case OPERATOR:
        t = TypeOperatorChar();
                                                                  res = makeTypeExpr(res,t);
        break;
      case OP_LRBRACKETS:
        t = jj_consume_token(OP_LRBRACKETS);
                                                                  res = makeTypeExpr(res,t);
        t = TypeOperatorChar();
                                                                  res = makeTypeExpr(res,t);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef ClosureType() throws ParseException {
  Token t; TypeClosureRef n = new TypeClosureRef();
    t= jj_consume_token(OP_LPAREN);
                n.pos = t.getPos();
    switch (jj_nt.kind) {
    case OP_LPAREN:
    case IDENTIFIER:
    case ESC_IDENTIFIER:
    case HID_IDENTIFIER:
      n.args += Type();
      label_44:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:
          ;
          break;
        default:
          break label_44;
        }
        jj_consume_token(OP_COMMA);
        n.args += Type();
      }
      break;
    default:
      ;
    }
    jj_consume_token(OP_RPAREN);
    jj_consume_token(OP_ARROW);
    n.ret = Type();
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public LVarExpr Var() throws ParseException {
  Token t; LVarExpr id;
    switch (jj_nt.kind) {
    case IDENTIFIER:
      t= jj_consume_token(IDENTIFIER);
                id = new LVarExpr();
                id.pos = t.getPos();
                id.ident = t.image;
                {if (true) return id;}
      break;
    case ESC_IDENTIFIER:
      t= jj_consume_token(ESC_IDENTIFIER);
                id = new LVarExpr();
                id.pos = t.getPos();
                id.ident = ConstExpr.source2ascii(t.image.substring(1,t.image.length()-1));
                {if (true) return id;}
      break;
    case HID_IDENTIFIER:
      t= jj_consume_token(HID_IDENTIFIER);
                id = new LVarExpr();
                id.pos = t.getPos();
                id.ident = ConstExpr.source2ascii(t.image.substring(4,t.image.length()-2));
                {if (true) return id;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Symbol Name() throws ParseException {
  Token t; Symbol id;
    switch (jj_nt.kind) {
    case IDENTIFIER:
      t= jj_consume_token(IDENTIFIER);
                id = new Symbol();
                id.pos = t.getPos();
        id.sname = t.image;
                {if (true) return id;}
      break;
    case ESC_IDENTIFIER:
      t= jj_consume_token(ESC_IDENTIFIER);
                id = new Symbol();
                id.pos = t.getPos();
                id.sname = ConstExpr.source2ascii(t.image.substring(1,t.image.length()-1));
                {if (true) return id;}
      break;
    case HID_IDENTIFIER:
      t= jj_consume_token(HID_IDENTIFIER);
                id = new Symbol();
                id.pos = t.getPos();
                id.sname = ConstExpr.source2ascii(t.image.substring(4,t.image.length()-2));
                {if (true) return id;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolRef NameRef() throws ParseException {
  Token t; SymbolRef id;
    switch (jj_nt.kind) {
    case IDENTIFIER:
      t= jj_consume_token(IDENTIFIER);
                id = new SymbolRef();
                id.pos = t.getPos();
                id.name = t.image;
                {if (true) return id;}
      break;
    case ESC_IDENTIFIER:
      t= jj_consume_token(ESC_IDENTIFIER);
                id = new SymbolRef();
                id.name = ConstExpr.source2ascii(t.image.substring(1,t.image.length()-1));
                {if (true) return id;}
      break;
    case HID_IDENTIFIER:
      t= jj_consume_token(HID_IDENTIFIER);
                id = new SymbolRef();
                id.pos = t.getPos();
                id.name = ConstExpr.source2ascii(t.image.substring(4,t.image.length()-2));
                {if (true) return id;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolRef QName() throws ParseException {
  SymbolRef id; SymbolRef id2;
    id = NameRef();
    label_45:
    while (true) {
      if (jj_2_28(2)) {
        ;
      } else {
        break label_45;
      }
      jj_consume_token(OP_DOT);
      id2 = NameRef();
                  id.name = id.name+'\u00b7'+id2.name;
    }
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public EToken Identifier() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case IDENTIFIER:
      t= jj_consume_token(IDENTIFIER);
                {if (true) return new EToken(t,ETokenKind.MAYBE_IDENTIFIER);}
      break;
    case ESC_IDENTIFIER:
      t= jj_consume_token(ESC_IDENTIFIER);
                {if (true) return new EToken(t,ETokenKind.MAYBE_IDENTIFIER);}
      break;
    case HID_IDENTIFIER:
      t= jj_consume_token(HID_IDENTIFIER);
                {if (true) return new EToken(t,ETokenKind.MAYBE_IDENTIFIER);}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public ENode CommaExpression() throws ParseException {
  ENode e; CommaExpr ce = null;
    e = Expression();
    label_46:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:
        ;
        break;
      default:
        break label_46;
      }
      jj_consume_token(OP_COMMA);
                  if (ce==null) ce = new CommaExpr(e);
      ce.exprs += Expression();
    }
          {if (true) return ce == null ? e : ce;}
    throw new Error("Missing return statement in function");
  }

  final public ASTRuleNode RuleOrExpression() throws ParseException {
  ASTRuleNode e; RuleOrExpr r = null;
    e = RuleAndExpression();
    label_47:
    while (true) {
      switch (jj_nt.kind) {
      case OP_SEMICOLON:
        ;
        break;
      default:
        break label_47;
      }
      jj_consume_token(OP_SEMICOLON);
                  if (r==null) { r = new RuleOrExpr(e); r.pos = getToken(0).getPos();}
      r.rules += RuleAndExpression();
    }
          {if (true) return r == null ? e : r;}
    throw new Error("Missing return statement in function");
  }

  final public ASTRuleNode RuleAndExpression() throws ParseException {
  ASTRuleNode e; RuleAndExpr r = null;
    e = RuleExpression();
    label_48:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:
        ;
        break;
      default:
        break label_48;
      }
      jj_consume_token(OP_COMMA);
                  if (r==null) { r = new RuleAndExpr(e); r.pos = getToken(0).getPos();}
      r.rules += RuleExpression();
    }
          {if (true) return r == null ? e : r;}
    throw new Error("Missing return statement in function");
  }

  final public ASTRuleNode RuleExpression() throws ParseException {
  ASTRuleNode r;
    if (getToken(1).kind == IDENTIFIER
                     && getToken(2).kind == OP_IS_THE) {
      r = RuleIstheExpression();
    } else if (getToken(1).kind == IDENTIFIER
                     && getToken(2).kind == OP_IS_ONE_OF) {
      r = RuleIsoneofExpression();
    } else if (getToken(1).kind == KW_PCUT) {
      r = RuleCutExpression();
    } else if (getToken(1).kind == OP_LBRACE) {
      jj_consume_token(OP_LBRACE);
      r = RuleOrExpression();
      jj_consume_token(OP_RBRACE);
    } else if (getToken(1).kind == KW_WHILE) {
      jj_consume_token(KW_WHILE);
                  r = new RuleWhileExpr();
      r.expr = Expression();
      switch (jj_nt.kind) {
      case OP_COLON:
        jj_consume_token(OP_COLON);
        r.bt_expr = Expression();
        break;
      default:
        ;
      }
    } else {
                  r = new RuleExpr();
      r.expr = Expression();
      switch (jj_nt.kind) {
      case OP_COLON:
        jj_consume_token(OP_COLON);
        r.bt_expr = Expression();
        break;
      default:
        ;
      }
    }
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public RuleIstheExpr RuleIstheExpression() throws ParseException {
  Token t; RuleIstheExpr r = new RuleIstheExpr();
    r.var = Var();
    t = jj_consume_token(OP_IS_THE);
                   r.pos = t.getPos();
    r.expr = Expression();
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public RuleIsoneofExpr RuleIsoneofExpression() throws ParseException {
  Token t; RuleIsoneofExpr r = new RuleIsoneofExpr();
    r.var = Var();
    t = jj_consume_token(OP_IS_ONE_OF);
                   r.pos = t.getPos();
    r.expr = Expression();
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public RuleCutExpr RuleCutExpression() throws ParseException {
  RuleCutExpr r = new RuleCutExpr();
    jj_consume_token(KW_PCUT);
                r.pos = getToken(0).getPos();
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Token TypeOperatorChar() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case OP_AT:
      t= jj_consume_token(OP_AT);
      break;
    case OP_SHARP:
      t= jj_consume_token(OP_SHARP);
      break;
    case OP_SUPERSCRIPT_PLUS:
      t= jj_consume_token(OP_SUPERSCRIPT_PLUS);
      break;
    case OP_SUPERSCRIPT_MINUS:
      t= jj_consume_token(OP_SUPERSCRIPT_MINUS);
      break;
    case OPERATOR:
      t= jj_consume_token(OPERATOR);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token OperatorChar() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case OP_ASSIGN:
      t= jj_consume_token(OP_ASSIGN);
      break;
    case OP_LT:
      t= jj_consume_token(OP_LT);
      break;
    case OP_GT:
      t= jj_consume_token(OP_GT);
      break;
    case OP_AT:
      t= jj_consume_token(OP_AT);
      break;
    case OP_SHARP:
      t= jj_consume_token(OP_SHARP);
      break;
    case OP_UPPER_BOUND:
      t= jj_consume_token(OP_UPPER_BOUND);
      break;
    case OP_LOWER_BOUND:
      t= jj_consume_token(OP_LOWER_BOUND);
      break;
    case OPERATOR:
      t= jj_consume_token(OPERATOR);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public EToken Operator() throws ParseException {
  Token t; String image; long pos;
    switch (jj_nt.kind) {
    case OP_LT:
    case OP_GT:
    case OP_ASSIGN:
    case OP_AT:
    case OP_SHARP:
    case OP_UPPER_BOUND:
    case OP_LOWER_BOUND:
    case OPERATOR:
      t= OperatorChar();
                  image = t.image; pos = t.getPos();
      label_49:
      while (true) {
        if (operatorLA()) {
          ;
        } else {
          break label_49;
        }
        t= OperatorChar();
                          image = image+t.image;
      }
      break;
    case OP_ARROW:
      t= jj_consume_token(OP_ARROW);
                         image = t.image; pos = t.getPos();
      break;
    case OP_IS_THE:
      t= jj_consume_token(OP_IS_THE);
                         image = t.image; pos = t.getPos();
      break;
    case OP_IS_ONE_OF:
      t= jj_consume_token(OP_IS_ONE_OF);
                         image = t.image; pos = t.getPos();
      break;
    case KW_OPERATOR:
      jj_consume_token(KW_OPERATOR);
      switch (jj_nt.kind) {
      case IDENTIFIER:
        t= jj_consume_token(IDENTIFIER);
                pos = t.getPos();
                image = t.image;
        break;
      case ESC_IDENTIFIER:
        t= jj_consume_token(ESC_IDENTIFIER);
                pos = t.getPos();
                image = ConstExpr.source2ascii(t.image.substring(1,t.image.length()-1));
        break;
      case HID_IDENTIFIER:
        t= jj_consume_token(HID_IDENTIFIER);
                pos = t.getPos();
                image = ConstExpr.source2ascii(t.image.substring(4,t.image.length()-2));
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return new EToken(pos, image, ETokenKind.EXPL_OPERATOR);}
    throw new Error("Missing return statement in function");
  }

  final public ENode ExpressionColonComma() throws ParseException {
  ASTExpression e = new ASTExpression(); Token t;
    label_50:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COLON:
        t= jj_consume_token(OP_COLON);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
      case OP_COMMA:
        t= jj_consume_token(OP_COMMA);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
      default:
        if (ExpressionNoNoLA()) {
          ExpressionNoNo(e);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_29(1)) {
        ;
      } else {
        break label_50;
      }
    }
                //if (e.nodes.length == 1)
                //	return ~e.nodes[0];
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ExpressionColon() throws ParseException {
  ASTExpression e = new ASTExpression(); Token t;
    label_51:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COLON:
        t= jj_consume_token(OP_COLON);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
      default:
        if (ExpressionNoNoLA()) {
          ExpressionNoNo(e);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_30(1)) {
        ;
      } else {
        break label_51;
      }
    }
                //if (e.nodes.length == 1)
                //	return ~e.nodes[0];
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ExpressionComma() throws ParseException {
  ASTExpression e = new ASTExpression(); Token t;
    label_52:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:
        t= jj_consume_token(OP_COMMA);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
      default:
        if (ExpressionNoNoLA()) {
          ExpressionNoNo(e);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_31(1)) {
        ;
      } else {
        break label_52;
      }
    }
                //if (e.nodes.length == 1)
                //	return ~e.nodes[0];
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode Expression() throws ParseException {
  ASTExpression e = new ASTExpression();
    label_53:
    while (true) {
      ExpressionNoNo(e);
      if (ExpressionNoNoLA()) {
        ;
      } else {
        break label_53;
      }
    }
                //if (e.nodes.length == 1)
                //	return ~e.nodes[0];
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public void ExpressionNoNo(ASTExpression e) throws ParseException {
  Token t; ENode n;
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      e.nodes += ConstExpression();
      break;
    case IDENTIFIER:
    case ESC_IDENTIFIER:
    case HID_IDENTIFIER:
      e.nodes += Identifier();
      break;
    case OP_LPAREN:
      t= jj_consume_token(OP_LPAREN);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      if (jj_2_32(1)) {
        n = ExpressionColonComma();
                                                     expandExpr(e,n);
      } else {
        ;
      }
      t= jj_consume_token(OP_RPAREN);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      break;
    case OP_LBRACKET:
      t= jj_consume_token(OP_LBRACKET);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      e.nodes += ExpressionColonComma();
      t= jj_consume_token(OP_RBRACKET);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      break;
    case OP_LANGLE:
      t= jj_consume_token(OP_LANGLE);
                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      e.nodes += Type();
      label_54:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:
          ;
          break;
        default:
          break label_54;
        }
        t= jj_consume_token(OP_COMMA);
                                  e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        e.nodes += Type();
      }
      t= jj_consume_token(OP_RANGLE);
                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      break;
    case OP_LRBRACKETS:
      t= jj_consume_token(OP_LRBRACKETS);
                                          e.nodes += new EToken(t.getPos(), "[]", ETokenKind.EXPL_OPERATOR);
      break;
    case OP_DOT:
      t= jj_consume_token(OP_DOT);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      switch (jj_nt.kind) {
      case KW_CLASS:
        t= jj_consume_token(KW_CLASS);
                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
      case KW_NEW:
        t= jj_consume_token(KW_NEW);
                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        e.nodes += Type();
        break;
      case OP_LT:
        t= jj_consume_token(OP_LT);
                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        e.nodes += Type();
        label_55:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:
            ;
            break;
          default:
            break label_55;
          }
          t= jj_consume_token(OP_COMMA);
                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
          e.nodes += Type();
        }
        t= jj_consume_token(OP_GT);
                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
      case OP_LANGLE:
        t= jj_consume_token(OP_LANGLE);
                                                  e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        e.nodes += Type();
        label_56:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:
            ;
            break;
          default:
            break label_56;
          }
          t= jj_consume_token(OP_COMMA);
                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
          e.nodes += Type();
        }
        t= jj_consume_token(OP_RANGLE);
                                                  e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
      default:

      }
      break;
    case KW_NEW:
      NewAny(e);
      break;
    case KW_FUNCTION:
      e.nodes += AnonymouseClosure();
      break;
    case KW_OPERATOR:
    case OP_LT:
    case OP_GT:
    case OP_ASSIGN:
    case OP_IS_THE:
    case OP_IS_ONE_OF:
    case OP_ARROW:
    case OP_AT:
    case OP_SHARP:
    case OP_UPPER_BOUND:
    case OP_LOWER_BOUND:
    case OPERATOR:
      e.nodes += Operator();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NewAny(ASTExpression e) throws ParseException {
  ENode n; TypeRef tp; Token t; Struct clazz;
    t= jj_consume_token(KW_NEW);
                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
    tp = NArrType();
                                  e.nodes += tp;
    switch (jj_nt.kind) {
    case OP_LBRACKET:
    case OP_LRBRACKETS:
      label_57:
      while (true) {
        switch (jj_nt.kind) {
        case OP_LBRACKET:
          t= jj_consume_token(OP_LBRACKET);
                                                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
          n = Expression();
                                                                  expandExpr(e,n);
          t= jj_consume_token(OP_RBRACKET);
                                                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
          break;
        case OP_LRBRACKETS:
          t= jj_consume_token(OP_LRBRACKETS);
                                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch (jj_nt.kind) {
        case OP_LBRACKET:
        case OP_LRBRACKETS:
          ;
          break;
        default:
          break label_57;
        }
      }
      switch (jj_nt.kind) {
      case OP_LBRACE:
        t= jj_consume_token(OP_LBRACE);
                                                                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        if (jj_2_34(1)) {
          n = VariableInitializer();
                                                                          e.nodes += n;
          label_58:
          while (true) {
            if (jj_2_33(2)) {
              ;
            } else {
              break label_58;
            }
            t= jj_consume_token(OP_COMMA);
                                                                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
            n = VariableInitializer();
                                                                          e.nodes += n;
          }
          switch (jj_nt.kind) {
          case OP_COMMA:
            jj_consume_token(OP_COMMA);
            break;
          default:
            ;
          }
        } else {
          ;
        }
        t= jj_consume_token(OP_RBRACE);
                                                                                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
      default:
        ;
      }
      break;
    case OP_LPAREN:
      t= jj_consume_token(OP_LPAREN);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      if (jj_2_35(1)) {
        n = ExpressionColonComma();
                                                     expandExpr(e,n);
      } else {
        ;
      }
      t= jj_consume_token(OP_RPAREN);
                          e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      if (getToken(1).kind == OP_LBRACE) {
                                clazz = mkStruct(null, new JavaAnonymouseClass(), ACC_FINAL, new ASTModifiers(), e);
                                e.nodes += clazz;
        TypeBodyDeclaration(clazz);
      } else {
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public NewClosure AnonymouseClosure() throws ParseException {
  ASTModifiers modifiers; TypeRef ptype; NewClosure nc = new NewClosure(getToken(1).getPos());
    jj_consume_token(KW_FUNCTION);
    jj_consume_token(OP_LPAREN);
    if (getToken(1).kind != OP_RPAREN) {
      modifiers = Modifiers();
      ptype = Type();
      nc.params += FormalParameter(modifiers,ptype);
      label_59:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:
          ;
          break;
        default:
          break label_59;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        ptype = Type();
        nc.params += FormalParameter(modifiers,ptype);
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    jj_consume_token(OP_ARROW);
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("rule")) {
      nc.type_ret = Type();
      nc.body = RuleBlock();
    } else {
      switch (jj_nt.kind) {
      case OP_LPAREN:
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:
        nc.type_ret = Type();
        nc.body = Block();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return nc;}
    throw new Error("Missing return statement in function");
  }

  final public ConstExpr ConstExpression() throws ParseException {
  ConstExpr ce;
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
      ce = IntConstExpression();
      break;
    case LONG_INTEGER_LITERAL:
      ce = LongConstExpression();
      break;
    case FLOATING_POINT_LITERAL:
      ce = FloatConstExpression();
      break;
    case DOUBLE_POINT_LITERAL:
      ce = DoubleConstExpression();
      break;
    case CHARACTER_LITERAL:
      ce = CharConstExpression();
      break;
    case STRING_LITERAL:
      ce = StringConstExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ce;}
    throw new Error("Missing return statement in function");
  }

  final public ConstIntExpr IntConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(INTEGER_LITERAL);
          {if (true) return (ConstIntExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstLongExpr LongConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(LONG_INTEGER_LITERAL);
          {if (true) return (ConstLongExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstFloatExpr FloatConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(FLOATING_POINT_LITERAL);
          {if (true) return (ConstFloatExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstDoubleExpr DoubleConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(DOUBLE_POINT_LITERAL);
          {if (true) return (ConstDoubleExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstCharExpr CharConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(CHARACTER_LITERAL);
          {if (true) return (ConstCharExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstStringExpr StringConstExpression() throws ParseException {
  Token t, t1;
    t= jj_consume_token(STRING_LITERAL);
          {if (true) return (ConstStringExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  final public ENode Statement() throws ParseException {
  ENode st;
    if (jj_2_36(2)) {
      st = LabeledStatement();
    } else {
      switch (jj_nt.kind) {
      case OP_LBRACE:
        st = Block();
        break;
      case KW_SWITCH:
        st = SwitchStatement();
        break;
      case KW_IF:
        st = IfStatement();
        break;
      case KW_WHILE:
        st = WhileStatement();
        break;
      case KW_DO:
        st = DoStatement();
        break;
      case KW_FOR:
        st = ForStatement();
        break;
      case KW_FOREACH:
        st = ForEachStatement();
        break;
      case KW_BREAK:
        st = BreakStatement();
        break;
      case KW_CONTINUE:
        st = ContinueStatement();
        break;
      case KW_RETURN:
        st = ReturnStatement();
        break;
      case KW_THROW:
        st = ThrowStatement();
        break;
      case KW_SYNCHRONIZED:
        st = SynchronizedStatement();
        break;
      case KW_WITH:
        st = WithStatement();
        break;
      case KW_TRY:
        st = TryStatement();
        break;
      case KW_GOTO:
        st = GotoStatement();
        break;
      default:
        st = StatementExpression();
      }
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ENode LabeledStatement() throws ParseException {
  LabeledStat st = new LabeledStat(); Symbol id;
    id = Name();
                      st.lbl.sname = id.sname; st.pos = id.pos;
    jj_consume_token(OP_COLON);
    st.stat = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
  boolean old_declMode;
    jj_consume_token(OP_LBRACE);
                Block bl = new Block();
                bl.pos = getToken(1).getPos();
                old_declMode = declMode;
                declMode = false;
    try {
      label_60:
      while (true) {
        if (jj_2_37(1)) {
          ;
        } else {
          break label_60;
        }
        BlockStatement(Env.getSpacePtr(bl, "stats"));
      }
    } finally {
                    declMode = old_declMode;
    }
    jj_consume_token(OP_RBRACE);
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public RuleBlock RuleBlock() throws ParseException {
  boolean old_declMode;
    jj_consume_token(OP_LBRACE);
                RuleBlock bl = new RuleBlock();
                bl.pos = getToken(1).getPos();
                old_declMode = declMode;
                declMode = false;
    try {
      bl.rnode = RuleOrExpression();
    } finally {
                    declMode = old_declMode;
    }
    jj_consume_token(OP_RBRACE);
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public Block CondBlock() throws ParseException {
                Block bl = new Block();
                bl.pos = getToken(1).getPos();
    switch (jj_nt.kind) {
    case OP_LBRACE:
      jj_consume_token(OP_LBRACE);
      label_61:
      while (true) {
        bl.stats += CondStatement();
        if (jj_2_38(1)) {
          ;
        } else {
          break label_61;
        }
      }
      jj_consume_token(OP_RBRACE);
      break;
    default:
      if (jj_2_39(1)) {
        bl.stats += CondStatement();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public void BlockStatement(SpacePtr stats) throws ParseException {
  boolean old_declMode; ASTModifiers modifiers; TypeRef tp; Var var;
          comments_alone(stats);
    if (jj_2_41(2147483647)) {
      modifiers = Modifiers();
      if (jj_2_40(1)) {
                                  old_declMode = declMode; declMode = true;
        try {
          stats += TypeDeclaration(modifiers, (ASTNode)stats.node);
        } finally {
                                            declMode = old_declMode;
        }
      } else {
        VarDecls(modifiers, stats);
      }
    } else if (jj_2_42(1)) {
                  old_declMode = declMode; declMode = true;
      try {
        stats += TypeDeclaration(new ASTModifiers(), (ASTNode)stats.node);
      } finally {
                            declMode = old_declMode;
      }
    } else if (jj_2_43(2147483647)) {
      VarDecls(new ASTModifiers(), stats);
      jj_consume_token(OP_SEMICOLON);
    } else {
      stats += Statement();
    }
  }

  final public CondStat CondStatement() throws ParseException {
  Token t = getToken(1); CondStat st = new CondStat();
    st.cond = Expression();
    switch (jj_nt.kind) {
    case OP_COLON:
      jj_consume_token(OP_COLON);
                  t = null;
      st.message = Expression();
      break;
    default:
      ;
    }
                if( t != null ) {
                        long pos = t.getPos();
                        StringBuffer sb = new StringBuffer();
                        while( t != null && t != getToken(1) ) {
                                sb.append(t.image).append(' ');
                                t = t.next;
                        }
                        ConstStringExpr e = new ConstStringExpr(sb.toString());
                        e.pos = pos;
                        st.message = e;
                }
    jj_consume_token(OP_SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ENode StatementExpression() throws ParseException {
  ENode st;
    switch (jj_nt.kind) {
    case OP_SEMICOLON:
      jj_consume_token(OP_SEMICOLON);
                      st = new ExprStat(getToken(0).getPos(), null);
      break;
    default:
      if (jj_2_44(1)) {
        st = ExpressionColonComma();
        if (getToken(1).kind == OP_SEMICOLON) {
          jj_consume_token(OP_SEMICOLON);
                              st = new ExprStat(st.pos, st);
        } else {
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStat SwitchStatement() throws ParseException {
  SwitchStat st = new SwitchStat();
    jj_consume_token(KW_SWITCH);
          st.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);
    st.sel = ExpressionColonComma();
    jj_consume_token(OP_RPAREN);
    jj_consume_token(OP_LBRACE);
    label_62:
    while (true) {
      st.cases += CaseStatements(st);
      switch (jj_nt.kind) {
      case KW_CASE:
      case KW_DEFAULT:
        ;
        break;
      default:
        break label_62;
      }
    }
    jj_consume_token(OP_RBRACE);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public CaseLabel CaseStatements(SwitchStat sw) throws ParseException {
  CaseLabel st;
    if (jj_2_45(2147483647)) {
      st = PizzaCase(sw);
    } else {
      switch (jj_nt.kind) {
      case KW_CASE:
      case KW_DEFAULT:
        st = NormalCase(sw);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public CaseLabel NormalCase(SwitchStat sw) throws ParseException {
  CaseLabel c = new CaseLabel(); sw.stats += c;
    switch (jj_nt.kind) {
    case KW_CASE:
      jj_consume_token(KW_CASE);
                          c.pos = getToken(0).getPos();
      c.val = Expression();
      jj_consume_token(OP_COLON);
      break;
    case KW_DEFAULT:
      jj_consume_token(KW_DEFAULT);
                                  c.pos = getToken(0).getPos();
      jj_consume_token(OP_COLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_63:
    while (true) {
      if (jj_2_46(1)) {
        ;
      } else {
        break label_63;
      }
      BlockStatement(Env.getSpacePtr(sw, "stats"));
    }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CaseLabel PizzaCase(SwitchStat sw) throws ParseException {
  Token t; ASTModifiers modifiers; CaseLabel c = new CaseLabel(); sw.stats += c;
    jj_consume_token(KW_CASE);
                          c.pos = getToken(0).getPos();
    c.val = TypeWithArgs();
    jj_consume_token(OP_LPAREN);
    if (getToken(1).kind != OP_RPAREN) {
      modifiers = Modifiers();
      c.pattern += PizzaCaseFormalParameter(modifiers);
      label_64:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:
          ;
          break;
        default:
          break label_64;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        c.pattern += PizzaCaseFormalParameter(modifiers);
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    jj_consume_token(OP_COLON);
    label_65:
    while (true) {
      if (jj_2_47(1)) {
        ;
      } else {
        break label_65;
      }
      BlockStatement(Env.getSpacePtr(sw, "stats"));
    }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public IfElseStat IfStatement() throws ParseException {
  IfElseStat st = new IfElseStat(); EToken not = null;
    jj_consume_token(KW_IF);
          st.pos = getToken(0).getPos();
    if (jj_2_48(2147483647) && (getToken(1).image.equals("!"))) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(OP_LPAREN);
    st.cond = ExpressionColonComma();
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(OP_RPAREN);
    st.thenSt = Statement();
    switch (jj_nt.kind) {
    case KW_ELSE:
      jj_consume_token(KW_ELSE);
      st.elseSt = Statement();
      break;
    default:
      ;
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public WhileStat WhileStatement() throws ParseException {
  WhileStat st = new WhileStat(); EToken not = null;
    jj_consume_token(KW_WHILE);
          st.pos = getToken(0).getPos();
    if (jj_2_49(2147483647) && (getToken(1).image.equals("!"))) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(OP_LPAREN);
    st.cond = ExpressionColonComma();
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(OP_RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public DoWhileStat DoStatement() throws ParseException {
  DoWhileStat st = new DoWhileStat(); EToken not = null;
    jj_consume_token(KW_DO);
          st.pos = getToken(0).getPos();
    st.body = Statement();
    jj_consume_token(KW_WHILE);
    if (jj_2_50(2147483647) && (getToken(1).image.equals("!"))) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(OP_LPAREN);
    st.cond = ExpressionColonComma();
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(OP_RPAREN);
    jj_consume_token(OP_SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public LoopStat ForStatement() throws ParseException {
  ASTModifiers modifiers; ForStat fs = new ForStat(); ForEachStat fe = null;
    jj_consume_token(KW_FOR);
          fs.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);
    if (jj_2_54(1)) {
      if (jj_2_51(2147483647)) {
        modifiers = Modifiers();
        VarDecls(modifiers, Env.getSpacePtr(fs, "inits"));
      } else if (jj_2_52(2147483647)) {
        VarDecls(new ASTModifiers(), Env.getSpacePtr(fs, "inits"));
      } else if (jj_2_53(1)) {
        fs.inits += Expression();
        label_66:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:
            ;
            break;
          default:
            break label_66;
          }
          jj_consume_token(OP_COMMA);
          fs.inits += Expression();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case OP_COLON:
      jj_consume_token(OP_COLON);
                        if (fs.inits.length != 1 || !(fs.inits[0] instanceof Var))
                                rpe("Bad for(:) deflaration",null);
                        ForEachStat fe = new ForEachStat();
                        fe.pos = fs.pos;
                        fe.var = (Var)fs.inits[0].detach();
                        fs = null;
      fe.container = Expression();
      jj_consume_token(OP_RPAREN);
      fe.body = Statement();
                  {if (true) return fe;}
      break;
    case OP_SEMICOLON:
      jj_consume_token(OP_SEMICOLON);
      if (jj_2_55(1)) {
        fs.cond = Expression();
      } else {
        ;
      }
      jj_consume_token(OP_SEMICOLON);
      if (jj_2_56(1)) {
        fs.iter = CommaExpression();
      } else {
        ;
      }
      jj_consume_token(OP_RPAREN);
      fs.body = Statement();
                  {if (true) return fs;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ForEachStat ForEachStatement() throws ParseException {
  ASTModifiers modifiers; ForEachStat st = new ForEachStat();
    jj_consume_token(KW_FOREACH);
          st.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);
    if (jj_2_57(2147483647)) {
      modifiers = Modifiers();
      st.var = PizzaCaseFormalParameter(modifiers);
      jj_consume_token(OP_SEMICOLON);
    } else {
      ;
    }
    st.container = Expression();
    switch (jj_nt.kind) {
    case OP_SEMICOLON:
      jj_consume_token(OP_SEMICOLON);
      st.cond = Expression();
      break;
    default:
      ;
    }
    jj_consume_token(OP_RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ENode GotoStatement() throws ParseException {
  ENode st; ENode expr; SymbolRef id;
    jj_consume_token(KW_GOTO);
    switch (jj_nt.kind) {
    case KW_CASE:
      jj_consume_token(KW_CASE);
                        st = new GotoCaseStat();
                        st.pos = getToken(0).getPos();
      expr = Expression();
                  ((GotoCaseStat)st).expr = expr;
      break;
    case KW_DEFAULT:
      jj_consume_token(KW_DEFAULT);
                        st = new GotoCaseStat();
                        st.pos = getToken(0).getPos();
      break;
    case IDENTIFIER:
    case ESC_IDENTIFIER:
    case HID_IDENTIFIER:
                        st = new GotoStat();
                        st.pos = getToken(0).getPos();
      id = NameRef();
                  ((GotoStat)st).ident = id.name;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OP_SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public BreakStat BreakStatement() throws ParseException {
  SymbolRef id; BreakStat st = new BreakStat();
    jj_consume_token(KW_BREAK);
          st.pos = getToken(0).getPos();
    switch (jj_nt.kind) {
    case IDENTIFIER:
    case ESC_IDENTIFIER:
    case HID_IDENTIFIER:
      id = NameRef();
                       st.ident = id.name;
      break;
    default:
      ;
    }
    jj_consume_token(OP_SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStat ContinueStatement() throws ParseException {
  SymbolRef id; ContinueStat st = new ContinueStat();
    jj_consume_token(KW_CONTINUE);
          st.pos = getToken(0).getPos();
    switch (jj_nt.kind) {
    case IDENTIFIER:
    case ESC_IDENTIFIER:
    case HID_IDENTIFIER:
      id = NameRef();
                       st.ident = id.name;
      break;
    default:
      ;
    }
    jj_consume_token(OP_SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStat ReturnStatement() throws ParseException {
  ReturnStat st = new ReturnStat();
    jj_consume_token(KW_RETURN);
          st.pos = getToken(0).getPos();
    if (jj_2_58(1)) {
      st.expr = ExpressionColonComma();
    } else {
      ;
    }
    jj_consume_token(OP_SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStat ThrowStatement() throws ParseException {
  ThrowStat st = new ThrowStat();
    jj_consume_token(KW_THROW);
          st.pos = getToken(0).getPos();
    st.expr = ExpressionColonComma();
    jj_consume_token(OP_SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStat SynchronizedStatement() throws ParseException {
  SynchronizedStat st = new SynchronizedStat();
    jj_consume_token(KW_SYNCHRONIZED);
          st.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);
    st.expr = ExpressionColonComma();
    jj_consume_token(OP_RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public WithStat WithStatement() throws ParseException {
  WithStat st = new WithStat();
    jj_consume_token(KW_WITH);
          st.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);
    st.expr = ExpressionColonComma();
    jj_consume_token(OP_RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public TryStat TryStatement() throws ParseException {
  ASTModifiers modifiers; TryStat st = new TryStat();
    jj_consume_token(KW_TRY);
          st.pos = getToken(0).getPos();
    st.body = Block();
    label_67:
    while (true) {
      switch (jj_nt.kind) {
      case KW_CATCH:
        ;
        break;
      default:
        break label_67;
      }
      st.catchers += CatchInfo();
    }
    switch (jj_nt.kind) {
    case KW_FINALLY:
      st.finally_catcher = FinallyInfo();
      break;
    default:
      ;
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public CatchInfo CatchInfo() throws ParseException {
  ASTModifiers modifiers; CatchInfo st = new CatchInfo();
    jj_consume_token(KW_CATCH);
          st.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);
    modifiers = Modifiers();
    st.arg = PizzaCaseFormalParameter(modifiers);
    jj_consume_token(OP_RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public FinallyInfo FinallyInfo() throws ParseException {
  Token t; FinallyInfo st = new FinallyInfo();
    jj_consume_token(KW_FINALLY);
          st.pos = getToken(0).getPos();
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(KW_ENUM)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(HID_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(ESC_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(META_INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(KW_FOR)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(META_SETTER)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(META_GETTER)) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(KW_INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(HID_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(KW_DO)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(META_UUID)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(ESC_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(META_THROWS)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(KW_NEW)) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(KW_WHILE)) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(KW_CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_scan_token(OP_LANGLE)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("view");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_109()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_scan_token(OP_LT)) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(KW_NEW)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(KW_CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(META_PACKED)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(META_VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(KW_VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(OP_COMMA)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(KW_IF)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(META_TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(KW_TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_243()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(META_SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(KW_SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(OP_DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(META_NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(OP_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(KW_NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(OP_LRBRACKETS)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(META_FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(KW_FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(OP_COMMA)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(META_ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(OP_LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_scan_token(OP_RPAREN)) return true;
    if (jj_scan_token(OP_ARROW)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(KW_ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(OP_LANGLE)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(META_STATIC)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(KW_STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(META_MACRO)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(OP_LBRACKET)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(META_VIRTUAL)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(META_UNERASABLE)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(META_FORWARD)) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(META_MIXIN)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(OP_DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(OP_DOT)) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(META_SINGLETON)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(OP_LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    if (jj_scan_token(OP_RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(OP_LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_3R_206()) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    return false;
  }

  final private boolean jj_3R_241() {
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(OP_COMMA)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(KW_CASE)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(OP_LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(OP_DOT)) return true;
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    if (jj_3R_94()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_259()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(OP_DOT)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(2).image.equals("*");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(KW_EXTENDS)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(OPERATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("super");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_97() {
    Token xsp;
    if (jj_3R_129()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = ExpressionNoNoLA();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_89()) return true;
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(OP_COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(KW_PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(META_PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(KW_PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(KW_IMPORT)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(META_PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(KW_PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(KW_SWITCH)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(META_PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(META_ACCESS1)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == OPERATOR && getToken(1).image.equals("?");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_254()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_255()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_scan_token(OP_SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = ExpressionNoNoLA();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_87()) return true;
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(OP_COLON)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(KW_PACKAGE)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == OP_LT || getToken(1).kind == OP_LANGLE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) return true;
    }
    return false;
  }

  final private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  final private boolean jj_3R_165() {
    Token xsp;
    if (jj_3_30()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(OP_COMMA)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = ExpressionNoNoLA();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_85()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(OP_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_94()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(OP_DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    if (jj_3_29()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_94()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).image.equals("_");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_scan_token(HID_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(OP_COMMA)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_scan_token(ESC_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==OP_AT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_73()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(KW_OPERATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(OP_IS_ONE_OF)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_DOT)) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(OP_IS_THE)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(OP_ARROW)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(OP_LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    if (jj_scan_token(OP_RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_250()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_DOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(KW_TYPE)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) return true;
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_DOT)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    Token xsp;
    if (jj_3R_79()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(KW_TYPE)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_206()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_207()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_179()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_scan_token(KW_TRY)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==KW_IMPORT && getToken(2).kind==IDENTIFIER && getToken(2).image.equals("syntax");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(KW_WITH)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_77()) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(KW_SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(OP_LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(KW_THROW)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(KW_RETURN)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_3R_236()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_235()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_233()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(OP_LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_232()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_231()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(KW_CONTINUE)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_230()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_227()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_226()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_225()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(OP_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_223()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(KW_BREAK)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_LBRACE)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(OP_LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(OP_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(DOUBLE_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(KW_GOTO)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(OP_LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(LONG_INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_249()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_247()) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_246()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(KW_FOREACH)) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(HID_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(ESC_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_94()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(OP_DOT)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(OP_AT)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_77()) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(OP_COMMA)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(KW_FUNCTION)) return true;
    if (jj_scan_token(OP_LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_90()) return true;
    return false;
  }

  public TokenManager token_source;
  public Token token;
  public Token jj_nt;
  private Token jj_scanpos;
  private Token jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;


  public kiev050(TokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(TokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}

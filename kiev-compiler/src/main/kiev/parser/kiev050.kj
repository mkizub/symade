/* kiev050.java */
/* Generated By:JavaCC: Do not edit this line. kiev050.java */
/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.parser;

/*{
import syntax kiev.Syntax;
}*/

public abstract class kiev050 extends ParserBase implements kiev050Constants {

        public Token consume(int kind) throws ParseException {
            return jj_consume_token(kind);
        }

        public final boolean expect(int kind) throws ParseException {
                Token t = jj_nt;
                if (t.kind != kind)
                        return false;
                jj_consume_token(kind);
                return true;
        }

        private boolean operatorLA() {
                Token t0 = getToken(0);
                Token t1 = getToken(1);
                if (t1.specialToken != null)
                        return false;
                switch (t1.kind) {
                case OP_ARROW:
                case OP_LT:
                case OP_GT:
                case OP_ASSIGN:
                case OP_AT:
                case OP_SHARP:
                case OP_UPPER_BOUND:
                case OP_LOWER_BOUND:
                case OPERATOR:
                        return true;
                }
                return false;
        }

        private boolean ExpressionNoNoLA() {
                switch (getToken(1).kind) {
                case OP_RPAREN:
                case OP_RBRACE:
                case OP_RBRACKET:
                case OP_SEMICOLON:
                case OP_COLON:
                case OP_COMMA:
                        return false;
                }
                return true;
        }

        void comments_alone(SpacePtr arr) {
                Comment[] comments = get_comments();
                if (comments == null || comments.length == 0)
                        return;
                for (int i=0; i < comments.length; i++)
                        arr += comments[i];
        }
        //void comments_before(ASTNode node) {
        //	Comment[] comments = get_comments();
        //	if (comments == null || comments.length == 0)
        //		return;
        //	for (int i=0; i < comments.length; i++)
        //		Comment.ATTR_COMMENT.add(node, comments[i]);
        //}

        Comment[] get_comments() {
                Token t0 = getToken(0);
                Token t1 = getToken(1);
                Token st = t1.specialToken;
                if (st == null)
                        return null;
                Comment[] comments = new Comment[0];
                t1.specialToken = null;
                while (st.specialToken != null)
                        st = st.specialToken;
                for (; st != null; st = st.next) {
                        if (st.kind == SINGLE_LINE_COMMENT) {
                                String text = st.image.substring(2);
                                text = text.trim();
                                if (comments.length > 0 && (comments[comments.length-1].mode == CommentMode.LINE || comments[comments.length-1].mode == CommentMode.EOLINE)) {
                                        Comment c = comments[comments.length-1];
                                        c.elems.append(new TextLine(text));
                                } else {
                                        Comment c = new Comment();
                                        c.mode = CommentMode.EOLINE;
                                        c.elems.append(new TextLine(text));
                                        if (st.specialToken != null) {
                                                if (st.beginLine > st.specialToken.endLine)
                                                        c.mode = CommentMode.LINE;
                                        } else {
                                                if (st.beginLine < t0.endLine)
                                                        c.mode = CommentMode.LINE;
                                        }
                                        comments = (Comment[])Arrays.append(comments, c);
                                }
                        }
                        else if (st.kind == FORMAL_COMMENT || st.kind == MULTI_LINE_COMMENT) {
                                String text = (st.kind == FORMAL_COMMENT) ?
                                                st.image.substring(3, st.image.length()-5)
                                        :       st.image.substring(2, st.image.length()-4);
                                String[] lines = text.trim().split("\n");
                                for (int i=0; i < lines.length; i++) {
                                        String l = lines[i].trim();
                                        if (l.length() >= 1 && l.charAt(0) == '*') {
                                                l = l.substring(1);
                                                l = l.trim();
                                        }
                                        lines[i] = l;
                                }
                                boolean nl = false;
                                Comment c = new Comment();
                                for (int i=0; i < lines.length; i++)
                                        c.elems.append(new TextLine(lines[i].trim()));

                                if (st.specialToken != null) {
                                        if (st.beginLine > st.specialToken.endLine)
                                                nl = true;
                                } else {
                                        if (st.beginLine < t0.endLine)
                                                nl = true;
                                }

                                if (st.next != null) {
                                        if (st.endLine < st.next.beginLine)
                                                nl = true;
                                } else {
                                        if (st.endLine < t1.beginLine)
                                                nl = true;
                                }
                                if (st.kind == FORMAL_COMMENT)
                                        c.mode = CommentMode.DOCUMENTATION;
                                else if (nl)
                                        c.mode = CommentMode.FLOW;
                                else
                                        c.mode = CommentMode.INLINE;
                                comments = (Comment[])Arrays.append(comments, c);
                        }
                }
                return comments;
        }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public 
FileUnit FileUnit(String filename) throws ParseException {FileUnit oldFileUnit; SymbolRef pkg;
oldFileUnit = curFileUnit;
                FileUnit fu = FileUnit.makeFile(filename, curEnv.proj, false);
                curFileUnit = fu;
                declMode = true;
                ASTModifiers modifiers;
    try {
      label_1:
      while (true) {
        if (jj_2_1(1)) {
          ;
        } else {
          break label_1;
        }
        if (getToken(1).kind==KW_IMPORT && getToken(2).kind==IDENTIFIER && getToken(2).image.equals("syntax")) {
          fu.syntaxes += ImportSyntax();
        } else if (jj_2_2(2147483647)) {
          pkg = Package();
if (fu.srpkg.name == null) {
                                        fu.srpkg.symbol = pkg.symbol;
                                        fu.srpkg.pos = pkg.pos;
                                } else
                                        reportError(pkg,"Duplicate package declaration "+pkg);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      TopLevelDeclarations(fu);
fu.line_count = getToken(0).endLine;
      jj_consume_token(0);
    } catch (ParseError e) {
rpe("Bad declaration",e);
    } catch (Throwable e) {
rperr(e);
    } finally {
curFileUnit = oldFileUnit;
                declMode = true;
                {if (true) return fu;}
    }
    throw new Error("Missing return statement in function");
}

  final public NameSpace NameSpaceDeclaration(ASTModifiers modifiers, SyntaxScope parent) throws ParseException {NameSpace ns = new NameSpace(); SymbolRef sr;
declMode = true;
    try {
      if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("namespace")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      if (parent.getPackage() instanceof KievRoot) {
        sr = QName();
ns.srpkg.name = sr.name; ns.srpkg.pos = sr.pos;
      } else if (identLA()) {
        sr = NameRef();
ns.srpkg.name = sr.name; ns.srpkg.pos = sr.pos;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
parent.members += ns;
      jj_consume_token(OP_LBRACE);
      TopLevelDeclarations(ns);
      jj_consume_token(OP_RBRACE);
    } catch (ParseError e) {
rpe("Bad declaration",e);
    } catch (Throwable e) {
rperr(e);
    } finally {
declMode = true;
                {if (true) return ns;}
    }
    throw new Error("Missing return statement in function");
}

  final public void TopLevelDeclarations(SyntaxScope ss) throws ParseException {ASTModifiers modifiers; SpacePtr ss_members = Env.getSpacePtr(ss, "members");
    label_2:
    while (true) {
      if (!oneOfLA(OP_RBRACE, EOF)) {
        ;
      } else {
        break label_2;
      }
comments_alone(ss_members);
      modifiers = Modifiers();
      switch (jj_nt.kind) {
      case KW_IMPORT:{
        ss.members += Import(modifiers);
        break;
        }
      case KW_TYPE:
      case KW_TYPEDEF:{
        ss.members += Typedef(modifiers);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        if (jj_2_3(1)) {
          ss.members += TypeDeclaration(modifiers, ss);
          switch (jj_nt.kind) {
          case OP_SEMICOLON:{
            jj_consume_token(OP_SEMICOLON);
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            ;
          }
        } else if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("namespace")) {
          NameSpaceDeclaration(modifiers, ss);
          switch (jj_nt.kind) {
          case OP_SEMICOLON:{
            jj_consume_token(OP_SEMICOLON);
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            ;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
comments_alone(ss_members);
}

  final public ASTModifiers Modifiers() throws ParseException {
ASTModifiers n = new ASTModifiers();
    label_3:
    while (true) {
      if (jj_2_4(1)) {
        ;
      } else {
        break label_3;
      }
      switch (jj_nt.kind) {
      case KW_ABSTRACT:
      case KW_FINAL:
      case KW_NATIVE:
      case KW_STATIC:
      case KW_SYNCHRONIZED:
      case KW_TRANSIENT:
      case KW_VOLATILE:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_GETTER:
      case META_SETTER:{
        SpecialAnnotation(n);
        break;
        }
      case META_ACCESS1:
      case META_PUBLIC:
      case KW_PUBLIC:
      case META_PROTECTED:
      case KW_PROTECTED:
      case META_PRIVATE:
      case KW_PRIVATE:{
        Access(n);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        if (oneOfLA(OP_AT)) {
          n += Annotation();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if (true) return n;}
    throw new Error("Missing return statement in function");
}

  final public SymbolRef Package() throws ParseException {SymbolRef qn;
    jj_consume_token(KW_PACKAGE);
    qn = QName();
    jj_consume_token(OP_SEMICOLON);
qn.symbol = curEnv.newPackage(qn.name).symbol;
                {if (true) return qn;}
    throw new Error("Missing return statement in function");
}

  final public ImportSyntax ImportSyntax() throws ParseException {SymbolRef qname;
    jj_consume_token(KW_IMPORT);
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    qname = QName();
    jj_consume_token(OP_SEMICOLON);
ImportSyntax imp = new ImportSyntax();
                imp.name.name = qname.name;
                imp.name.qualified = true;
                imp.pos = qname.pos;
                {if (true) return imp;}
    throw new Error("Missing return statement in function");
}

  final public Import Import(ASTModifiers modifiers) throws ParseException {Import imp = new ImportImpl(); SymbolRef name;
    jj_consume_token(KW_IMPORT);
    switch (jj_nt.kind) {
    case KW_STATIC:{
      jj_consume_token(KW_STATIC);
imp = new ImportStatic();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    name = QName();
imp.name.name = name.name; imp.name.pos = name.pos;
    if (jj_2_7(1)) {
      if (jj_2_6(2147483647) && (getToken(2).image.equals("*"))) {
        jj_consume_token(OP_DOT);
        jj_consume_token(OPERATOR);
if (imp instanceof ImportImpl)
                                imp.star = true;
                        else if (imp instanceof ImportStatic)
                                imp.star = true;
      } else {
        switch (jj_nt.kind) {
        case OP_LPAREN:{
          jj_consume_token(OP_LPAREN);
ImportMethod im = new ImportMethod();
                        int p = imp.name.name.indexOf('\u00b7');
                        String nm;
                        String meth;
                        if (p < 0) {
                                nm = "";
                                meth = imp.name.name;
                        } else {
                                nm = imp.name.name.substring(0,p);
                                meth = imp.name.name.substring(0,p+1);
                        }
                        im.name.name = nm;
                        im.method.name = meth;
                        im.name.pos = imp.pos;
                        im.method.pos = getToken(0).getPos();
                        imp = im;
          if (jj_2_5(1)) {
            im.args += Type();
            label_4:
            while (true) {
              switch (jj_nt.kind) {
              case OP_COMMA:{
                ;
                break;
                }
              default:
                jj_la1[5] = jj_gen;
                break label_4;
              }
              jj_consume_token(OP_COMMA);
              im.args += Type();
            }
          } else {
            ;
          }
          jj_consume_token(OP_RPAREN);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
    jj_consume_token(OP_SEMICOLON);
{if (true) return imp;}
    throw new Error("Missing return statement in function");
}

  final public TypeAssign Typedef(ASTModifiers modifiers) throws ParseException {Symbol id; TypeAssign ta; TypeRef tr; Token t; EToken et;
    switch (jj_nt.kind) {
    case KW_TYPEDEF:{
      jj_consume_token(KW_TYPEDEF);
      break;
      }
    case KW_TYPE:{
      jj_consume_token(KW_TYPE);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    tr = Type();
    id = Name();
ta = mkTypeAssign(id.pos, id.sname, modifiers, null); ta.super_types += tr;
    jj_consume_token(OP_SEMICOLON);
{if (true) return ta;}
    throw new Error("Missing return statement in function");
}

  final public Struct TypeDeclaration(ASTModifiers modifiers, ASTNode parent) throws ParseException {Struct clazz; Symbol name; TypeConstr[] args;
    switch (jj_nt.kind) {
    case KW_CLASS:{
      jj_consume_token(KW_CLASS);
      name = Name();
if (modifiers.isSymadeNode())
                                clazz = mkStruct(name, new SymadeNode(), 0, modifiers, parent);
                        else
                                clazz = mkStruct(name, new JavaClass(), 0, modifiers, parent);
      switch (jj_nt.kind) {
      case OP_LT:
      case LANGLE:{
        args = ClazzArguments(clazz);
clazz.args.addAll(args);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case KW_EXTENDS:{
        jj_consume_token(KW_EXTENDS);
        clazz.super_types += Type();
        label_5:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
          jj_consume_token(OP_COMMA);
          clazz.super_types += Type();
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case KW_IMPLEMENTS:{
        jj_consume_token(KW_IMPLEMENTS);
        clazz.super_types += Type();
        label_6:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_6;
          }
          jj_consume_token(OP_COMMA);
          clazz.super_types += Type();
        }
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
      }
    case KW_INTERFACE:{
      jj_consume_token(KW_INTERFACE);
      name = Name();
if (modifiers.isSymadeNode())
                                clazz = mkStruct(name, new SymadeNode(), AccessFlags.ACC_INTERFACE, modifiers, parent);
                        else
                                clazz = mkStruct(name, new JavaClass(), AccessFlags.ACC_INTERFACE, modifiers, parent);
      switch (jj_nt.kind) {
      case OP_LT:
      case LANGLE:{
        args = ClazzArguments(clazz);
clazz.args.addAll(args);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case KW_EXTENDS:{
        jj_consume_token(KW_EXTENDS);
        clazz.super_types += Type();
        label_7:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            break label_7;
          }
          jj_consume_token(OP_COMMA);
          clazz.super_types += Type();
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
      }
    case META_INTERFACE:{
      jj_consume_token(META_INTERFACE);
      name = Name();
clazz = mkStruct(name, new JavaAnnotation(), AccessFlags.ACC_INTERFACE|AccessFlags.ACC_ANNOTATION, modifiers, parent);
      break;
      }
    case KW_ENUM:{
      jj_consume_token(KW_ENUM);
      name = Name();
clazz = mkStruct(name, new JavaEnum(), AccessFlags.ACC_ENUM|AccessFlags.ACC_STATIC, modifiers, parent);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("view")) {
        jj_consume_token(IDENTIFIER);
        // "view"
                        name = Name();
clazz = mkStruct(name, new KievView(), AccessFlags.ACC_VIRTUAL, modifiers, parent);
                        KievView kview = (KievView)clazz;
        switch (jj_nt.kind) {
        case OP_LT:
        case LANGLE:{
          args = ClazzArguments(clazz);
clazz.args.addAll(args);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("of")) {

        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(IDENTIFIER);
        // "of"
                        kview.view_of = NArrType();
        switch (jj_nt.kind) {
        case KW_EXTENDS:{
          jj_consume_token(KW_EXTENDS);
          clazz.super_types += Type();
          label_8:
          while (true) {
            switch (jj_nt.kind) {
            case OP_COMMA:{
              ;
              break;
              }
            default:
              jj_la1[17] = jj_gen;
              break label_8;
            }
            jj_consume_token(OP_COMMA);
            clazz.super_types += Type();
          }
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        switch (jj_nt.kind) {
        case KW_IMPLEMENTS:{
          jj_consume_token(KW_IMPLEMENTS);
          clazz.super_types += Type();
          label_9:
          while (true) {
            switch (jj_nt.kind) {
            case OP_COMMA:{
              ;
              break;
              }
            default:
              jj_la1[19] = jj_gen;
              break label_9;
            }
            jj_consume_token(OP_COMMA);
            clazz.super_types += Type();
          }
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    TypeBodyDeclaration(clazz);
{if (true) return clazz;}
    throw new Error("Missing return statement in function");
}

  final public void TypeBodyDeclaration(ComplexTypeDecl clazz) throws ParseException {ASTModifiers modifiers; SpacePtr clazz_members = Env.getSpacePtr(clazz, "members"); Struct sub_struct;
    jj_consume_token(OP_LBRACE);
    if (clazz.isEnum()) {
JavaEnum enum_clazz = (JavaEnum)clazz;
      modifiers = Modifiers();
      enum_clazz.enum_fields += EnumFieldDeclaration(modifiers);
      label_10:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        enum_clazz.enum_fields += EnumFieldDeclaration(modifiers);
      }
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } else {
      ;
    }
    label_11:
    while (true) {
      if (!oneOfLA(OP_RBRACE)) {
        ;
      } else {
        break label_11;
      }
comments_alone(clazz_members);
      modifiers = Modifiers();
      if (oneOfLA(OP_LBRACE)) {
        clazz.members += Initializer(modifiers);
      } else {
        switch (jj_nt.kind) {
        case KW_INVARIANT:{
          clazz.members += InvariantDeclaration(modifiers);
          switch (jj_nt.kind) {
          case OP_SEMICOLON:{
            jj_consume_token(OP_SEMICOLON);
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          if (jj_2_8(1)) {
            sub_struct     = TypeDeclaration(modifiers, clazz);
if (!sub_struct.isAttached()) clazz.members += sub_struct; else assert(clazz.members.indexOf(sub_struct) >= 0);
            switch (jj_nt.kind) {
            case OP_SEMICOLON:{
              jj_consume_token(OP_SEMICOLON);
              break;
              }
            default:
              jj_la1[25] = jj_gen;
              ;
            }
          } else {
            switch (jj_nt.kind) {
            case KW_TYPE:
            case KW_TYPEDEF:{
              clazz.members += MemberArgDecl(modifiers,clazz);
              break;
              }
            case KW_CASE:{
              sub_struct     = CaseTypeDeclaration(modifiers, clazz);
if (!sub_struct.isAttached()) clazz.members += sub_struct; else assert(clazz.members.indexOf(sub_struct) >= 0);
              break;
              }
            default:
              jj_la1[27] = jj_gen;
              if (jj_2_9(3) && (getToken(1).image.equals("rule"))) {
                clazz.members += RuleDeclaration(modifiers);
              } else {
                clazz.members += FieldOrMethodDecl(modifiers, clazz);
              }
            }
          }
        }
      }
    }
comments_alone(clazz_members);
    jj_consume_token(OP_RBRACE);
}

  final public DNode FieldOrMethodDecl(ASTModifiers modifiers, ComplexTypeDecl clazz) throws ParseException {TypeConstr[] args; TypeRef dtype; DNode res = null;
    switch (jj_nt.kind) {
    case OP_LT:
    case LANGLE:{
      args = ClazzArguments(null);
      if (getToken(1).kind == IDENTIFIER && getToken(2).kind == OP_LPAREN) {
        // LOOKAHEAD (<IDENTIFIER> "(")
                                res = ConstructorDeclaration(modifiers, args, clazz);
      } else if (jj_2_10(1)) {
        dtype = Type();
        res = MethodDeclaration(modifiers, args, dtype);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      if (getToken(1).kind == IDENTIFIER && getToken(2).kind == OP_LPAREN) {
        // LOOKAHEAD (<IDENTIFIER> "(")
                        res = ConstructorDeclaration(modifiers, null, clazz);
      } else {
        dtype = Type();
        if (getToken(1).kind == IDENTIFIER && getToken(2).kind == OP_LPAREN) {
          // LOOKAHEAD (<IDENTIFIER> "(")
                                  res = MethodDeclaration(modifiers, null, dtype);
        } else {
          res = FieldDecl(modifiers, dtype);
        }
      }
    }
{if (true) return res;}
    throw new Error("Missing return statement in function");
}

  final public Field EnumFieldDeclaration(ASTModifiers modifiers) throws ParseException {Symbol id; Field f; NewEnumExpr ne;
    id = Name();
f = mkEnumField(id, modifiers);
    switch (jj_nt.kind) {
    case OP_COLON:{
      jj_consume_token(OP_COLON);
      f.alt_enum_id = StringConstExpression();
      break;
      }
    case OP_LPAREN:{
      jj_consume_token(OP_LPAREN);
ne = new NewEnumExpr(); f.init = ne;
      if (!oneOfLA(OP_RPAREN)) {
        ne.args += ExpressionColon();
        label_12:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            break label_12;
          }
          jj_consume_token(OP_COMMA);
          ne.args += ExpressionColon();
        }
      } else {
        ;
      }
      jj_consume_token(OP_RPAREN);
      break;
      }
    default:
      jj_la1[30] = jj_gen;

    }
{if (true) return f;}
    throw new Error("Missing return statement in function");
}

  final public Struct CaseTypeDeclaration(ASTModifiers modifiers, ComplexTypeDecl parent) throws ParseException {Symbol name; PizzaCase clazz; TypeConstr[] args;
    jj_consume_token(KW_CASE);
    name = Name();
clazz = (PizzaCase)mkStruct(name, new PizzaCase(), AccessFlags.ACC_STATIC|AccessFlags.ACC_FINAL, modifiers, parent);
    switch (jj_nt.kind) {
    case OP_LT:
    case LANGLE:{
      args = ClazzArguments(clazz);
clazz.args.addAll(args);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case OP_LPAREN:{
      jj_consume_token(OP_LPAREN);
      if (!oneOfLA(OP_RPAREN)) {
        modifiers = Modifiers();
        clazz.case_fields += CaseTypeField(modifiers);
        label_13:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[32] = jj_gen;
            break label_13;
          }
          jj_consume_token(OP_COMMA);
          modifiers = Modifiers();
          clazz.case_fields += CaseTypeField(modifiers);
        }
      } else {
        ;
      }
      jj_consume_token(OP_RPAREN);
      jj_consume_token(OP_SEMICOLON);
      break;
      }
    case OP_SEMICOLON:{
      jj_consume_token(OP_SEMICOLON);
clazz.metas.add(new MetaSingleton());
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return clazz;}
    throw new Error("Missing return statement in function");
}

  final public TypeConstr[] ClazzArguments(DNode dn) throws ParseException {TypeConstr[] args = new TypeConstr[0]; TypeConstr arg;
    switch (jj_nt.kind) {
    case OP_LT:{
      jj_consume_token(OP_LT);
      break;
      }
    case LANGLE:{
      jj_consume_token(LANGLE);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    arg = ArgumentDeclaration(dn);
args = (TypeConstr[])Arrays.append(args,arg);
    label_14:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_14;
      }
      jj_consume_token(OP_COMMA);
      arg = ArgumentDeclaration(dn);
args = (TypeConstr[])Arrays.append(args,arg);
    }
    switch (jj_nt.kind) {
    case OP_GT:{
      jj_consume_token(OP_GT);
      break;
      }
    case RANGLE:{
      jj_consume_token(RANGLE);
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return args;}
    throw new Error("Missing return statement in function");
}

  final public TypeDef MemberArgDecl(ASTModifiers modifiers, DNode dn) throws ParseException {Symbol name; TypeDef arg; TypeRef t;
    switch (jj_nt.kind) {
    case KW_TYPEDEF:{
      jj_consume_token(KW_TYPEDEF);
      break;
      }
    case KW_TYPE:{
      jj_consume_token(KW_TYPE);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name      = Name();
    switch (jj_nt.kind) {
    case OP_ASSIGN:{
      jj_consume_token(OP_ASSIGN);
arg = mkTypeAssign(name.pos,name.sname,modifiers,dn);
      t = Type();
arg.super_types += t;
      jj_consume_token(OP_SEMICOLON);
      break;
      }
    case OP_UPPER_BOUND:
    case OP_LOWER_BOUND:{
arg = mkTypeConstr(name.pos,name.sname,modifiers,dn);
      label_15:
      while (true) {
        switch (jj_nt.kind) {
        case OP_UPPER_BOUND:{
          jj_consume_token(OP_UPPER_BOUND);
          t = Type();
arg.super_types.add(t);
          break;
          }
        case OP_LOWER_BOUND:{
          jj_consume_token(OP_LOWER_BOUND);
          t = Type();
arg.lower_bound.add(t);
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch (jj_nt.kind) {
        case OP_UPPER_BOUND:
        case OP_LOWER_BOUND:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_15;
        }
      }
      jj_consume_token(OP_SEMICOLON);
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return arg;}
    throw new Error("Missing return statement in function");
}

  final public TypeConstr ArgumentDeclaration(DNode dn) throws ParseException {ASTModifiers modifiers; Symbol name; TypeConstr arg; TypeRef tr; TypeVariance variance = null;
    modifiers = Modifiers();
    if (jj_2_11(2147483647)) {
      jj_consume_token(OPERATOR);
String img = getToken(0).image;
                        if (img.equals("+"))
                                variance = TypeVariance.CO_VARIANT;
                        else if (img.equals("-"))
                                variance = TypeVariance.CONTRA_VARIANT;
                        else if (img.equals("*"))
                                variance = TypeVariance.IN_VARIANT;
    } else {
      ;
    }
    name      = Name();
arg = mkTypeConstr(name.pos,name.sname,modifiers,dn); arg.setAbstract(true);
                if (variance != null)
                        arg.variance = variance;
    switch (jj_nt.kind) {
    case KW_EXTENDS:{
      jj_consume_token(KW_EXTENDS);
      tr = Type();
arg.super_types.add(tr);
      label_16:
      while (true) {
        if (jj_2_12(2147483647) && (getToken(1).image.equals("&"))) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(OPERATOR);
        tr = Type();
arg.super_types.add(tr);
      }
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("super")) {
      jj_consume_token(IDENTIFIER);
      tr = Type();
arg.lower_bound.add(tr);
      label_17:
      while (true) {
        if (jj_2_13(2147483647) && (getToken(1).image.equals("&"))) {
          ;
        } else {
          break label_17;
        }
        jj_consume_token(OPERATOR);
        tr = Type();
arg.lower_bound.add(tr);
      }
    } else {
      ;
    }
    label_18:
    while (true) {
      switch (jj_nt.kind) {
      case OP_UPPER_BOUND:
      case OP_LOWER_BOUND:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_18;
      }
      switch (jj_nt.kind) {
      case OP_UPPER_BOUND:{
        jj_consume_token(OP_UPPER_BOUND);
        tr = Type();
arg.super_types.add(tr);
        break;
        }
      case OP_LOWER_BOUND:{
        jj_consume_token(OP_LOWER_BOUND);
        tr = Type();
arg.lower_bound.add(tr);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if (true) return arg;}
    throw new Error("Missing return statement in function");
}

  final public void Access(ASTModifiers modifiers) throws ParseException {int acc;      int accflags = 0; int offset = 6; MetaAccess ma;
    switch (jj_nt.kind) {
    case META_ACCESS1:{
      jj_consume_token(META_ACCESS1);
ma = new MetaAccess();
      break;
      }
    case META_PUBLIC:{
      jj_consume_token(META_PUBLIC);
ma = new MetaAccess("public");
      break;
      }
    case KW_PUBLIC:{
      jj_consume_token(KW_PUBLIC);
ma = new MetaAccess("public");
      break;
      }
    case META_PROTECTED:{
      jj_consume_token(META_PROTECTED);
ma = new MetaAccess("protected");
      break;
      }
    case KW_PROTECTED:{
      jj_consume_token(KW_PROTECTED);
ma = new MetaAccess("protected");
      break;
      }
    case META_PRIVATE:{
      jj_consume_token(META_PRIVATE);
ma = new MetaAccess("private");
      break;
      }
    case KW_PRIVATE:{
      jj_consume_token(KW_PRIVATE);
ma = new MetaAccess("private");
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case OP_COLON:
    case OP_LPAREN:{
      switch (jj_nt.kind) {
      case OP_COLON:{
        jj_consume_token(OP_COLON);
        acc = AccessSpec();
for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
        switch (jj_nt.kind) {
        case OP_COMMA:{
          jj_consume_token(OP_COMMA);
          acc = AccessSpec();
for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
          switch (jj_nt.kind) {
          case OP_COMMA:{
            jj_consume_token(OP_COMMA);
            acc = AccessSpec();
for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
            switch (jj_nt.kind) {
            case OP_COMMA:{
              jj_consume_token(OP_COMMA);
              acc = AccessSpec();
for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
              break;
              }
            default:
              jj_la1[45] = jj_gen;
              ;
            }
            break;
            }
          default:
            jj_la1[46] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          ;
        }
ma.flags = accflags;
        break;
        }
      case OP_LPAREN:{
        jj_consume_token(OP_LPAREN);
        acc = AccessSpec();
for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
        switch (jj_nt.kind) {
        case OP_COMMA:{
          jj_consume_token(OP_COMMA);
          acc = AccessSpec();
for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
          switch (jj_nt.kind) {
          case OP_COMMA:{
            jj_consume_token(OP_COMMA);
            acc = AccessSpec();
for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
            switch (jj_nt.kind) {
            case OP_COMMA:{
              jj_consume_token(OP_COMMA);
              acc = AccessSpec();
for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
              break;
              }
            default:
              jj_la1[48] = jj_gen;
              ;
            }
            break;
            }
          default:
            jj_la1[49] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        jj_consume_token(OP_RPAREN);
ma.flags = accflags;
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      ;
    }
if (ma.flags != -1)
                        modifiers += ma;
                else if (ma.simple == "public")
                        modifiers += new MetaPublic();
                else if (ma.simple == "protected")
                        modifiers += new MetaProtected();
                else if (ma.simple == "private")
                        modifiers += new MetaPrivate();
}

  final public int AccessSpec() throws ParseException {
    switch (jj_nt.kind) {
    case KW_ACC_RO:{
      jj_consume_token(KW_ACC_RO);
{if (true) return 2;}
      break;
      }
    case KW_ACC_WO:{
      jj_consume_token(KW_ACC_WO);
{if (true) return 1;}
      break;
      }
    case KW_ACC_RW:{
      jj_consume_token(KW_ACC_RW);
{if (true) return 3;}
      break;
      }
    case KW_ACC_NO:{
      jj_consume_token(KW_ACC_NO);
{if (true) return 0;}
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void SpecialAnnotation(ASTModifiers modifiers) throws ParseException {MetaPacked mp; MetaThrows mthr; MetaUUID muuid; TypeNameRef thr; ConstIntExpr ice; ConstStringExpr cs; SymbolRef nr;
    switch (jj_nt.kind) {
    case META_SINGLETON:{
      jj_consume_token(META_SINGLETON);
modifiers += new MetaSingleton();
      break;
      }
    case META_MIXIN:{
      jj_consume_token(META_MIXIN);
modifiers += new MetaMixin();
      break;
      }
    case META_FORWARD:{
      jj_consume_token(META_FORWARD);
modifiers += new MetaForward();
      break;
      }
    case META_UNERASABLE:{
      jj_consume_token(META_UNERASABLE);
modifiers += new MetaUnerasable();
      break;
      }
    case META_VIRTUAL:{
      jj_consume_token(META_VIRTUAL);
modifiers += new MetaVirtual();
      break;
      }
    case META_MACRO:{
      jj_consume_token(META_MACRO);
modifiers += new MetaMacro();
      break;
      }
    case KW_STATIC:{
      jj_consume_token(KW_STATIC);
modifiers += new MetaStatic();
      break;
      }
    case META_STATIC:{
      jj_consume_token(META_STATIC);
modifiers += new MetaStatic();
      break;
      }
    case KW_ABSTRACT:{
      jj_consume_token(KW_ABSTRACT);
modifiers += new MetaAbstract();
      break;
      }
    case META_ABSTRACT:{
      jj_consume_token(META_ABSTRACT);
modifiers += new MetaAbstract();
      break;
      }
    case KW_FINAL:{
      jj_consume_token(KW_FINAL);
modifiers += new MetaFinal();
      break;
      }
    case META_FINAL:{
      jj_consume_token(META_FINAL);
modifiers += new MetaFinal();
      break;
      }
    case KW_NATIVE:{
      jj_consume_token(KW_NATIVE);
modifiers += new MetaNative();
      break;
      }
    case META_NATIVE:{
      jj_consume_token(META_NATIVE);
modifiers += new MetaNative();
      break;
      }
    case KW_SYNCHRONIZED:{
      jj_consume_token(KW_SYNCHRONIZED);
modifiers += new MetaSynchronized();
      break;
      }
    case META_SYNCHRONIZED:{
      jj_consume_token(META_SYNCHRONIZED);
modifiers += new MetaSynchronized();
      break;
      }
    case KW_TRANSIENT:{
      jj_consume_token(KW_TRANSIENT);
modifiers += new MetaTransient();
      break;
      }
    case META_TRANSIENT:{
      jj_consume_token(META_TRANSIENT);
modifiers += new MetaTransient();
      break;
      }
    case KW_VOLATILE:{
      jj_consume_token(KW_VOLATILE);
modifiers += new MetaVolatile();
      break;
      }
    case META_VOLATILE:{
      jj_consume_token(META_VOLATILE);
modifiers += new MetaVolatile();
      break;
      }
    case META_PACKED:{
      jj_consume_token(META_PACKED);
mp = new MetaPacked();
      switch (jj_nt.kind) {
      case OP_LPAREN:{
        jj_consume_token(OP_LPAREN);
        ice = IntConstExpression();
mp.size = ice.value;
        switch (jj_nt.kind) {
        case OP_COMMA:{
          jj_consume_token(OP_COMMA);
          nr  = NameRef();
mp.fld = (SymbolRef<Field>)nr;
          jj_consume_token(OP_COMMA);
          ice = IntConstExpression();
mp.offset = ice.value;
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        jj_consume_token(OP_RPAREN);
        break;
        }
      case OP_COLON:{
        jj_consume_token(OP_COLON);
        ice = IntConstExpression();
mp.size = ice.value;
        switch (jj_nt.kind) {
        case OP_COMMA:{
          jj_consume_token(OP_COMMA);
          nr  = NameRef();
mp.fld = (SymbolRef<Field>)nr;
          jj_consume_token(OP_COMMA);
          ice = IntConstExpression();
mp.offset = ice.value;
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[56] = jj_gen;

      }
modifiers += mp;
      break;
      }
    case META_THROWS:{
      jj_consume_token(META_THROWS);
mthr = new MetaThrows();
      thr = TypeQName();
mthr.add(thr);
      label_19:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          break label_19;
        }
        jj_consume_token(OP_COMMA);
        thr = TypeQName();
mthr.add(thr);
      }
modifiers += mthr;
      break;
      }
    case META_UUID:{
      jj_consume_token(META_UUID);
muuid = new MetaUUID();
      jj_consume_token(OP_LPAREN);
      cs = StringConstExpression();
      jj_consume_token(OP_RPAREN);
muuid.value = cs.value; modifiers += muuid;
      break;
      }
    case META_GETTER:{
      jj_consume_token(META_GETTER);
modifiers += new MetaGetter();
      break;
      }
    case META_SETTER:{
      jj_consume_token(META_SETTER);
modifiers += new MetaSetter();
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public UserMeta Annotation() throws ParseException {SymbolRef id; MetaValue v;
UserMeta n = new UserMeta();
    jj_consume_token(OP_AT);
    id = QName();
n.pos = id.pos;  n.decl.name = id.name;
    if (oneOfLA(OP_LPAREN)) {
      jj_consume_token(OP_LPAREN);
      if (!oneOfLA(OP_RPAREN)) {
        if (jj_2_15(2147483647)) {
          AnnotationValues(n);
        } else {
          v = AnnotationValueAny(new SymbolRef("value"));
n.set(v);
        }
      } else {
        ;
      }
      jj_consume_token(OP_RPAREN);
    } else {
      ;
    }
{if (true) return n;}
    throw new Error("Missing return statement in function");
}

  final public void AnnotationValues(UserMeta m) throws ParseException {SymbolRef id; MetaValue v;
    id = NameRef();
    jj_consume_token(OP_ASSIGN);
    v = AnnotationValueAny(id);
m.set(v);
    label_21:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        break label_21;
      }
      jj_consume_token(OP_COMMA);
      id = NameRef();
      jj_consume_token(OP_ASSIGN);
      v = AnnotationValueAny(id);
v.ident = id.name; v.pos = id.pos; m.set(v);
    }
}

  final public MetaValue AnnotationValueAny(SymbolRef id) throws ParseException {ASTNode n; MetaValue v;
    if (jj_2_16(2147483647)) {
      n = Annotation();
v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
    } else {
      switch (jj_nt.kind) {
      case OP_LBRACE:{
        v = AnnotationValueValueArrayInitializer(id);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        n = Expression();
v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
      }
    }
{if (true) return v;}
    throw new Error("Missing return statement in function");
}

  final public MetaValueScalar AnnotationValueScalar(SymbolRef id) throws ParseException {ASTNode n; MetaValueScalar v;
    if (jj_2_17(2147483647)) {
      n = Annotation();
v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
    } else {
      n = Expression();
v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
    }
{if (true) return v;}
    throw new Error("Missing return statement in function");
}

  final public MetaValueArray AnnotationValueValueArrayInitializer(SymbolRef id) throws ParseException {MetaValueScalar n; MetaValueArray v;
v = new MetaValueArray(id);
    jj_consume_token(OP_LBRACE);
    if (!oneOfLA(OP_RBRACE)) {
      n = AnnotationValueScalar(null);
v.values.add(~n.value);
      label_22:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          break label_22;
        }
        jj_consume_token(OP_COMMA);
        n = AnnotationValueScalar(null);
v.values.add(~n.value);
      }
    } else {
      ;
    }
    jj_consume_token(OP_RBRACE);
{if (true) return v;}
    throw new Error("Missing return statement in function");
}

  final public Field FieldDecl(ASTModifiers modifiers, TypeRef dtype) throws ParseException {boolean old_declMode; Symbol id; ENode init; Field fld;
old_declMode = declMode;
                declMode = false;
                init = null;
    try {
      id = Name();
      switch (jj_nt.kind) {
      case OP_ASSIGN:{
        jj_consume_token(OP_ASSIGN);
        init = VariableInitializer();
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        ;
      }
fld = mkField(id, modifiers, dtype, init);
      jj_consume_token(OP_SEMICOLON);
{if (true) return fld;}
    } finally {
declMode = old_declMode;
    }
    throw new Error("Missing return statement in function");
}

  final public void RuleLocalVarDecls(ASTModifiers modifiers, RuleMethod meth) throws ParseException {TypeRef dtype;
    dtype = Type();
    meth.localvars += RuleVarDecl(modifiers, dtype, true);
    label_23:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        break label_23;
      }
      jj_consume_token(OP_COMMA);
      meth.localvars += RuleVarDecl(modifiers, dtype, false);
    }
    jj_consume_token(OP_SEMICOLON);
}

  final public LVar RuleVarDecl(ASTModifiers modifiers, TypeRef dtype, boolean first) throws ParseException {Token t; Symbol id; LVar lv;
    id = Name();
lv = mkRuleVar(id, modifiers, dtype, first);
    switch (jj_nt.kind) {
    case OP_ASSIGN:{
      jj_consume_token(OP_ASSIGN);
      lv.init = VariableInitializer();
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      ;
    }
{if (true) return lv;}
    throw new Error("Missing return statement in function");
}

  final public void VarDecls(ASTModifiers modifiers, SpacePtr stats) throws ParseException {boolean old_declMode; TypeRef dtype; Symbol id; ENode init; Var var;
old_declMode = declMode;
                declMode = false;
                init = null;
                var = null;
    try {
      dtype = Type();
      id = Name();
      switch (jj_nt.kind) {
      case OP_ASSIGN:{
        jj_consume_token(OP_ASSIGN);
        init = VariableInitializer();
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        ;
      }
var = mkVar(id, new ASTModifiers(), dtype);
                        modifiers.copyToNode(var);
                        var.init = init;
                        stats += var;
      label_24:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          break label_24;
        }
        jj_consume_token(OP_COMMA);
init = null;
        id = Name();
        switch (jj_nt.kind) {
        case OP_ASSIGN:{
          jj_consume_token(OP_ASSIGN);
          init = VariableInitializer();
          break;
          }
        default:
          jj_la1[70] = jj_gen;
          ;
        }
var = mkVar(id, new ASTModifiers(), new Copier().copyFull(dtype));
                                modifiers.copyToNode(var);
                                var.init = init;
                                stats += var;
      }
    } finally {
declMode = old_declMode;
    }
}

  final public ENode VariableInitializer() throws ParseException {ENode e;
    switch (jj_nt.kind) {
    case OP_LBRACE:{
      e = ArrayInitializer();
      break;
      }
    default:
      jj_la1[71] = jj_gen;
      e = ExpressionColon();
    }
{if (true) return e;}
    throw new Error("Missing return statement in function");
}

  final public ENode ArrayInitializer() throws ParseException {NewInitializedArrayExpr e = new NewInitializedArrayExpr(); e.pos = getToken(1).getPos();
    jj_consume_token(OP_LBRACE);
    if (jj_2_19(2)) {
      e.args += VariableInitializer();
      label_25:
      while (true) {
        if (jj_2_18(2)) {
          ;
        } else {
          break label_25;
        }
        jj_consume_token(OP_COMMA);
        e.args += VariableInitializer();
      }
      switch (jj_nt.kind) {
      case OP_COMMA:{
        jj_consume_token(OP_COMMA);
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        ;
      }
    } else {
      ;
    }
    jj_consume_token(OP_RBRACE);
{if (true) return e;}
    throw new Error("Missing return statement in function");
}

  final public Field CaseTypeField(ASTModifiers modifiers) throws ParseException {Token t; TypeRef tp; Symbol id;
    tp = Type();
    id = Name();
{if (true) return mkCaseField(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
}

  final public Var PatternParameter(ASTModifiers modifiers) throws ParseException {Token t; TypeRef tp; Symbol id;
    if (getToken(1).image.equals("_")) {
      id = Name();
tp = new TypeRef(curEnv.tenv.tpVoid); tp.pos = id.pos;
    } else if (paramDeclLA()) {
      tp = Type();
      id = Name();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return mkVar(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
}

  final public LVar MethodFormalParameter(ASTModifiers modifiers, TypeRef tp) throws ParseException {Token t; TypeRef st=null; Symbol id;
    switch (jj_nt.kind) {
    case OP_COLON:{
      jj_consume_token(OP_COLON);
      st = Type();
      break;
      }
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    id = Name();
{if (true) return mkFormPar(id, modifiers, tp, st);}
    throw new Error("Missing return statement in function");
}

  final public LVar MethodVarargsParameter(ASTModifiers modifiers, TypeRef tp) throws ParseException {Token t; Symbol id = null;
    t = jj_consume_token(OP_VARARGS);
    switch (jj_nt.kind) {
    case IDENTIFIER:
    case ESC_IDENTIFIER:
    case HID_IDENTIFIER:{
      id = Name();
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      ;
    }
if (tp == null)
                        tp = makeTypeExpr(new TypeRef(curEnv.tenv.tpObject), t);
                else
                        tp = makeTypeExpr(tp, t);
                tp.pos = t.getPos();
                if (id == null) {
                        id = new Symbol(t.getPos(), Constants.nameVarArgs);
                }
                {if (true) return mkVarargPar(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
}

  final public LVar FormalParameter(ASTModifiers modifiers, TypeRef tp) throws ParseException {Token t; Symbol id;
    id = Name();
{if (true) return mkFormPar(id, modifiers, tp, null);}
    throw new Error("Missing return statement in function");
}

  final public MetaThrows Throws() throws ParseException {MetaThrows n = new MetaThrows(); TypeNameRef thr;
    jj_consume_token(KW_THROWS);
    thr = TypeQName();
n.add(thr);
    label_26:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        break label_26;
      }
      jj_consume_token(OP_COMMA);
      thr = TypeQName();
n.add(thr);
    }
{if (true) return n;}
    throw new Error("Missing return statement in function");
}

  final public Alias MethodAlias(Method m) throws ParseException {Alias a; Symbol s; SymbolRef id; EToken op; ConstIntExpr ce; ConstStringExpr cs;
    switch (jj_nt.kind) {
    case KW_ALIAS:{
      jj_consume_token(KW_ALIAS);
      switch (jj_nt.kind) {
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:{
        s = Name();
a = new Alias(s.sname, m); a.pos = s.pos;
        break;
        }
      case KW_OPERATOR:{
        jj_consume_token(KW_OPERATOR);
        cs = StringConstExpression();
a = new OperatorAlias(cs.value, m); a.pos = cs.pos;
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case KW_OPERATOR:{
      jj_consume_token(KW_OPERATOR);
      cs = StringConstExpression();
a = new OperatorAlias(cs.value, m); a.pos = cs.pos;
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return a;}
    throw new Error("Missing return statement in function");
}

  final public void SkipBlock() throws ParseException {
    if (interface_only) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OP_LBRACE);
Token tk = getToken(0);
                int depth = 1;
                do {
                        tk = getNextToken();
                        if( tk.kind == OP_LBRACE ) depth++;
                        else if( tk.kind == OP_RBRACE ) depth--;
                } while( depth > 0 );
}

  final public Method MethodDeclaration(ASTModifiers modifiers, TypeConstr[] args, TypeRef ret) throws ParseException {Token t; Method m; Symbol id; ConstStringExpr cor; MetaThrows thr; TypeRef ptype;
    id = Name();
m = mkMethod(id,modifiers,ret);
                if (args != null)
                        m.targs.addAll(args);
    jj_consume_token(OP_LPAREN);
    if (!oneOfLA(OP_RPAREN)) {
      modifiers = Modifiers();
      ptype = Type();
      switch (jj_nt.kind) {
      case OP_COLON:
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:{
        m.params += MethodFormalParameter(modifiers,ptype);
        break;
        }
      case OP_VARARGS:{
        m.params += MethodVarargsParameter(modifiers,ptype);
m.setVarArgs(true);
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_27:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[79] = jj_gen;
          break label_27;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        ptype = Type();
        switch (jj_nt.kind) {
        case OP_COLON:
        case IDENTIFIER:
        case ESC_IDENTIFIER:
        case HID_IDENTIFIER:{
          m.params += MethodFormalParameter(modifiers,ptype);
          break;
          }
        case OP_VARARGS:{
          m.params += MethodVarargsParameter(modifiers,ptype);
m.setVarArgs(true);
          break;
          }
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    label_28:
    while (true) {
      if (oneOfLA(KW_ALIAS, KW_OPERATOR, KW_THROWS, KW_REQUIRE, KW_ENSURE)) {
        ;
      } else {
        break label_28;
      }
      switch (jj_nt.kind) {
      case KW_ALIAS:
      case KW_OPERATOR:{
        m.aliases += MethodAlias(m);
        break;
        }
      case KW_THROWS:{
        thr = Throws();
m.setMeta(thr);
        break;
        }
      case KW_REQUIRE:{
        m.conditions += RequareDeclaration();
        break;
        }
      case KW_ENSURE:{
        m.conditions += EnsureDeclaration();
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (getToken(1).kind == OP_LBRACE && interface_only) {
      SkipBlock();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        ;
      }
    } else if (getToken(1).kind == OP_LBRACE) {
      m.body = Block();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case KW_DEFAULT:{
        jj_consume_token(KW_DEFAULT);
        m.body = AnnotationValueAny(new SymbolRef(getToken(0).getPos(),m));
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if (true) return m;}
    throw new Error("Missing return statement in function");
}

  final public Constructor ConstructorDeclaration(ASTModifiers modifiers, TypeConstr[] args, ComplexTypeDecl clazz) throws ParseException {Token t; Constructor m; Symbol id; MetaThrows thr; TypeRef ptype;
    id = Name();
if( !id.sname.equals(clazz.sname) )
                        reportError(id,"Return type missed or bad constructor name "+id);
                m = mkConstructor(id,modifiers);
                if (args != null)
                        m.targs.addAll(args);
    jj_consume_token(OP_LPAREN);
    if (!oneOfLA(OP_RPAREN)) {
      modifiers = Modifiers();
      ptype = Type();
      switch (jj_nt.kind) {
      case OP_COLON:
      case IDENTIFIER:
      case ESC_IDENTIFIER:
      case HID_IDENTIFIER:{
        m.params += MethodFormalParameter(modifiers,ptype);
        break;
        }
      case OP_VARARGS:{
        m.params += MethodVarargsParameter(modifiers,ptype);
m.setVarArgs(true);
        break;
        }
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_29:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          break label_29;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        ptype = Type();
        switch (jj_nt.kind) {
        case OP_COLON:
        case IDENTIFIER:
        case ESC_IDENTIFIER:
        case HID_IDENTIFIER:{
          m.params += MethodFormalParameter(modifiers,ptype);
          break;
          }
        case OP_VARARGS:{
          m.params += MethodVarargsParameter(modifiers,ptype);
m.setVarArgs(true);
          break;
          }
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    label_30:
    while (true) {
      if (oneOfLA(KW_ALIAS, KW_OPERATOR, KW_THROWS, KW_REQUIRE, KW_ENSURE)) {
        ;
      } else {
        break label_30;
      }
      switch (jj_nt.kind) {
      case KW_ALIAS:
      case KW_OPERATOR:{
        m.aliases += MethodAlias(m);
        break;
        }
      case KW_THROWS:{
        thr = Throws();
m.setMeta(thr);
        break;
        }
      case KW_REQUIRE:{
        m.conditions += RequareDeclaration();
        break;
        }
      case KW_ENSURE:{
        m.conditions += EnsureDeclaration();
        break;
        }
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (oneOfLA(OP_LBRACE) && interface_only) {
      SkipBlock();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[89] = jj_gen;
        ;
      }
    } else if (oneOfLA(OP_LBRACE)) {
      m.body = Block();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if (true) return m;}
    throw new Error("Missing return statement in function");
}

  final public WBCCondition RequareDeclaration() throws ParseException {Symbol id;
WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondRequire;
    jj_consume_token(KW_REQUIRE);
    if (jj_2_20(2147483647)) {
      jj_consume_token(OP_LBRACKET);
      id = Name();
n.sname = id.sname;
      jj_consume_token(OP_RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_21(2147483647)) {
      id     = Name();
n.sname = id.sname;
      n.body = CondBlock();
    } else {
      n.body = CondBlock();
    }
{if (true) return n;}
    throw new Error("Missing return statement in function");
}

  final public WBCCondition EnsureDeclaration() throws ParseException {Symbol id;
WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondEnsure;
    jj_consume_token(KW_ENSURE);
    if (jj_2_22(2147483647)) {
      jj_consume_token(OP_LBRACKET);
      id = Name();
n.sname = id.sname;
      jj_consume_token(OP_RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_23(2147483647)) {
      id     = Name();
n.sname = id.sname;
      n.body = CondBlock();
    } else {
      n.body = CondBlock();
    }
{if (true) return n;}
    throw new Error("Missing return statement in function");
}

  final public WBCCondition InvariantDeclaration(ASTModifiers modifiers) throws ParseException {Symbol id;
WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondInvariant;
    jj_consume_token(KW_INVARIANT);
    if (jj_2_24(2147483647)) {
      jj_consume_token(OP_LBRACKET);
      id = Name();
n.sname = id.sname;
      jj_consume_token(OP_RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_25(2147483647)) {
      id     = Name();
n.sname = id.sname;
      n.body = CondBlock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return n;}
    throw new Error("Missing return statement in function");
}

  final public RuleMethod RuleDeclaration(ASTModifiers modifiers) throws ParseException {RuleBlock bl; RuleMethod m; Symbol id; TypeRef ptype; MetaThrows thr;
    jj_consume_token(IDENTIFIER);
    // "rule"
            id = Name();
m = mkRuleMethod(id, modifiers, new TypeRef(curEnv.tenv.tpRule));
    jj_consume_token(OP_LPAREN);
    if (!oneOfLA(OP_RPAREN)) {
      modifiers = Modifiers();
      ptype = Type();
      m.params += FormalParameter(modifiers,ptype);
      label_31:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[92] = jj_gen;
          break label_31;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        ptype = Type();
        m.params += FormalParameter(modifiers,ptype);
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    label_32:
    while (true) {
      if (oneOfLA(KW_ALIAS, KW_OPERATOR, KW_THROWS, KW_REQUIRE, KW_ENSURE) || modifiersLA() || varDeclsLA()) {
        ;
      } else {
        break label_32;
      }
      switch (jj_nt.kind) {
      case KW_ALIAS:
      case KW_OPERATOR:{
        m.aliases    += MethodAlias(m);
        break;
        }
      case KW_REQUIRE:{
        m.conditions += RequareDeclaration();
        break;
        }
      case KW_ENSURE:{
        m.conditions += EnsureDeclaration();
        break;
        }
      case KW_THROWS:{
        thr           = Throws();
m.setMeta(thr);
        break;
        }
      default:
        jj_la1[93] = jj_gen;
        modifiers = Modifiers();
        RuleLocalVarDecls(modifiers,m);
      }
    }
    if (oneOfLA(OP_LBRACE) && interface_only) {
      SkipBlock();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[94] = jj_gen;
        ;
      }
    } else if (oneOfLA(OP_LBRACE)) {
      m.body = RuleBlock();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[95] = jj_gen;
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if (true) return m;}
    throw new Error("Missing return statement in function");
}

  final public Initializer Initializer(ASTModifiers modifiers) throws ParseException {Initializer n = mkInitializer(getToken(0).getPos(),modifiers);
    if (oneOfLA(OP_LBRACE) && interface_only) {
      SkipBlock();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[97] = jj_gen;
        ;
      }
    } else {
      n.body = Block();
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        jj_consume_token(OP_SEMICOLON);
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        ;
      }
    }
{if (true) return n;}
    throw new Error("Missing return statement in function");
}

/*
 * Type, name and expression syntax follows.
 */
  final public 

TypeRef Type() throws ParseException {TypeRef res;
    if (closureTypeLA()) {
      res = ClosureType();
    } else if (pathTypeLA()) {
      res = PathType();
    } else {
      res = TypeExpr();
    }
{if (true) return res;}
    throw new Error("Missing return statement in function");
}

  final public TypeRef TypeExpr() throws ParseException {TypeRef res; Token t;
    res = TypeWithArgs();
    label_33:
    while (true) {
      switch (jj_nt.kind) {
      case OP_AT:
      case OP_SHARP:
      case OP_LRBRACKETS:
      case OP_SUPERSCRIPT_PLUS:
      case OP_SUPERSCRIPT_MINUS:
      case OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        break label_33;
      }
      switch (jj_nt.kind) {
      case OP_AT:
      case OP_SHARP:
      case OP_SUPERSCRIPT_PLUS:
      case OP_SUPERSCRIPT_MINUS:
      case OPERATOR:{
        t = TypeOperatorChar();
        break;
        }
      case OP_LRBRACKETS:{
        t = jj_consume_token(OP_LRBRACKETS);
        break;
        }
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
res = makeTypeExpr(res,t);
    }
{if (true) return res;}
    throw new Error("Missing return statement in function");
}

  final public PathTypeRef PathType() throws ParseException {Token t; ENode e;
    t = jj_consume_token(IDENTIFIER);
e = new EToken(t,ETokenKind.MAYBE_IDENTIFIER);
    jj_consume_token(OP_DOT);
    label_34:
    while (true) {
      switch (jj_nt.kind) {
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[101] = jj_gen;
        break label_34;
      }
      t = jj_consume_token(IDENTIFIER);
e = new AccessExpr(t.getPos(),e,new EToken(t,ETokenKind.MAYBE_IDENTIFIER).ident);
      jj_consume_token(OP_DOT);
    }
    t= jj_consume_token(KW_TYPE);
PathTypeRef tr = new PathTypeRef(e); tr.pos = t.getPos(); {if (true) return tr;}
    throw new Error("Missing return statement in function");
}

  final public TypeNameRef TypeQName() throws ParseException {SymbolRef id; TypeNameRef res;
    id = NameRef();
res = new TypeNameRef(id.name); res.pos = id.pos;
    label_35:
    while (true) {
      if (jj_2_26(2147483647)) {
        ;
      } else {
        break label_35;
      }
      jj_consume_token(OP_DOT);
      id = NameRef();
res.ident = res.ident + '\u00b7' + id.name;
    }
{if (true) return res;}
    throw new Error("Missing return statement in function");
}

  final public TypeRef TypeWithWildcard() throws ParseException {TypeRef res;
    if (getToken(1).kind == OPERATOR && getToken(1).image.equals("?")) {
      jj_consume_token(OPERATOR);
      switch (jj_nt.kind) {
      case KW_EXTENDS:{
        jj_consume_token(KW_EXTENDS);
        res = Type();
res = new TypeExpr(res, Operator.PostTypeWildcardCoVariant, null);
        break;
        }
      default:
        jj_la1[102] = jj_gen;
        if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("super")) {
          jj_consume_token(IDENTIFIER);
          res = Type();
res = new TypeExpr(res, Operator.PostTypeWildcardContraVariant, null);
        } else {
res = new TypeExpr(curEnv.tenv.tpObject, Operator.PostTypeWildcardCoVariant, null); res.pos = getToken(0).getPos();
        }
      }
    } else if (jj_2_27(1)) {
      res = Type();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return res;}
    throw new Error("Missing return statement in function");
}

  final public TypeRef TypeWithArgs() throws ParseException {SymbolRef qname; TypeRef res; TypeRef arg;

    qname = QName();
    if (oneOfLA(OP_LT, OP_LANGLE)) {
      switch (jj_nt.kind) {
      case OP_LT:{
        jj_consume_token(OP_LT);
        break;
        }
      case OP_LANGLE:{
        jj_consume_token(OP_LANGLE);
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
res = new TypeNameArgsRef(qname.name);
      if (getToken(1).kind == OPERATOR && getToken(1).image.equals("?")) {
        jj_consume_token(OPERATOR);
        switch (jj_nt.kind) {
        case KW_EXTENDS:{
          jj_consume_token(KW_EXTENDS);
          arg = Type();
res.args += new TypeExpr(arg, Operator.PostTypeWildcardCoVariant, null);
          break;
          }
        default:
          jj_la1[104] = jj_gen;
          if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("super")) {
            jj_consume_token(IDENTIFIER);
            arg = Type();
res.args += new TypeExpr(arg, Operator.PostTypeWildcardContraVariant, null);
          } else {
res.args += new TypeExpr(curEnv.tenv.tpObject, Operator.PostTypeWildcardCoVariant, null);
          }
        }
      } else if (jj_2_28(1)) {
        res.args += Type();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_36:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[105] = jj_gen;
          break label_36;
        }
        jj_consume_token(OP_COMMA);
        res.args += Type();
      }
      switch (jj_nt.kind) {
      case OP_GT:{
        jj_consume_token(OP_GT);
        break;
        }
      case OP_RANGLE:{
        jj_consume_token(OP_RANGLE);
        break;
        }
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_37:
      while (true) {
        if (jj_2_29(2147483647)) {
          ;
        } else {
          break label_37;
        }
        jj_consume_token(OP_DOT);
        qname = QName();
res = new TypeInnerNameRef(res, qname.name);
        switch (jj_nt.kind) {
        case OP_LT:{
          jj_consume_token(OP_LT);
          break;
          }
        case OP_LANGLE:{
          jj_consume_token(OP_LANGLE);
          break;
          }
        default:
          jj_la1[107] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        res.args += Type();
        label_38:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[108] = jj_gen;
            break label_38;
          }
          jj_consume_token(OP_COMMA);
          res.args += Type();
        }
        switch (jj_nt.kind) {
        case OP_GT:{
          jj_consume_token(OP_GT);
          break;
          }
        case OP_RANGLE:{
          jj_consume_token(OP_RANGLE);
          break;
          }
        default:
          jj_la1[109] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
res = new TypeNameRef(qname.name);
    }
{if (true) return res;}
    throw new Error("Missing return statement in function");
}

  final public TypeRef NArrType() throws ParseException {TypeRef res; Token t;
    res = TypeWithArgs();
    label_39:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_39;
      }
      switch (jj_nt.kind) {
      case OP_AT:
      case OP_SHARP:
      case OP_SUPERSCRIPT_PLUS:
      case OP_SUPERSCRIPT_MINUS:
      case OPERATOR:{
        t = TypeOperatorChar();
res = makeTypeExpr(res,t);
        break;
        }
      case OP_LRBRACKETS:{
        t = jj_consume_token(OP_LRBRACKETS);
res = makeTypeExpr(res,t);
        t = TypeOperatorChar();
res = makeTypeExpr(res,t);
        break;
        }
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if (true) return res;}
    throw new Error("Missing return statement in function");
}

  final public TypeRef ClosureType() throws ParseException {Token t; TypeClosureRef n = new TypeClosureRef();
    t= jj_consume_token(OP_LPAREN);
n.pos = t.getPos();
    if (!oneOfLA(OP_RPAREN)) {
      n.args += Type();
      label_40:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[111] = jj_gen;
          break label_40;
        }
        jj_consume_token(OP_COMMA);
        n.args += Type();
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    jj_consume_token(OP_ARROW);
    n.ret = Type();
{if (true) return n;}
    throw new Error("Missing return statement in function");
}

  final public LVarExpr Var() throws ParseException {Token t; LVarExpr id;
    switch (jj_nt.kind) {
    case IDENTIFIER:{
      t= jj_consume_token(IDENTIFIER);
id = new LVarExpr();
                id.pos = t.getPos();
                id.ident = t.image;
                {if (true) return id;}
      break;
      }
    case ESC_IDENTIFIER:{
      t= jj_consume_token(ESC_IDENTIFIER);
id = new LVarExpr();
                id.pos = t.getPos();
                id.ident = ConstExpr.source2ascii(t.image.substring(1,t.image.length()-1));
                {if (true) return id;}
      break;
      }
    case HID_IDENTIFIER:{
      t= jj_consume_token(HID_IDENTIFIER);
id = new LVarExpr();
                id.pos = t.getPos();
                id.ident = ConstExpr.source2ascii(t.image.substring(4,t.image.length()-2));
                {if (true) return id;}
      break;
      }
    default:
      jj_la1[112] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Symbol Name() throws ParseException {Token t; Symbol id;
    switch (jj_nt.kind) {
    case IDENTIFIER:{
      t= jj_consume_token(IDENTIFIER);
id = new Symbol();
                id.pos = t.getPos();
        id.sname = t.image;
                {if (true) return id;}
      break;
      }
    case ESC_IDENTIFIER:{
      t= jj_consume_token(ESC_IDENTIFIER);
id = new Symbol();
                id.pos = t.getPos();
                id.sname = ConstExpr.source2ascii(t.image.substring(1,t.image.length()-1));
                {if (true) return id;}
      break;
      }
    case HID_IDENTIFIER:{
      t= jj_consume_token(HID_IDENTIFIER);
id = new Symbol();
                id.pos = t.getPos();
                id.sname = ConstExpr.source2ascii(t.image.substring(4,t.image.length()-2));
                {if (true) return id;}
      break;
      }
    default:
      jj_la1[113] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  SymbolRef NameRef() throws ParseException {return parseSymbolRef();
  }

  SymbolRef QName() throws ParseException {return parseQualifiedSymbolRef();
  }

  final public EToken Identifier() throws ParseException {Token t;
    switch (jj_nt.kind) {
    case IDENTIFIER:{
      t= jj_consume_token(IDENTIFIER);
{if (true) return new EToken(t,ETokenKind.MAYBE_IDENTIFIER);}
      break;
      }
    case ESC_IDENTIFIER:{
      t= jj_consume_token(ESC_IDENTIFIER);
{if (true) return new EToken(t,ETokenKind.MAYBE_IDENTIFIER);}
      break;
      }
    case HID_IDENTIFIER:{
      t= jj_consume_token(HID_IDENTIFIER);
{if (true) return new EToken(t,ETokenKind.MAYBE_IDENTIFIER);}
      break;
      }
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
 * Expression syntax follows.
 */
  final public 
ENode CommaExpression() throws ParseException {ENode e; CommaExpr ce = null;
    e = Expression();
    label_41:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[115] = jj_gen;
        break label_41;
      }
      jj_consume_token(OP_COMMA);
if (ce==null) ce = new CommaExpr(e);
      ce.exprs += Expression();
    }
{if (true) return ce == null ? e : ce;}
    throw new Error("Missing return statement in function");
}

  final public ASTRuleNode RuleOrExpression() throws ParseException {ASTRuleNode e; RuleOrExpr r = null;
    e = RuleAndExpression();
    label_42:
    while (true) {
      switch (jj_nt.kind) {
      case OP_SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[116] = jj_gen;
        break label_42;
      }
      jj_consume_token(OP_SEMICOLON);
if (r==null) { r = new RuleOrExpr(e); r.pos = getToken(0).getPos();}
      r.rules += RuleAndExpression();
    }
{if (true) return r == null ? e : r;}
    throw new Error("Missing return statement in function");
}

  final public ASTRuleNode RuleAndExpression() throws ParseException {ASTRuleNode e; RuleAndExpr r = null;
    e = RuleExpression();
    label_43:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[117] = jj_gen;
        break label_43;
      }
      jj_consume_token(OP_COMMA);
if (r==null) { r = new RuleAndExpr(e); r.pos = getToken(0).getPos();}
      r.rules += RuleExpression();
    }
{if (true) return r == null ? e : r;}
    throw new Error("Missing return statement in function");
}

  final public ASTRuleNode RuleExpression() throws ParseException {ASTRuleNode r;
    if (getToken(1).kind == IDENTIFIER
                     && getToken(2).kind == OP_IS_THE) {
      r = RuleIstheExpression();
    } else if (getToken(1).kind == IDENTIFIER
                     && getToken(2).kind == OP_IS_ONE_OF) {
      r = RuleIsoneofExpression();
    } else {
      switch (jj_nt.kind) {
      case KW_PCUT:{
        r = RuleCutExpression();
        break;
        }
      case OP_LBRACE:{
        jj_consume_token(OP_LBRACE);
        if (!oneOfLA(OP_RBRACE)) {
          r = RuleOrExpression();
        } else {
r = new RuleExpr();
        }
        jj_consume_token(OP_RBRACE);
        break;
        }
      case KW_WHILE:{
        jj_consume_token(KW_WHILE);
r = new RuleWhileExpr();
        r.expr = Expression();
        switch (jj_nt.kind) {
        case OP_COLON:{
          jj_consume_token(OP_COLON);
          r.bt_expr = Expression();
          break;
          }
        default:
          jj_la1[118] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[120] = jj_gen;
r = new RuleExpr();
        if (oneOfLA(OP_RBRACE)) {

        } else if (jj_2_31(1)) {
          r.expr = Expression();
          switch (jj_nt.kind) {
          case OP_COLON:{
            jj_consume_token(OP_COLON);
            r.bt_expr = Expression();
            break;
            }
          default:
            jj_la1[119] = jj_gen;
            ;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if (true) return r;}
    throw new Error("Missing return statement in function");
}

  final public RuleIstheExpr RuleIstheExpression() throws ParseException {Token t; RuleIstheExpr r = new RuleIstheExpr();
    r.var = Var();
    t = jj_consume_token(OP_IS_THE);
r.pos = t.getPos();
    r.expr = Expression();
{if (true) return r;}
    throw new Error("Missing return statement in function");
}

  final public RuleIsoneofExpr RuleIsoneofExpression() throws ParseException {Token t; RuleIsoneofExpr r = new RuleIsoneofExpr();
    r.var = Var();
    t = jj_consume_token(OP_IS_ONE_OF);
r.pos = t.getPos();
    r.expr = Expression();
{if (true) return r;}
    throw new Error("Missing return statement in function");
}

  final public RuleCutExpr RuleCutExpression() throws ParseException {RuleCutExpr r = new RuleCutExpr();
    jj_consume_token(KW_PCUT);
r.pos = getToken(0).getPos();
                {if (true) return r;}
    throw new Error("Missing return statement in function");
}

  final public Token TypeOperatorChar() throws ParseException {Token t;
    switch (jj_nt.kind) {
    case OP_AT:{
      t= jj_consume_token(OP_AT);
      break;
      }
    case OP_SHARP:{
      t= jj_consume_token(OP_SHARP);
      break;
      }
    case OP_SUPERSCRIPT_PLUS:{
      t= jj_consume_token(OP_SUPERSCRIPT_PLUS);
      break;
      }
    case OP_SUPERSCRIPT_MINUS:{
      t= jj_consume_token(OP_SUPERSCRIPT_MINUS);
      break;
      }
    case OPERATOR:{
      t= jj_consume_token(OPERATOR);
      break;
      }
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return t;}
    throw new Error("Missing return statement in function");
}

  final public Token OperatorChar() throws ParseException {Token t;
    switch (jj_nt.kind) {
    case OP_ASSIGN:{
      t= jj_consume_token(OP_ASSIGN);
      break;
      }
    case OP_LT:{
      t= jj_consume_token(OP_LT);
      break;
      }
    case OP_GT:{
      t= jj_consume_token(OP_GT);
      break;
      }
    case OP_AT:{
      t= jj_consume_token(OP_AT);
      break;
      }
    case OP_SHARP:{
      t= jj_consume_token(OP_SHARP);
      break;
      }
    case OP_UPPER_BOUND:{
      t= jj_consume_token(OP_UPPER_BOUND);
      break;
      }
    case OP_LOWER_BOUND:{
      t= jj_consume_token(OP_LOWER_BOUND);
      break;
      }
    case OPERATOR:{
      t= jj_consume_token(OPERATOR);
      break;
      }
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return t;}
    throw new Error("Missing return statement in function");
}

  final public EToken Operator() throws ParseException {Token t; String image; long pos;
    switch (jj_nt.kind) {
    case OP_LT:
    case OP_GT:
    case OP_ASSIGN:
    case OP_AT:
    case OP_SHARP:
    case OP_UPPER_BOUND:
    case OP_LOWER_BOUND:
    case OPERATOR:{
      t= OperatorChar();
image = t.image; pos = t.getPos();
      label_44:
      while (true) {
        if (operatorLA()) {
          ;
        } else {
          break label_44;
        }
        t= OperatorChar();
image = image+t.image;
      }
      break;
      }
    case OP_ARROW:{
      t= jj_consume_token(OP_ARROW);
image = t.image; pos = t.getPos();
      break;
      }
    case OP_IS_THE:{
      t= jj_consume_token(OP_IS_THE);
image = t.image; pos = t.getPos();
      break;
      }
    case OP_IS_ONE_OF:{
      t= jj_consume_token(OP_IS_ONE_OF);
image = t.image; pos = t.getPos();
      break;
      }
    case KW_OPERATOR:{
      jj_consume_token(KW_OPERATOR);
      switch (jj_nt.kind) {
      case IDENTIFIER:{
        t= jj_consume_token(IDENTIFIER);
pos = t.getPos();
                image = t.image;
        break;
        }
      case ESC_IDENTIFIER:{
        t= jj_consume_token(ESC_IDENTIFIER);
pos = t.getPos();
                image = ConstExpr.source2ascii(t.image.substring(1,t.image.length()-1));
        break;
        }
      case HID_IDENTIFIER:{
        t= jj_consume_token(HID_IDENTIFIER);
pos = t.getPos();
                image = ConstExpr.source2ascii(t.image.substring(4,t.image.length()-2));
        break;
        }
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return new EToken(pos, image, ETokenKind.EXPL_OPERATOR);}
    throw new Error("Missing return statement in function");
}

  final public ENode ExpressionColonComma() throws ParseException {ASTExpression e = new ASTExpression(); Token t;
    label_45:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COLON:{
        t= jj_consume_token(OP_COLON);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
        }
      case OP_COMMA:{
        t= jj_consume_token(OP_COMMA);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
        }
      default:
        jj_la1[125] = jj_gen;
        if (ExpressionNoNoLA()) {
          ExpressionNoNo(e);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_32(1)) {
        ;
      } else {
        break label_45;
      }
    }
//if (e.nodes.length == 1)
                //	return ~e.nodes[0];
                {if (true) return e;}
    throw new Error("Missing return statement in function");
}

  final public ENode ExpressionColon() throws ParseException {ASTExpression e = new ASTExpression(); Token t;
    label_46:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COLON:{
        t= jj_consume_token(OP_COLON);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
        }
      default:
        jj_la1[126] = jj_gen;
        if (ExpressionNoNoLA()) {
          ExpressionNoNo(e);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_33(1)) {
        ;
      } else {
        break label_46;
      }
    }
//if (e.nodes.length == 1)
                //	return ~e.nodes[0];
                {if (true) return e;}
    throw new Error("Missing return statement in function");
}

  final public ENode ExpressionComma() throws ParseException {ASTExpression e = new ASTExpression(); Token t;
    label_47:
    while (true) {
      switch (jj_nt.kind) {
      case OP_COMMA:{
        t= jj_consume_token(OP_COMMA);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
        }
      default:
        jj_la1[127] = jj_gen;
        if (ExpressionNoNoLA()) {
          ExpressionNoNo(e);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_34(1)) {
        ;
      } else {
        break label_47;
      }
    }
//if (e.nodes.length == 1)
                //	return ~e.nodes[0];
                {if (true) return e;}
    throw new Error("Missing return statement in function");
}

  final public ENode Expression() throws ParseException {ASTExpression e = new ASTExpression();
    label_48:
    while (true) {
      ExpressionNoNo(e);
      if (ExpressionNoNoLA()) {
        ;
      } else {
        break label_48;
      }
    }
//if (e.nodes.length == 1)
                //	return ~e.nodes[0];
                {if (true) return e;}
    throw new Error("Missing return statement in function");
}

  final public void ExpressionNoNo(ASTExpression e) throws ParseException {Token t; ENode n;
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
      e.nodes += ConstExpression();
      break;
      }
    case IDENTIFIER:
    case ESC_IDENTIFIER:
    case HID_IDENTIFIER:{
      e.nodes += Identifier();
      break;
      }
    case OP_LPAREN:{
      t= jj_consume_token(OP_LPAREN);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      if (jj_2_35(1)) {
        n = ExpressionColonComma();
expandExpr(e,n);
      } else {
        ;
      }
      t= jj_consume_token(OP_RPAREN);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      break;
      }
    case OP_LBRACKET:{
      t= jj_consume_token(OP_LBRACKET);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      e.nodes += ExpressionColonComma();
      t= jj_consume_token(OP_RBRACKET);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      break;
      }
    case OP_LANGLE:{
      t= jj_consume_token(OP_LANGLE);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      e.nodes += Type();
      label_49:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[128] = jj_gen;
          break label_49;
        }
        t= jj_consume_token(OP_COMMA);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        e.nodes += Type();
      }
      t= jj_consume_token(OP_RANGLE);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      break;
      }
    case OP_LRBRACKETS:{
      t= jj_consume_token(OP_LRBRACKETS);
e.nodes += new EToken(t.getPos(), "[]", ETokenKind.EXPL_OPERATOR);
      break;
      }
    case OP_DOT:{
      t= jj_consume_token(OP_DOT);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      switch (jj_nt.kind) {
      case KW_CLASS:{
        t= jj_consume_token(KW_CLASS);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
        }
      case KW_NEW:{
        t= jj_consume_token(KW_NEW);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        e.nodes += Type();
        break;
        }
      case OP_LT:{
        t= jj_consume_token(OP_LT);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        e.nodes += Type();
        label_50:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[129] = jj_gen;
            break label_50;
          }
          t= jj_consume_token(OP_COMMA);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
          e.nodes += Type();
        }
        t= jj_consume_token(OP_GT);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
        }
      case OP_LANGLE:{
        t= jj_consume_token(OP_LANGLE);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        e.nodes += Type();
        label_51:
        while (true) {
          switch (jj_nt.kind) {
          case OP_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[130] = jj_gen;
            break label_51;
          }
          t= jj_consume_token(OP_COMMA);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
          e.nodes += Type();
        }
        t= jj_consume_token(OP_RANGLE);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
        }
      default:
        jj_la1[131] = jj_gen;

      }
      break;
      }
    case KW_NEW:{
      NewAny(e);
      break;
      }
    case KW_FUNCTION:{
      e.nodes += AnonymouseClosure();
      break;
      }
    case KW_OPERATOR:
    case OP_LT:
    case OP_GT:
    case OP_ASSIGN:
    case OP_IS_THE:
    case OP_IS_ONE_OF:
    case OP_ARROW:
    case OP_AT:
    case OP_SHARP:
    case OP_UPPER_BOUND:
    case OP_LOWER_BOUND:
    case OPERATOR:{
      e.nodes += Operator();
      break;
      }
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void NewAny(ASTExpression e) throws ParseException {ENode n; TypeRef tp; Token t; Struct clazz;
    t= jj_consume_token(KW_NEW);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
    tp = NArrType();
e.nodes += tp;
    switch (jj_nt.kind) {
    case OP_LBRACKET:
    case OP_LRBRACKETS:{
      label_52:
      while (true) {
        switch (jj_nt.kind) {
        case OP_LBRACKET:{
          t= jj_consume_token(OP_LBRACKET);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
          n = Expression();
expandExpr(e,n);
          t= jj_consume_token(OP_RBRACKET);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
          break;
          }
        case OP_LRBRACKETS:{
          t= jj_consume_token(OP_LRBRACKETS);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
          break;
          }
        default:
          jj_la1[133] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch (jj_nt.kind) {
        case OP_LBRACKET:
        case OP_LRBRACKETS:{
          ;
          break;
          }
        default:
          jj_la1[134] = jj_gen;
          break label_52;
        }
      }
      switch (jj_nt.kind) {
      case OP_LBRACE:{
        t= jj_consume_token(OP_LBRACE);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        if (jj_2_37(1)) {
          n = VariableInitializer();
e.nodes += n;
          label_53:
          while (true) {
            if (jj_2_36(2)) {
              ;
            } else {
              break label_53;
            }
            t= jj_consume_token(OP_COMMA);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
            n = VariableInitializer();
e.nodes += n;
          }
          switch (jj_nt.kind) {
          case OP_COMMA:{
            jj_consume_token(OP_COMMA);
            break;
            }
          default:
            jj_la1[135] = jj_gen;
            ;
          }
        } else {
          ;
        }
        t= jj_consume_token(OP_RBRACE);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
        break;
        }
      default:
        jj_la1[136] = jj_gen;
        ;
      }
      break;
      }
    case OP_LPAREN:{
      t= jj_consume_token(OP_LPAREN);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      if (jj_2_38(1)) {
        n = ExpressionColonComma();
expandExpr(e,n);
      } else {
        ;
      }
      t= jj_consume_token(OP_RPAREN);
e.nodes += new EToken(t, ETokenKind.EXPL_OPERATOR);
      if (oneOfLA(OP_LBRACE)) {
clazz = mkStruct(null, new JavaAnonymouseClass(), AccessFlags.ACC_FINAL, new ASTModifiers(), e);
                                e.nodes += clazz;
        TypeBodyDeclaration(clazz);
      } else {
        ;
      }
      break;
      }
    default:
      jj_la1[137] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public NewClosure AnonymouseClosure() throws ParseException {ASTModifiers modifiers; TypeRef ptype; NewClosure nc = new NewClosure(getToken(1).getPos());
    jj_consume_token(KW_FUNCTION);
    jj_consume_token(OP_LPAREN);
    if (!oneOfLA(OP_RPAREN)) {
      modifiers = Modifiers();
      ptype = Type();
      nc.params += FormalParameter(modifiers,ptype);
      label_54:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[138] = jj_gen;
          break label_54;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        ptype = Type();
        nc.params += FormalParameter(modifiers,ptype);
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    jj_consume_token(OP_ARROW);
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("rule")) {
      nc.type_ret = Type();
      nc.body = RuleBlock();
    } else if (jj_2_39(1)) {
      nc.type_ret = Type();
      nc.body = Block();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return nc;}
    throw new Error("Missing return statement in function");
}

  final public ConstExpr ConstExpression() throws ParseException {ConstExpr ce;
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:{
      ce = IntConstExpression();
      break;
      }
    case LONG_INTEGER_LITERAL:{
      ce = LongConstExpression();
      break;
      }
    case FLOATING_POINT_LITERAL:{
      ce = FloatConstExpression();
      break;
      }
    case DOUBLE_POINT_LITERAL:{
      ce = DoubleConstExpression();
      break;
      }
    case CHARACTER_LITERAL:{
      ce = CharConstExpression();
      break;
      }
    case STRING_LITERAL:{
      ce = StringConstExpression();
      break;
      }
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if (true) return ce;}
    throw new Error("Missing return statement in function");
}

  final public ConstIntExpr IntConstExpression() throws ParseException {Token t;
    t= jj_consume_token(INTEGER_LITERAL);
{if (true) return (ConstIntExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
}

  final public ConstLongExpr LongConstExpression() throws ParseException {Token t;
    t= jj_consume_token(LONG_INTEGER_LITERAL);
{if (true) return (ConstLongExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
}

  final public ConstFloatExpr FloatConstExpression() throws ParseException {Token t;
    t= jj_consume_token(FLOATING_POINT_LITERAL);
{if (true) return (ConstFloatExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
}

  final public ConstDoubleExpr DoubleConstExpression() throws ParseException {Token t;
    t= jj_consume_token(DOUBLE_POINT_LITERAL);
{if (true) return (ConstDoubleExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
}

  final public ConstCharExpr CharConstExpression() throws ParseException {Token t;
    t= jj_consume_token(CHARACTER_LITERAL);
{if (true) return (ConstCharExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
}

  final public ConstStringExpr StringConstExpression() throws ParseException {Token t, t1;
    t= jj_consume_token(STRING_LITERAL);
{if (true) return (ConstStringExpr)sourceToConst(t);}
    throw new Error("Missing return statement in function");
}

/*
 * Statement syntax follows.
 */
  final public 
ENode Statement() throws ParseException {ENode st;
    if (jj_2_40(2)) {
      st = LabeledStatement();
    } else {
      switch (jj_nt.kind) {
      case OP_LBRACE:{
        st = Block();
        break;
        }
      case KW_SWITCH:{
        st = SwitchStatement();
        break;
        }
      case KW_IF:{
        st = IfStatement();
        break;
        }
      case KW_WHILE:{
        st = WhileStatement();
        break;
        }
      case KW_DO:{
        st = DoStatement();
        break;
        }
      case KW_FOR:{
        st = ForStatement();
        break;
        }
      case KW_FOREACH:{
        st = ForEachStatement();
        break;
        }
      case KW_BREAK:{
        st = BreakStatement();
        break;
        }
      case KW_CONTINUE:{
        st = ContinueStatement();
        break;
        }
      case KW_RETURN:{
        st = ReturnStatement();
        break;
        }
      case KW_THROW:{
        st = ThrowStatement();
        break;
        }
      case KW_SYNCHRONIZED:{
        st = SynchronizedStatement();
        break;
        }
      case KW_WITH:{
        st = WithStatement();
        break;
        }
      case KW_TRY:{
        st = TryStatement();
        break;
        }
      case KW_GOTO:{
        st = GotoStatement();
        break;
        }
      default:
        jj_la1[140] = jj_gen;
        st = StatementExpression();
      }
    }
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public ENode LabeledStatement() throws ParseException {LabeledStat st = new LabeledStat(); Symbol id;
    id = Name();
st.lbl.sname = id.sname; st.pos = id.pos;
    jj_consume_token(OP_COLON);
    st.stat = Statement();
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public Block Block() throws ParseException {boolean old_declMode;
    jj_consume_token(OP_LBRACE);
Block bl = new Block();
                bl.pos = getToken(1).getPos();
                old_declMode = declMode;
                declMode = false;
    try {
      label_55:
      while (true) {
        if (!oneOfLA(OP_RBRACE)) {
          ;
        } else {
          break label_55;
        }
        BlockStatement(Env.getSpacePtr(bl, "stats"));
      }
    } finally {
declMode = old_declMode;
    }
    jj_consume_token(OP_RBRACE);
{if (true) return bl;}
    throw new Error("Missing return statement in function");
}

  final public RuleBlock RuleBlock() throws ParseException {boolean old_declMode;
    jj_consume_token(OP_LBRACE);
RuleBlock bl = new RuleBlock();
                bl.pos = getToken(1).getPos();
                old_declMode = declMode;
                declMode = false;
    try {
      bl.rnode = RuleOrExpression();
    } finally {
declMode = old_declMode;
    }
    jj_consume_token(OP_RBRACE);
{if (true) return bl;}
    throw new Error("Missing return statement in function");
}

  final public Block CondBlock() throws ParseException {
Block bl = new Block();
                bl.pos = getToken(1).getPos();
    switch (jj_nt.kind) {
    case OP_LBRACE:{
      jj_consume_token(OP_LBRACE);
      label_56:
      while (true) {
        bl.stats += CondStatement();
        if (jj_2_41(1)) {
          ;
        } else {
          break label_56;
        }
      }
      jj_consume_token(OP_RBRACE);
      break;
      }
    default:
      jj_la1[141] = jj_gen;
      if (jj_2_42(1)) {
        bl.stats += CondStatement();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if (true) return bl;}
    throw new Error("Missing return statement in function");
}

  final public void BlockStatement(SpacePtr stats) throws ParseException {boolean old_declMode; ASTModifiers modifiers; TypeRef tp; Var var;
comments_alone(stats);
    if (modifiersLA()) {
      modifiers = Modifiers();
      if (jj_2_43(1)) {
old_declMode = declMode; declMode = true;
        try {
          stats += TypeDeclaration(modifiers, (ASTNode)stats.node);
        } finally {
declMode = old_declMode;
        }
      } else {
        VarDecls(modifiers, stats);
      }
    } else if (jj_2_44(1)) {
old_declMode = declMode; declMode = true;
      try {
        stats += TypeDeclaration(new ASTModifiers(), (ASTNode)stats.node);
      } finally {
declMode = old_declMode;
      }
    } else if (varDeclsLA()) {
      VarDecls(new ASTModifiers(), stats);
      jj_consume_token(OP_SEMICOLON);
    } else {
      stats += Statement();
    }
}

  final public CondStat CondStatement() throws ParseException {Token t = getToken(1); CondStat st = new CondStat();
    st.cond = Expression();
    switch (jj_nt.kind) {
    case OP_COLON:{
      jj_consume_token(OP_COLON);
t = null;
      st.message = Expression();
      break;
      }
    default:
      jj_la1[142] = jj_gen;
      ;
    }
if( t != null ) {
                        long pos = t.getPos();
                        StringBuffer sb = new StringBuffer();
                        while( t != null && t != getToken(1) ) {
                                sb.append(t.image).append(' ');
                                t = t.next;
                        }
                        ConstStringExpr e = new ConstStringExpr(sb.toString());
                        e.pos = pos;
                        st.message = e;
                }
    jj_consume_token(OP_SEMICOLON);
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public ENode StatementExpression() throws ParseException {ENode st;
    switch (jj_nt.kind) {
    case OP_SEMICOLON:{
      jj_consume_token(OP_SEMICOLON);
st = new ExprStat(getToken(0).getPos(), null);
      break;
      }
    default:
      jj_la1[144] = jj_gen;
      if (jj_2_45(1)) {
        st = ExpressionColonComma();
        switch (jj_nt.kind) {
        case OP_SEMICOLON:{
          jj_consume_token(OP_SEMICOLON);
st = new ExprStat(st.pos, st);
          break;
          }
        default:
          jj_la1[143] = jj_gen;
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public SwitchStat SwitchStatement() throws ParseException {SwitchStat st = new SwitchStat();
    jj_consume_token(KW_SWITCH);
st.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);
    st.sel = ExpressionColonComma();
    jj_consume_token(OP_RPAREN);
    jj_consume_token(OP_LBRACE);
    label_57:
    while (true) {
      st.cases += CaseStatements(st);
      switch (jj_nt.kind) {
      case KW_CASE:
      case KW_DEFAULT:{
        ;
        break;
        }
      default:
        jj_la1[145] = jj_gen;
        break label_57;
      }
    }
    jj_consume_token(OP_RBRACE);
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public CaseLabel CaseStatements(SwitchStat sw) throws ParseException {CaseLabel st;
    if (patternCaseLA()) {
      st = PizzaCase(sw);
    } else {
      switch (jj_nt.kind) {
      case KW_CASE:
      case KW_DEFAULT:{
        st = NormalCase(sw);
        break;
        }
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public CaseLabel NormalCase(SwitchStat sw) throws ParseException {CaseLabel c = new CaseLabel(); sw.stats += c;
    switch (jj_nt.kind) {
    case KW_CASE:{
      jj_consume_token(KW_CASE);
c.pos = getToken(0).getPos();
      c.val = Expression();
      jj_consume_token(OP_COLON);
      break;
      }
    case KW_DEFAULT:{
      jj_consume_token(KW_DEFAULT);
c.pos = getToken(0).getPos();
      jj_consume_token(OP_COLON);
      break;
      }
    default:
      jj_la1[147] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_58:
    while (true) {
      if (!oneOfLA(KW_CASE, KW_DEFAULT, OP_RBRACE)) {
        ;
      } else {
        break label_58;
      }
      BlockStatement(Env.getSpacePtr(sw, "stats"));
    }
{if (true) return c;}
    throw new Error("Missing return statement in function");
}

  final public CaseLabel PizzaCase(SwitchStat sw) throws ParseException {Token t; ASTModifiers modifiers; CaseLabel c = new CaseLabel(); sw.stats += c;
    jj_consume_token(KW_CASE);
c.pos = getToken(0).getPos();
    c.val = TypeWithArgs();
    jj_consume_token(OP_LPAREN);
    if (getToken(1).kind != OP_RPAREN) {
      modifiers = Modifiers();
      c.pattern += PatternParameter(modifiers);
      label_59:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[148] = jj_gen;
          break label_59;
        }
        jj_consume_token(OP_COMMA);
        modifiers = Modifiers();
        c.pattern += PatternParameter(modifiers);
      }
    } else {
      ;
    }
    jj_consume_token(OP_RPAREN);
    jj_consume_token(OP_COLON);
    label_60:
    while (true) {
      if (!oneOfLA(KW_CASE, KW_DEFAULT, OP_RBRACE)) {
        ;
      } else {
        break label_60;
      }
      BlockStatement(Env.getSpacePtr(sw, "stats"));
    }
{if (true) return c;}
    throw new Error("Missing return statement in function");
}

  final public IfElseStat IfStatement() throws ParseException {IfElseStat st = new IfElseStat(); EToken not = null;
    jj_consume_token(KW_IF);
st.pos = getToken(0).getPos();
    if (jj_2_46(2147483647) && (getToken(1).image.equals("!"))) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(OP_LPAREN);
    st.cond = ExpressionColonComma();
if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(OP_RPAREN);
    st.thenSt = Statement();
    switch (jj_nt.kind) {
    case KW_ELSE:{
      jj_consume_token(KW_ELSE);
      st.elseSt = Statement();
      break;
      }
    default:
      jj_la1[149] = jj_gen;
      ;
    }
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public WhileStat WhileStatement() throws ParseException {WhileStat st = new WhileStat(); EToken not = null;
    jj_consume_token(KW_WHILE);
st.pos = getToken(0).getPos();
    if (jj_2_47(2147483647) && (getToken(1).image.equals("!"))) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(OP_LPAREN);
    st.cond = ExpressionColonComma();
if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(OP_RPAREN);
    st.body = Statement();
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public DoWhileStat DoStatement() throws ParseException {DoWhileStat st = new DoWhileStat(); EToken not = null;
    jj_consume_token(KW_DO);
st.pos = getToken(0).getPos();
    st.body = Statement();
    jj_consume_token(KW_WHILE);
    if (jj_2_48(2147483647) && (getToken(1).image.equals("!"))) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(OP_LPAREN);
    st.cond = ExpressionColonComma();
if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(OP_RPAREN);
    jj_consume_token(OP_SEMICOLON);
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public LoopStat ForStatement() throws ParseException {ASTModifiers modifiers; ForStat fs = new ForStat(); ForEachStat fe = null;
    jj_consume_token(KW_FOR);
fs.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);

    if (modifiersLA() || varDeclsLA()) {
      modifiers = Modifiers();
      VarDecls(modifiers, Env.getSpacePtr(fs, "inits"));
    } else if (!oneOfLA(OP_COLON, OP_SEMICOLON)) {
      fs.inits += Expression();
      label_61:
      while (true) {
        switch (jj_nt.kind) {
        case OP_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[150] = jj_gen;
          break label_61;
        }
        jj_consume_token(OP_COMMA);
        fs.inits += Expression();
      }
    } else {

    }
    switch (jj_nt.kind) {
    case OP_COLON:{
      jj_consume_token(OP_COLON);
if (fs.inits.length != 1 || !(fs.inits[0] instanceof Var))
                                rpe("Bad for(:) declaration",null);
                        ForEachStat fe = new ForEachStat();
                        fe.pos = fs.pos;
                        fe.var = (Var)fs.inits[0].detach();
                        fs = null;
      fe.container = Expression();
      jj_consume_token(OP_RPAREN);
      fe.body = Statement();
{if (true) return fe;}
      break;
      }
    case OP_SEMICOLON:{
      jj_consume_token(OP_SEMICOLON);
      if (jj_2_49(1)) {
        fs.cond = Expression();
      } else {
        ;
      }
      jj_consume_token(OP_SEMICOLON);
      if (jj_2_50(1)) {
        fs.iter = CommaExpression();
      } else {
        ;
      }
      jj_consume_token(OP_RPAREN);
      fs.body = Statement();
{if (true) return fs;}
      break;
      }
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ForEachStat ForEachStatement() throws ParseException {ASTModifiers modifiers; ForEachStat st = new ForEachStat();
    jj_consume_token(KW_FOREACH);
st.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);

    if (modifiersLA() || paramDeclLA()) {
      modifiers = Modifiers();
      st.var = PatternParameter(modifiers);
      jj_consume_token(OP_SEMICOLON);
    } else if (getToken(1).image.equals("_")) {
      st.var = PatternParameter(null);
      jj_consume_token(OP_SEMICOLON);
    } else {

    }
    st.container = Expression();
    switch (jj_nt.kind) {
    case OP_SEMICOLON:{
      jj_consume_token(OP_SEMICOLON);
      st.cond = Expression();
      break;
      }
    default:
      jj_la1[152] = jj_gen;
      ;
    }
    jj_consume_token(OP_RPAREN);
    st.body = Statement();
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public ENode GotoStatement() throws ParseException {ENode st; ENode expr; SymbolRef id;
    jj_consume_token(KW_GOTO);
    switch (jj_nt.kind) {
    case KW_CASE:{
      jj_consume_token(KW_CASE);
st = new GotoCaseStat();
                        st.pos = getToken(0).getPos();
      expr = Expression();
((GotoCaseStat)st).expr = expr;
      break;
      }
    case KW_DEFAULT:{
      jj_consume_token(KW_DEFAULT);
st = new GotoCaseStat();
                        st.pos = getToken(0).getPos();
      break;
      }
    default:
      jj_la1[153] = jj_gen;
st = new GotoStat();
                        st.pos = getToken(0).getPos();
      id = NameRef();
((GotoStat)st).ident = id.name;
    }
    jj_consume_token(OP_SEMICOLON);
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public BreakStat BreakStatement() throws ParseException {SymbolRef id; BreakStat st = new BreakStat();
    jj_consume_token(KW_BREAK);
st.pos = getToken(0).getPos();
    if (identLA()) {
      id = NameRef();
st.ident = id.name;
    } else {
      ;
    }
    jj_consume_token(OP_SEMICOLON);
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public ContinueStat ContinueStatement() throws ParseException {SymbolRef id; ContinueStat st = new ContinueStat();
    jj_consume_token(KW_CONTINUE);
st.pos = getToken(0).getPos();
    if (identLA()) {
      id = NameRef();
st.ident = id.name;
    } else {
      ;
    }
    jj_consume_token(OP_SEMICOLON);
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public ReturnStat ReturnStatement() throws ParseException {ReturnStat st = new ReturnStat();
    jj_consume_token(KW_RETURN);
st.pos = getToken(0).getPos();
    if (jj_2_51(1)) {
      st.expr = ExpressionColonComma();
    } else {
      ;
    }
    jj_consume_token(OP_SEMICOLON);
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public ThrowStat ThrowStatement() throws ParseException {ThrowStat st = new ThrowStat();
    jj_consume_token(KW_THROW);
st.pos = getToken(0).getPos();
    st.expr = ExpressionColonComma();
    jj_consume_token(OP_SEMICOLON);
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public SynchronizedStat SynchronizedStatement() throws ParseException {SynchronizedStat st = new SynchronizedStat();
    jj_consume_token(KW_SYNCHRONIZED);
st.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);
    st.expr = ExpressionColonComma();
    jj_consume_token(OP_RPAREN);
    st.body = Block();
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public WithStat WithStatement() throws ParseException {WithStat st = new WithStat();
    jj_consume_token(KW_WITH);
st.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);
    st.expr = ExpressionColonComma();
    jj_consume_token(OP_RPAREN);
    st.body = Block();
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public TryStat TryStatement() throws ParseException {ASTModifiers modifiers; TryStat st = new TryStat();
    jj_consume_token(KW_TRY);
st.pos = getToken(0).getPos();
    st.body = Block();
    label_62:
    while (true) {
      switch (jj_nt.kind) {
      case KW_CATCH:{
        ;
        break;
        }
      default:
        jj_la1[154] = jj_gen;
        break label_62;
      }
      st.catchers += CatchInfo();
    }
    switch (jj_nt.kind) {
    case KW_FINALLY:{
      st.finally_catcher = FinallyInfo();
      break;
      }
    default:
      jj_la1[155] = jj_gen;
      ;
    }
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public CatchInfo CatchInfo() throws ParseException {ASTModifiers modifiers; CatchInfo st = new CatchInfo();
    jj_consume_token(KW_CATCH);
st.pos = getToken(0).getPos();
    jj_consume_token(OP_LPAREN);

    modifiers = Modifiers();
    st.arg = PatternParameter(modifiers);
    jj_consume_token(OP_RPAREN);
    st.body = Block();
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  final public FinallyInfo FinallyInfo() throws ParseException {Token t; FinallyInfo st = new FinallyInfo();
    jj_consume_token(KW_FINALLY);
st.pos = getToken(0).getPos();
    st.body = Block();
{if (true) return st;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_48()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_49()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_50()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_51()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_3R_SpecialAnnotation_1127_11_125()
 {
    if (jj_scan_token(META_THROWS)) return true;
    return false;
  }

  private boolean jj_3R_TypeDeclaration_734_17_88()
 {
    if (jj_scan_token(KW_CLASS)) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(OP_COMMA)) return true;
    if (jj_3R_VariableInitializer_1316_9_72()) return true;
    return false;
  }

  private boolean jj_3R_TypeDeclaration_733_9_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeDeclaration_734_17_88()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeDeclaration_755_17_89()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeDeclaration_771_17_90()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeDeclaration_776_17_91()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("view");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_TypeDeclaration_781_17_92()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_AnonymouseClosure_2264_9_155()
 {
    if (jj_scan_token(KW_FUNCTION)) return true;
    if (jj_scan_token(OP_LPAREN)) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_ExpressionColonComma_2102_9_83()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_VariableInitializer_1316_9_72()) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1107_11_124()
 {
    if (jj_scan_token(META_PACKED)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1105_11_123()
 {
    if (jj_scan_token(META_VOLATILE)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_Type_1687_9_69()) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1104_11_122()
 {
    if (jj_scan_token(KW_VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1102_11_121()
 {
    if (jj_scan_token(META_TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1101_11_120()
 {
    if (jj_scan_token(KW_TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1099_11_119()
 {
    if (jj_scan_token(META_SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1098_11_118()
 {
    if (jj_scan_token(KW_SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1096_11_117()
 {
    if (jj_scan_token(META_NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1095_11_116()
 {
    if (jj_scan_token(KW_NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1093_11_115()
 {
    if (jj_scan_token(META_FINAL)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1092_11_114()
 {
    if (jj_scan_token(KW_FINAL)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1090_11_113()
 {
    if (jj_scan_token(META_ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1089_11_112()
 {
    if (jj_scan_token(KW_ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1087_11_111()
 {
    if (jj_scan_token(META_STATIC)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1086_11_110()
 {
    if (jj_scan_token(KW_STATIC)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1084_11_109()
 {
    if (jj_scan_token(META_MACRO)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1083_11_108()
 {
    if (jj_scan_token(META_VIRTUAL)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1082_11_107()
 {
    if (jj_scan_token(META_UNERASABLE)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1081_11_106()
 {
    if (jj_scan_token(META_FORWARD)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(OP_DOT)) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1079_11_105()
 {
    if (jj_scan_token(META_MIXIN)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1078_11_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SpecialAnnotation_1078_11_104()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1079_11_105()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1081_11_106()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1082_11_107()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1083_11_108()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1084_11_109()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1086_11_110()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1087_11_111()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1089_11_112()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1090_11_113()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1092_11_114()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1093_11_115()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1095_11_116()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1096_11_117()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1098_11_118()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1099_11_119()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1101_11_120()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1102_11_121()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1104_11_122()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1105_11_123()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1107_11_124()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1127_11_125()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1140_11_126()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1146_11_127()) {
    jj_scanpos = xsp;
    if (jj_3R_SpecialAnnotation_1147_11_128()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1078_11_104()
 {
    if (jj_scan_token(META_SINGLETON)) return true;
    return false;
  }

  private boolean jj_3R_Import_687_17_71()
 {
    if (jj_scan_token(OP_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2208_25_183()
 {
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2215_17_150()
 {
    if (jj_3R_Operator_2062_9_156()) return true;
    return false;
  }

  private boolean jj_3R_NewAny_2222_9_154()
 {
    if (jj_scan_token(KW_NEW)) return true;
    if (jj_3R_NArrType_1816_9_184()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2213_17_149()
 {
    if (jj_3R_AnonymouseClosure_2264_9_155()) return true;
    return false;
  }

  private boolean jj_3R_NArrType_1821_25_74()
 {
    if (jj_scan_token(OP_LRBRACKETS)) return true;
    if (jj_3R_TypeOperatorChar_2033_9_101()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_Import_679_17_70()
 {
    if (jj_scan_token(OP_DOT)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(2).image.equals("*");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_Import_679_17_70()) {
    jj_scanpos = xsp;
    if (jj_3R_Import_687_17_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2211_17_148()
 {
    if (jj_3R_NewAny_2222_9_154()) return true;
    return false;
  }

  private boolean jj_3R_NArrType_1819_25_73()
 {
    if (jj_3R_TypeOperatorChar_2033_9_101()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2200_25_182()
 {
    if (jj_scan_token(OP_LANGLE)) return true;
    return false;
  }

  private boolean jj_3R_ClosureType_1831_9_136()
 {
    if (jj_scan_token(OP_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2192_25_181()
 {
    if (jj_scan_token(OP_LT)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NArrType_1819_25_73()) {
    jj_scanpos = xsp;
    if (jj_3R_NArrType_1821_25_74()) return true;
    }
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2189_25_180()
 {
    if (jj_scan_token(KW_NEW)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(OP_DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2187_25_179()
 {
    if (jj_scan_token(KW_CLASS)) return true;
    return false;
  }

  private boolean jj_3R_NArrType_1816_9_184()
 {
    if (jj_3R_TypeWithArgs_1765_5_151()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_Type_1687_9_69()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2185_17_147()
 {
    if (jj_scan_token(OP_DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionNoNo_2187_25_179()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2189_25_180()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2192_25_181()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2200_25_182()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2208_25_183()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Access_1035_17_135()
 {
    if (jj_scan_token(KW_PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_ImportSyntax_659_9_86()
 {
    if (jj_scan_token(KW_IMPORT)) return true;
    return false;
  }

  private boolean jj_3R_Access_1034_17_134()
 {
    if (jj_scan_token(META_PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2183_17_146()
 {
    if (jj_scan_token(OP_LRBRACKETS)) return true;
    return false;
  }

  private boolean jj_3R_Access_1033_17_133()
 {
    if (jj_scan_token(KW_PROTECTED)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_Access_1032_17_132()
 {
    if (jj_scan_token(META_PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_Access_1031_17_131()
 {
    if (jj_scan_token(KW_PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_Access_1030_17_130()
 {
    if (jj_scan_token(META_PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_Access_1029_17_129()
 {
    if (jj_scan_token(META_ACCESS1)) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_ExpressionColonComma_2102_9_83()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2175_17_145()
 {
    if (jj_scan_token(OP_LANGLE)) return true;
    if (jj_3R_Type_1687_9_69()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_Package_647_9_87()
 {
    if (jj_scan_token(KW_PACKAGE)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2171_17_144()
 {
    if (jj_scan_token(OP_LBRACKET)) return true;
    if (jj_3R_ExpressionColonComma_2102_9_83()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_638_17_68()
 {
    if (jj_3R_Annotation_1153_9_95()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_637_17_67()
 {
    if (jj_3R_Access_1028_9_94()) return true;
    return false;
  }

  private boolean jj_3R_Access_1028_9_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Access_1029_17_129()) {
    jj_scanpos = xsp;
    if (jj_3R_Access_1030_17_130()) {
    jj_scanpos = xsp;
    if (jj_3R_Access_1031_17_131()) {
    jj_scanpos = xsp;
    if (jj_3R_Access_1032_17_132()) {
    jj_scanpos = xsp;
    if (jj_3R_Access_1033_17_133()) {
    jj_scanpos = xsp;
    if (jj_3R_Access_1034_17_134()) {
    jj_scanpos = xsp;
    if (jj_3R_Access_1035_17_135()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Modifiers_636_17_66()
 {
    if (jj_3R_SpecialAnnotation_1078_11_93()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Modifiers_636_17_66()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_637_17_67()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = oneOfLA(OP_AT);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_Modifiers_638_17_68()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2165_17_143()
 {
    if (jj_scan_token(OP_LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    if (jj_scan_token(OP_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_TypeDeclaration_733_9_65()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2163_17_142()
 {
    if (jj_3R_Identifier_1906_9_153()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2161_17_141()
 {
    if (jj_3R_ConstExpression_2292_9_152()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoNo_2160_9_103()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionNoNo_2161_17_141()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2163_17_142()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2165_17_143()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2171_17_144()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2175_17_145()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2183_17_146()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2185_17_147()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2211_17_148()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2213_17_149()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionNoNo_2215_17_150()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Expression_2147_17_102()
 {
    if (jj_3R_ExpressionNoNo_2160_9_103()) return true;
    return false;
  }

  private boolean jj_3R_TypeWithArgs_1765_15_157()
 {
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_Type_1687_9_69()) return true;
    return false;
  }

  private boolean jj_3R_Expression_2146_9_75()
 {
    Token xsp;
    if (jj_3R_Expression_2147_17_102()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Expression_2147_17_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_TypeWithArgs_1765_5_151()
 {
    if (jj_3R_TypeWithArgs_1765_15_157()) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_ExpressionComma_2134_17_82()
 {
    if (jj_3R_ExpressionNoNo_2160_9_103()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionComma_2133_17_81()
 {
    if (jj_scan_token(OP_COMMA)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionComma_2133_17_81()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = ExpressionNoNoLA();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_ExpressionComma_2134_17_82()) return true;
    }
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(OP_DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionColon_2120_17_80()
 {
    if (jj_3R_ExpressionNoNo_2160_9_103()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_3R_ExpressionColonComma_2102_9_83()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionColon_2119_17_79()
 {
    if (jj_scan_token(OP_COLON)) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionColon_2119_17_79()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = ExpressionNoNoLA();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_ExpressionColon_2120_17_80()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(KW_PACKAGE)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionColon_2118_9_140()
 {
    Token xsp;
    if (jj_3_33()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ExpressionColonComma_2106_17_78()
 {
    if (jj_3R_ExpressionNoNo_2160_9_103()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(OP_COMMA)) return true;
    if (jj_3R_VariableInitializer_1316_9_72()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionColonComma_2105_17_77()
 {
    if (jj_scan_token(OP_COMMA)) return true;
    return false;
  }

  private boolean jj_3R_FileUnit_564_25_63()
 {
    if (jj_3R_ImportSyntax_659_9_86()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind==KW_IMPORT && getToken(2).kind==IDENTIFIER && getToken(2).image.equals("syntax");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_FileUnit_564_25_63()) {
    jj_scanpos = xsp;
    if (jj_3R_FileUnit_567_21_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_FileUnit_567_21_64()
 {
    if (jj_3R_Package_647_9_87()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionColonComma_2103_17_76()
 {
    if (jj_scan_token(OP_COLON)) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionColonComma_2103_17_76()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionColonComma_2105_17_77()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = ExpressionNoNoLA();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_ExpressionColonComma_2106_17_78()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_VariableInitializer_1316_9_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ExpressionColonComma_2102_9_83()
 {
    Token xsp;
    if (jj_3_32()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_PathType_1716_9_137()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_ArrayInitializer_1328_9_139()
 {
    if (jj_scan_token(OP_LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    if (jj_scan_token(OP_RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_Operator_2089_13_188()
 {
    if (jj_scan_token(HID_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_VariableInitializer_1319_17_100()
 {
    if (jj_3R_ExpressionColon_2118_9_140()) return true;
    return false;
  }

  private boolean jj_3R_CondStatement_2475_9_84()
 {
    if (jj_3R_Expression_2146_9_75()) return true;
    return false;
  }

  private boolean jj_3R_VariableInitializer_1317_17_99()
 {
    if (jj_3R_ArrayInitializer_1328_9_139()) return true;
    return false;
  }

  private boolean jj_3R_Operator_2084_13_187()
 {
    if (jj_scan_token(ESC_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_TypeExpr_1703_9_138()
 {
    if (jj_3R_TypeWithArgs_1765_5_151()) return true;
    return false;
  }

  private boolean jj_3R_Operator_2077_17_171()
 {
    if (jj_scan_token(KW_OPERATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Operator_2079_13_186()) {
    jj_scanpos = xsp;
    if (jj_3R_Operator_2084_13_187()) {
    jj_scanpos = xsp;
    if (jj_3R_Operator_2089_13_188()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Operator_2079_13_186()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_Operator_2075_17_170()
 {
    if (jj_scan_token(OP_IS_ONE_OF)) return true;
    return false;
  }

  private boolean jj_3R_Operator_2066_25_185()
 {
    if (jj_3R_OperatorChar_2046_9_178()) return true;
    return false;
  }

  private boolean jj_3R_VariableInitializer_1316_9_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VariableInitializer_1317_17_99()) {
    jj_scanpos = xsp;
    if (jj_3R_VariableInitializer_1319_17_100()) return true;
    }
    return false;
  }

  private boolean jj_3R_Type_1691_17_97()
 {
    if (jj_3R_PathType_1716_9_137()) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_TypeDeclaration_733_9_65()) return true;
    return false;
  }

  private boolean jj_3R_Operator_2073_17_169()
 {
    if (jj_scan_token(OP_IS_THE)) return true;
    return false;
  }

  private boolean jj_3R_Type_1694_13_98()
 {
    if (jj_3R_TypeExpr_1703_9_138()) return true;
    return false;
  }

  private boolean jj_3R_Operator_2071_17_168()
 {
    if (jj_scan_token(OP_ARROW)) return true;
    return false;
  }

  private boolean jj_3R_Type_1688_13_96()
 {
    if (jj_3R_ClosureType_1831_9_136()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_CondStatement_2475_9_84()) return true;
    return false;
  }

  private boolean jj_3R_Operator_2063_17_167()
 {
    if (jj_3R_OperatorChar_2046_9_178()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Operator_2066_25_185()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Type_1687_9_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = closureTypeLA();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_Type_1688_13_96()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = pathTypeLA();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_Type_1691_17_97()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_1694_13_98()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_TypeDeclaration_733_9_65()) return true;
    return false;
  }

  private boolean jj_3R_Operator_2062_9_156()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Operator_2063_17_167()) {
    jj_scanpos = xsp;
    if (jj_3R_Operator_2071_17_168()) {
    jj_scanpos = xsp;
    if (jj_3R_Operator_2073_17_169()) {
    jj_scanpos = xsp;
    if (jj_3R_Operator_2075_17_170()) {
    jj_scanpos = xsp;
    if (jj_3R_Operator_2077_17_171()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_CondStatement_2475_9_84()) return true;
    return false;
  }

  private boolean jj_3R_OperatorChar_2046_9_178()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_TypeOperatorChar_2033_9_101()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_Type_1687_9_69()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_LPAREN)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_LBRACE)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(OP_LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_3R_ExpressionColonComma_2102_9_83()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_TypeDeclaration_733_9_65()) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_Expression_2146_9_75()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(OP_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_LBRACE)) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_COLON)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(OP_LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(OP_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_LBRACE)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(OP_LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_StringConstExpression_2341_9_177()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_CharConstExpression_2334_9_176()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_DoubleConstExpression_2327_9_175()
 {
    if (jj_scan_token(DOUBLE_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_TypeDeclaration_781_17_92()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_FloatConstExpression_2320_9_174()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_CommaExpression_1918_9_85()) return true;
    return false;
  }

  private boolean jj_3R_TypeDeclaration_776_17_91()
 {
    if (jj_scan_token(KW_ENUM)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_Expression_2146_9_75()) return true;
    return false;
  }

  private boolean jj_3R_LongConstExpression_2313_9_173()
 {
    if (jj_scan_token(LONG_INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_TypeDeclaration_771_17_90()
 {
    if (jj_scan_token(META_INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_IntConstExpression_2306_9_172()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_ConstExpression_2298_17_163()
 {
    if (jj_3R_StringConstExpression_2341_9_177()) return true;
    return false;
  }

  private boolean jj_3R_ConstExpression_2297_17_162()
 {
    if (jj_3R_CharConstExpression_2334_9_176()) return true;
    return false;
  }

  private boolean jj_3R_ConstExpression_2296_17_161()
 {
    if (jj_3R_DoubleConstExpression_2327_9_175()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_ConstExpression_2295_17_160()
 {
    if (jj_3R_FloatConstExpression_2320_9_174()) return true;
    return false;
  }

  private boolean jj_3R_ConstExpression_2294_17_159()
 {
    if (jj_3R_LongConstExpression_2313_9_173()) return true;
    return false;
  }

  private boolean jj_3R_Annotation_1153_9_95()
 {
    if (jj_scan_token(OP_AT)) return true;
    return false;
  }

  private boolean jj_3R_ConstExpression_2293_17_158()
 {
    if (jj_3R_IntConstExpression_2306_9_172()) return true;
    return false;
  }

  private boolean jj_3R_CommaExpression_1918_9_85()
 {
    if (jj_3R_Expression_2146_9_75()) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1147_11_128()
 {
    if (jj_scan_token(META_SETTER)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1146_11_127()
 {
    if (jj_scan_token(META_GETTER)) return true;
    return false;
  }

  private boolean jj_3R_TypeDeclaration_755_17_89()
 {
    if (jj_scan_token(KW_INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_ConstExpression_2292_9_152()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConstExpression_2293_17_158()) {
    jj_scanpos = xsp;
    if (jj_3R_ConstExpression_2294_17_159()) {
    jj_scanpos = xsp;
    if (jj_3R_ConstExpression_2295_17_160()) {
    jj_scanpos = xsp;
    if (jj_3R_ConstExpression_2296_17_161()) {
    jj_scanpos = xsp;
    if (jj_3R_ConstExpression_2297_17_162()) {
    jj_scanpos = xsp;
    if (jj_3R_ConstExpression_2298_17_163()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Identifier_1908_9_166()
 {
    if (jj_scan_token(HID_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_SpecialAnnotation_1140_11_126()
 {
    if (jj_scan_token(META_UUID)) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_Type_1687_9_69()) return true;
    return false;
  }

  private boolean jj_3R_Identifier_1907_9_165()
 {
    if (jj_scan_token(ESC_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_Identifier_1906_9_164()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_Identifier_1906_9_153()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Identifier_1906_9_164()) {
    jj_scanpos = xsp;
    if (jj_3R_Identifier_1907_9_165()) {
    jj_scanpos = xsp;
    if (jj_3R_Identifier_1908_9_166()) return true;
    }
    }
    return false;
  }

  /** User defined Token Manager. */
  public TokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos;
  private Token jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[156];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x400000,0x29008020,0x8000000,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x200000,0x0,0x0,0x4000,0x0,0x0,0x4000,0x0,0x200000,0x800200,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x29008020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf41e1440,0x0,0x0,0x0,0x0,0x880,0x880,0x880,0x0,0x2000,0x0,0x0,0x0,0x880,0x100,0x10000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x180,0xffffc00a,0x0,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2200,0x0,0x0,0x0,0x0,0x1000,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffc00a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0xc41,0x0,0x0,0x0,0x0,0x0,0x0,0xc41,0x0,0x0,0x0,0x0,0xc41,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x7f,0x0,0x800,0x2000,0x0,0x0,0x800,0x0,0x800,0x0,0x0,0x800,0x0,0x0,0x800,0x0,0x800,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x3000,0x0,0x800,0x2000,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0x800,0x800,0x800,0x800,0x800,0x800,0x3000,0x3000,0x780,0x800,0x800,0x3000,0x800,0x0,0x800,0x0,0x0,0x800,0x0,0x800,0x0,0x800,0x0,0x0,0x800,0x0,0x0,0x800,0x1000,0x80000000,0x800,0x80100000,0x100000,0x80001000,0x800,0x80001000,0x100000,0x0,0x0,0x0,0x80001000,0x800,0x80001000,0x100000,0x0,0x0,0x0,0x800,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x800,0x0,0x0,0x800,0x0,0x0,0x800,0x80000000,0x80000000,0x80000000,0x800,0x0,0x800,0x1000,0x1000,0x0,0x0,0x0,0x80000000,0x100000,0x1800,0x1000,0x800,0x800,0x800,0x800,0x80000,0xec7c2000,0x0,0x0,0x800,0x0,0x2000,0x800,0x6c600000,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x800,0x1000,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x10000800,0x0,0x0,0x0,0x0,0x10000800,0x0,0x0,0x10000800,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x200,0x0,0x0,0x10000800,0x0,0x0,0x10000800,0x0,0x200,0x10000800,0x0,0x20001000,0x0,0x6000000,0x6000000,0x6008000,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x40,0x0,0x0,0x20,0x0,0x8000,0x0,0x8000,0x8000,0x0,0x8000,0x20,0x0,0x0,0x3,0x0,0x3,0x0,0x80003,0x0,0x80003,0x0,0x200,0x200,0x200,0x80003,0x0,0x80003,0x0,0x200,0x200,0x200,0x0,0x0,0x200,0x200,0x200,0x200,0x200,0x9f00000,0x9f00000,0x0,0x0,0x2800,0x0,0x0,0x5000,0x2800,0x0,0x5000,0x9f00000,0x0,0x3,0x3,0x3,0x0,0x200,0x0,0x0,0x0,0x20,0x9b00000,0xe309800,0x3,0xe379800,0x0,0x0,0x0,0x0,0x0,0x0,0x2800,0xe77bc83,0x400080,0x400080,0x0,0x20,0x400080,0x0,0x0,0x20,0x20,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[51];
  private boolean jj_rescan = false;
  private int jj_gc = 0;


  /** Constructor with user supplied Token Manager. */
  public kiev050(TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 156; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 156; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken = token;
	 if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
	 else jj_nt = jj_nt.next = token_source.getNextToken();
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 jj_nt = token;
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
	 else jj_nt = jj_nt.next = token_source.getNextToken();
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[126];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 156; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 126; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 51; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			   case 41: jj_3_42(); break;
			   case 42: jj_3_43(); break;
			   case 43: jj_3_44(); break;
			   case 44: jj_3_45(); break;
			   case 45: jj_3_46(); break;
			   case 46: jj_3_47(); break;
			   case 47: jj_3_48(); break;
			   case 48: jj_3_49(); break;
			   case 49: jj_3_50(); break;
			   case 50: jj_3_51(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}

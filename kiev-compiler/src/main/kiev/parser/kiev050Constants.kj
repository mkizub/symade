/* Generated By:JavaCC: Do not edit this line. kiev050Constants.java */
/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface kiev050Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPECIAL_COMMENT = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 2;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 3;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 4;
  /** RegularExpression Id. */
  int KW_ABSTRACT = 5;
  /** RegularExpression Id. */
  int KW_BREAK = 6;
  /** RegularExpression Id. */
  int KW_CASE = 7;
  /** RegularExpression Id. */
  int KW_CATCH = 8;
  /** RegularExpression Id. */
  int KW_CLASS = 9;
  /** RegularExpression Id. */
  int KW_CONTINUE = 10;
  /** RegularExpression Id. */
  int KW_DEFAULT = 11;
  /** RegularExpression Id. */
  int KW_DO = 12;
  /** RegularExpression Id. */
  int KW_ELSE = 13;
  /** RegularExpression Id. */
  int KW_EXTENDS = 14;
  /** RegularExpression Id. */
  int KW_FINAL = 15;
  /** RegularExpression Id. */
  int KW_FINALLY = 16;
  /** RegularExpression Id. */
  int KW_FOR = 17;
  /** RegularExpression Id. */
  int KW_FOREACH = 18;
  /** RegularExpression Id. */
  int KW_GOTO = 19;
  /** RegularExpression Id. */
  int KW_IF = 20;
  /** RegularExpression Id. */
  int KW_IMPLEMENTS = 21;
  /** RegularExpression Id. */
  int KW_IMPORT = 22;
  /** RegularExpression Id. */
  int KW_INTERFACE = 23;
  /** RegularExpression Id. */
  int KW_NATIVE = 24;
  /** RegularExpression Id. */
  int KW_PACKAGE = 25;
  /** RegularExpression Id. */
  int KW_RETURN = 26;
  /** RegularExpression Id. */
  int KW_STATIC = 27;
  /** RegularExpression Id. */
  int KW_SWITCH = 28;
  /** RegularExpression Id. */
  int KW_SYNCHRONIZED = 29;
  /** RegularExpression Id. */
  int KW_WITH = 30;
  /** RegularExpression Id. */
  int KW_THROW = 31;
  /** RegularExpression Id. */
  int KW_THROWS = 32;
  /** RegularExpression Id. */
  int KW_TRANSIENT = 33;
  /** RegularExpression Id. */
  int KW_TRY = 34;
  /** RegularExpression Id. */
  int KW_VOLATILE = 35;
  /** RegularExpression Id. */
  int KW_WHILE = 36;
  /** RegularExpression Id. */
  int KW_PCUT = 37;
  /** RegularExpression Id. */
  int KW_ALIAS = 38;
  /** RegularExpression Id. */
  int KW_TYPE = 39;
  /** RegularExpression Id. */
  int KW_TYPEDEF = 40;
  /** RegularExpression Id. */
  int KW_ENUM = 41;
  /** RegularExpression Id. */
  int KW_REQUIRE = 42;
  /** RegularExpression Id. */
  int KW_ENSURE = 43;
  /** RegularExpression Id. */
  int KW_INVARIANT = 44;
  /** RegularExpression Id. */
  int META_INTERFACE = 45;
  /** RegularExpression Id. */
  int META_SINGLETON = 46;
  /** RegularExpression Id. */
  int META_MIXIN = 47;
  /** RegularExpression Id. */
  int META_FORWARD = 48;
  /** RegularExpression Id. */
  int META_UNERASABLE = 49;
  /** RegularExpression Id. */
  int META_VIRTUAL = 50;
  /** RegularExpression Id. */
  int META_PACKED = 51;
  /** RegularExpression Id. */
  int META_MACRO = 52;
  /** RegularExpression Id. */
  int META_STATIC = 53;
  /** RegularExpression Id. */
  int META_ABSTRACT = 54;
  /** RegularExpression Id. */
  int META_FINAL = 55;
  /** RegularExpression Id. */
  int META_NATIVE = 56;
  /** RegularExpression Id. */
  int META_SYNCHRONIZED = 57;
  /** RegularExpression Id. */
  int META_TRANSIENT = 58;
  /** RegularExpression Id. */
  int META_VOLATILE = 59;
  /** RegularExpression Id. */
  int META_THROWS = 60;
  /** RegularExpression Id. */
  int META_UUID = 61;
  /** RegularExpression Id. */
  int META_GETTER = 62;
  /** RegularExpression Id. */
  int META_SETTER = 63;
  /** RegularExpression Id. */
  int META_ACCESS1 = 64;
  /** RegularExpression Id. */
  int META_PUBLIC = 65;
  /** RegularExpression Id. */
  int KW_PUBLIC = 66;
  /** RegularExpression Id. */
  int META_PROTECTED = 67;
  /** RegularExpression Id. */
  int KW_PROTECTED = 68;
  /** RegularExpression Id. */
  int META_PRIVATE = 69;
  /** RegularExpression Id. */
  int KW_PRIVATE = 70;
  /** RegularExpression Id. */
  int KW_ACC_RO = 71;
  /** RegularExpression Id. */
  int KW_ACC_WO = 72;
  /** RegularExpression Id. */
  int KW_ACC_RW = 73;
  /** RegularExpression Id. */
  int KW_ACC_NO = 74;
  /** RegularExpression Id. */
  int OP_COMMA = 75;
  /** RegularExpression Id. */
  int OP_COLON = 76;
  /** RegularExpression Id. */
  int OP_LPAREN = 77;
  /** RegularExpression Id. */
  int OP_RPAREN = 78;
  /** RegularExpression Id. */
  int KW_PRAGMA = 79;
  /** RegularExpression Id. */
  int KW_PRAGMA_ENABLE = 80;
  /** RegularExpression Id. */
  int KW_PRAGMA_DISABLE = 81;
  /** RegularExpression Id. */
  int KW_FUNCTION = 82;
  /** RegularExpression Id. */
  int KW_NEW = 83;
  /** RegularExpression Id. */
  int KW_OPERATOR = 84;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 85;
  /** RegularExpression Id. */
  int LONG_INTEGER_LITERAL = 86;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 87;
  /** RegularExpression Id. */
  int HEX_LITERAL = 88;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 89;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 90;
  /** RegularExpression Id. */
  int DOUBLE_POINT_LITERAL = 91;
  /** RegularExpression Id. */
  int EXPONENT = 92;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 93;
  /** RegularExpression Id. */
  int STRING_LITERAL = 94;
  /** RegularExpression Id. */
  int IDENTIFIER = 95;
  /** RegularExpression Id. */
  int ESC_IDENTIFIER = 96;
  /** RegularExpression Id. */
  int HID_IDENTIFIER = 97;
  /** RegularExpression Id. */
  int LETTER = 98;
  /** RegularExpression Id. */
  int DIGIT = 99;
  /** RegularExpression Id. */
  int ID_STRING_LITERAL = 100;
  /** RegularExpression Id. */
  int OP_LBRACE = 101;
  /** RegularExpression Id. */
  int OP_RBRACE = 102;
  /** RegularExpression Id. */
  int OP_LBRACKET = 103;
  /** RegularExpression Id. */
  int OP_RBRACKET = 104;
  /** RegularExpression Id. */
  int OP_SEMICOLON = 105;
  /** RegularExpression Id. */
  int OP_DOT = 106;
  /** RegularExpression Id. */
  int OP_LT = 107;
  /** RegularExpression Id. */
  int OP_GT = 108;
  /** RegularExpression Id. */
  int OP_LANGLE = 109;
  /** RegularExpression Id. */
  int OP_RANGLE = 110;
  /** RegularExpression Id. */
  int OP_ASSIGN = 111;
  /** RegularExpression Id. */
  int OP_IS_THE = 112;
  /** RegularExpression Id. */
  int OP_IS_ONE_OF = 113;
  /** RegularExpression Id. */
  int OP_ARROW = 114;
  /** RegularExpression Id. */
  int OP_VARARGS = 115;
  /** RegularExpression Id. */
  int OP_AT = 116;
  /** RegularExpression Id. */
  int OP_SHARP = 117;
  /** RegularExpression Id. */
  int OP_LRBRACKETS = 118;
  /** RegularExpression Id. */
  int OP_SUPERSCRIPT_PLUS = 119;
  /** RegularExpression Id. */
  int OP_SUPERSCRIPT_MINUS = 120;
  /** RegularExpression Id. */
  int OP_UPPER_BOUND = 121;
  /** RegularExpression Id. */
  int OP_LOWER_BOUND = 122;
  /** RegularExpression Id. */
  int OPERATOR = 123;
  /** RegularExpression Id. */
  int LANGLE = 124;
  /** RegularExpression Id. */
  int RANGLE = 125;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SPECIAL_COMMENT>",
    "\"//\"",
    "\"/*\"",
    "\"/**\"",
    "\"abstract\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"class\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"else\"",
    "\"extends\"",
    "\"final\"",
    "\"finally\"",
    "\"for\"",
    "\"foreach\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"interface\"",
    "\"native\"",
    "\"package\"",
    "\"return\"",
    "\"static\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"with\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"try\"",
    "\"volatile\"",
    "\"while\"",
    "\"$cut\"",
    "\"alias\"",
    "\"type\"",
    "\"typedef\"",
    "\"enum\"",
    "\"require\"",
    "\"ensure\"",
    "\"invariant\"",
    "\"@interface\"",
    "\"@singleton\"",
    "\"@mixin\"",
    "\"@forward\"",
    "\"@unerasable\"",
    "\"@virtual\"",
    "\"@packed\"",
    "\"@macro\"",
    "\"@static\"",
    "\"@abstract\"",
    "\"@final\"",
    "\"@native\"",
    "\"@synchronized\"",
    "\"@transient\"",
    "\"@volatile\"",
    "\"@throws\"",
    "\"@uuid\"",
    "\"@getter\"",
    "\"@setter\"",
    "\"@access\"",
    "\"@public\"",
    "\"public\"",
    "\"@protected\"",
    "\"protected\"",
    "\"@private\"",
    "\"private\"",
    "\"ro\"",
    "\"wo\"",
    "\"rw\"",
    "\"no\"",
    "\",\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"pragma\"",
    "\"enable\"",
    "\"disable\"",
    "\"fun\"",
    "\"new\"",
    "\"operator\"",
    "<INTEGER_LITERAL>",
    "<LONG_INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DOUBLE_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<ESC_IDENTIFIER>",
    "<HID_IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<ID_STRING_LITERAL>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\".\"",
    "\"<\"",
    "\">\"",
    "\"<\\u0335\"",
    "\">\\u0335\"",
    "\"=\"",
    "\"?=\"",
    "\"@=\"",
    "\"->\"",
    "\"...\"",
    "\"@\"",
    "\"#\"",
    "<OP_LRBRACKETS>",
    "\"\\u207a\"",
    "\"\\u207b\"",
    "\"\\u2264\"",
    "\"\\u2265\"",
    "<OPERATOR>",
    "<LANGLE>",
    "<RANGLE>",
  };

}

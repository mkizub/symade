/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.parser;

import syntax kiev.Syntax;

/**
 * @author Maxim Kizub
 *
 */

@ThisIsANode(name="Expr", lang=CoreLang)
public class ASTExpression extends ENode {

	@DataFlowDefinition(out="nodes") private static class DFI {
	@DataFlowDefinition(in="this:in", seq="true")		ANode[]		nodes;
	}

	@nodeAttr public ANode∅	nodes;

	public ASTExpression() {}

	public int getPriority(Env env) { return 256; }

	public boolean preResolveIn(Env env, INode parent, AttrSlot slot) {
		// scan tokens, join qualified names
		ANode[]	nodes = this.nodes;
		for (int i=0; i < nodes.length-2; i++) {
			ANode n0 = nodes[i];
			if (n0 instanceof EToken && n0.asScope(env) instanceof KievPackage) {
				ANode n1 = nodes[i+1];
				if (n1 instanceof EToken && n1.ident == ".") {
					ANode n2 = nodes[i+2];
					if (n2 instanceof EToken && n2.isIdentifier()) {
						KievPackage scope = (KievPackage)n0.asScope(env);
						ResInfo info = new ResInfo(env,n2,n2.ident,ResInfo.noSyntaxContext|ResInfo.noForwards);
						if (!scope.resolveNameR(info))
							continue;
						DNode dn = info.resolvedDNode();
						if (dn instanceof KievPackage) {
							EToken res = new EToken(n2.pos, scope.qname()+'·'+n2.ident, ETokenKind.SCOPE_DECL);
							res.value = dn;
							n0.detach();
							n1.detach();
							n2.detach();
							this.nodes.insert(i, res);
							nodes = this.nodes;
							i--;
							continue;
						}
						if (dn instanceof TypeDecl) {
							TypeNameRef res = new TypeNameRef(scope.qname()+'·'+n2.ident);
							res.symbol = info.resolvedSymbol();
							res.pos = n2.pos;
							n0.detach();
							n1.detach();
							n2.detach();
							this.nodes.insert(i, res);
							nodes = this.nodes;
							continue;
						}
					}
				}
			}
		}
		return true;
	}

	public void preResolveOut(Env env, INode parent, AttrSlot slot) {
		ENode e = parseExpr(env);
		if (e != null) {
			e = e.closeBuild();
			if (isPrimaryExpr())
				e.setPrimaryExpr(true);
			this.replaceWithNodeReWalk(~e,parent,slot);
		}
	}

    public String toString() {
    	StringBuffer sb = new StringBuffer();
    	foreach(ANode n; nodes)
	    	sb.append(' ').append(n);
        return sb.toString();
    }

	public ENode parseExpr(Env env) {
		ASTExprParser pst = new ASTExprParser(env, Env.ctxSyntaxScope(this).getAllOpdefs(), this.nodes);
		List<ENode> results = pst.parseExpr();
		if (results.length() == 0) {
			StringBuffer msg = new StringBuffer("Expression: '"+this+"' cannot be resolved using defined operators");
			foreach(ENode n; results)
				msg.append(n).append("\n");
			Kiev.reportError(this, msg.toString());
			return null;
		}
		if (results.length() > 1) {
			StringBuffer msg = new StringBuffer("Umbigous expression: '"+this+"'\nmay be resolved as:\n");
			foreach(ENode n; results)
				msg.append(n).append("\n");
			Kiev.reportError(this, msg.toString());
			return null;
		}
		return (ENode)results.head();
	}

}



/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.gui;

import kiev.fmt.Draw_ATextSyntax;
import kiev.fmt.GfxFormatter;
import kiev.gui.event.ElementEvent;
import kiev.vtree.ANode;

public class InfoView extends UIView {

	/** The canvas to show definition of current node */
	protected final ICanvas	view_canvas;

	public InfoView(IWindow window, ICanvas view_canvas, Draw_ATextSyntax syntax) {
		super(window, view_canvas, syntax);
		this.view_canvas = view_canvas;
		this.view_canvas.setUIView(this);
		this.formatter = new GfxFormatter(view_canvas.getFmtGraphics());
	}

	@Override
	public void setRoot(ANode root) {
		the_root = root;
		view_root = null;
		view_canvas.setDlb_root(null);
		if (the_root != null) {
			formatter.format(the_root, view_root, getSyntax());
			view_root = formatter.getRootDrawable();
			view_canvas.setDlb_root(formatter.getRootDrawLayoutBlock());
		}
	}

	@Override
	public void formatAndPaint(boolean full) {
		this.formatter.setWidth(view_canvas.getImgWidth());
		this.formatter.setShowAutoGenerated(this.show_auto_generated);
		this.formatter.setShowPlaceholders(this.show_placeholders);
		this.formatter.setHintEscapes(this.show_hint_escapes);
		view_canvas.setDlb_root(null);
		if (the_root != null && full) {
			formatter.format(the_root, view_root, getSyntax());
			view_root = formatter.getRootDrawable();
			view_canvas.setDlb_root(formatter.getRootDrawLayoutBlock());
		}
		view_canvas.repaint();
	}

	@Override
	public void formatAndPaintLater(ANode node) {
		the_root = node;
		bg_formatter.schedule_run();
	}

	@Override
	public void elementChanged(ElementEvent e) {
		super.elementChanged(e);
		ANode node = ((Editor)e.getSource()).getCur_elem().node;
		formatAndPaintLater(node);
		
	}

	/**
	 * @return the view_canvas
	 */
	public ICanvas getView_canvas() {
		return view_canvas;
	}

}


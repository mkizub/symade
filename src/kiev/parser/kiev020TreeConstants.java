/* Generated By:JJTree: Do not edit this line. kiev020TreeConstants.java */

package kiev.parser;

public interface kiev020TreeConstants
{
  public int JJTFILEUNIT = 0;
  public int JJTPACKAGE = 1;
  public int JJTIMPORT = 2;
  public int JJTTYPEDEF = 3;
  public int JJTOPDEF = 4;
  public int JJTSYNTAXDECLARATION = 5;
  public int JJTTYPEDECLARATION = 6;
  public int JJTVOID = 7;
  public int JJTENUMDECLARATION = 8;
  public int JJTCASETYPEDECLARATION = 9;
  public int JJTEXTENDS = 10;
  public int JJTIMPLEMENTS = 11;
  public int JJTGENERATE = 12;
  public int JJTARGUMENTDECLARATION = 13;
  public int JJTMODIFIER = 14;
  public int JJTPACK = 15;
  public int JJTACCESS = 16;
  public int JJTFIELDDECL = 17;
  public int JJTVARDECLS = 18;
  public int JJTVARDECL = 19;
  public int JJTNEWINITIALIZEDARRAYEXPRESSION = 20;
  public int JJTFORMALPARAMETER = 21;
  public int JJTTHROWS = 22;
  public int JJTIDENTIFIERALIAS = 23;
  public int JJTOPERATORALIAS = 24;
  public int JJTMETHODDECLARATION = 25;
  public int JJTREQUAREDECLARATION = 26;
  public int JJTENSUREDECLARATION = 27;
  public int JJTINVARIANTDECLARATION = 28;
  public int JJTRULEDECLARATION = 29;
  public int JJTINITIALIZER = 30;
  public int JJTTYPE = 31;
  public int JJTCLOSURETYPE = 32;
  public int JJTNONARRAYTYPE = 33;
  public int JJTPRIMITIVETYPE = 34;
  public int JJTIDENTIFIER = 35;
  public int JJTQNAME = 36;
  public int JJTCOMMAEXPRESSION = 37;
  public int JJTRULEOREXPRESSION = 38;
  public int JJTRULEANDEXPRESSION = 39;
  public int JJTRULEEXPRESSION = 40;
  public int JJTRULEISTHEEXPRESSION = 41;
  public int JJTRULEISONEOFEXPRESSION = 42;
  public int JJTRULECUTEXPRESSION = 43;
  public int JJTOPERATOR = 44;
  public int JJTCASTOPERATOR = 45;
  public int JJTEXPRESSION = 46;
  public int JJTREPARSEEXPRESSION = 47;
  public int JJTCALLEXPRESSION = 48;
  public int JJTTYPECLASSEXPRESSION = 49;
  public int JJTCALLACCESSEXPRESSION = 50;
  public int JJTACCESSEXPRESSION = 51;
  public int JJTARRAYELEMENTACCESSEXPRESSION = 52;
  public int JJTNEWACCESSEXPRESSION = 53;
  public int JJTANONYMOUSECLOSURE = 54;
  public int JJTCONSTEXPRESSION = 55;
  public int JJTNEWEXPRESSION = 56;
  public int JJTNEWARRAYEXPRESSION = 57;
  public int JJTREPARSESTATEMENT = 58;
  public int JJTLABELEDSTATEMENT = 59;
  public int JJTBLOCK = 60;
  public int JJTRULEBLOCK = 61;
  public int JJTCONDBLOCK = 62;
  public int JJTCONDSTATEMENT = 63;
  public int JJTEMPTYSTATEMENT = 64;
  public int JJTSTATEMENTEXPRESSION = 65;
  public int JJTSWITCHSTATEMENT = 66;
  public int JJTNORMALCASE = 67;
  public int JJTPIZZACASE = 68;
  public int JJTIFSTATEMENT = 69;
  public int JJTWHILESTATEMENT = 70;
  public int JJTDOSTATEMENT = 71;
  public int JJTFORSTATEMENT = 72;
  public int JJTFOREACHSTATEMENT = 73;
  public int JJTGOTOSTATEMENT = 74;
  public int JJTBREAKSTATEMENT = 75;
  public int JJTCONTINUESTATEMENT = 76;
  public int JJTRETURNSTATEMENT = 77;
  public int JJTTHROWSTATEMENT = 78;
  public int JJTSYNCHRONIZEDSTATEMENT = 79;
  public int JJTTRYSTATEMENT = 80;
  public int JJTCATCHINFO = 81;
  public int JJTFINALLYINFO = 82;


  public String[] jjtNodeName = {
    "FileUnit",
    "Package",
    "Import",
    "Typedef",
    "Opdef",
    "SyntaxDeclaration",
    "TypeDeclaration",
    "void",
    "EnumDeclaration",
    "CaseTypeDeclaration",
    "Extends",
    "Implements",
    "Generate",
    "ArgumentDeclaration",
    "Modifier",
    "Pack",
    "Access",
    "FieldDecl",
    "VarDecls",
    "VarDecl",
    "NewInitializedArrayExpression",
    "FormalParameter",
    "Throws",
    "IdentifierAlias",
    "OperatorAlias",
    "MethodDeclaration",
    "RequareDeclaration",
    "EnsureDeclaration",
    "InvariantDeclaration",
    "RuleDeclaration",
    "Initializer",
    "Type",
    "ClosureType",
    "NonArrayType",
    "PrimitiveType",
    "Identifier",
    "QName",
    "CommaExpression",
    "RuleOrExpression",
    "RuleAndExpression",
    "RuleExpression",
    "RuleIstheExpression",
    "RuleIsoneofExpression",
    "RuleCutExpression",
    "Operator",
    "CastOperator",
    "Expression",
    "ReparseExpression",
    "CallExpression",
    "TypeClassExpression",
    "CallAccessExpression",
    "AccessExpression",
    "ArrayElementAccessExpression",
    "NewAccessExpression",
    "AnonymouseClosure",
    "ConstExpression",
    "NewExpression",
    "NewArrayExpression",
    "ReparseStatement",
    "LabeledStatement",
    "Block",
    "RuleBlock",
    "CondBlock",
    "CondStatement",
    "EmptyStatement",
    "StatementExpression",
    "SwitchStatement",
    "NormalCase",
    "PizzaCase",
    "IfStatement",
    "WhileStatement",
    "DoStatement",
    "ForStatement",
    "ForEachStatement",
    "GotoStatement",
    "BreakStatement",
    "ContinueStatement",
    "ReturnStatement",
    "ThrowStatement",
    "SynchronizedStatement",
    "TryStatement",
    "CatchInfo",
    "FinallyInfo",
  };
}

/* Generated By:JJTree: Do not edit this line. ASTIdentifier.java */

/*
 Copyright (C) 1997-1998, Forestro, http://forestro.com

 This file is part of the Kiev compiler.

 The Kiev compiler is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation.

 The Kiev compiler is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with the Kiev compiler; see the file License.  If not, write to
 the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.
*/

package kiev.parser;

import kiev.Kiev;
import kiev.stdlib.*;
import kiev.vlang.*;

import static kiev.stdlib.Debug.*;
import syntax kiev.Syntax;

/**
 * $Header: /home/CVSROOT/forestro/kiev/kiev/parser/ASTIdentifier.java,v 1.4.4.1 1999/05/29 21:03:06 max Exp $
 * @author Maxim Kizub
 * @version $Revision: 1.4.4.1 $
 *
 */

@node
@cfnode
public class ASTIdentifier extends Expr {
	public KString name;

	public ASTIdentifier() {
	}

	public ASTIdentifier(KString name) {
		this.name = name;
	}

	public ASTIdentifier(int pos, KString name) {
		super(0);
		this.pos = pos;
		this.name = name;
	}

	public void set(Token t) {
		if (t.image.startsWith("ID#"))
			this.name = ConstExpr.source2ascii(t.image.substring(4,t.image.length()-1));
		else
			this.name = KString.from(t.image);
        pos = t.getPos();
	}

	public ASTNode resolve(Type reqType) {
		if( name == Constants.nameFILE )
			return new ConstStringExpr(Kiev.curFile);
		else if( name == Constants.nameLINENO )
			return new ConstIntExpr(pos>>>11);
		else if( name == Constants.nameMETHOD ) {
			if( PassInfo.method != null )
				return new ConstStringExpr(PassInfo.method.name.name);
			else
				return new ConstStringExpr(nameInit);
		}
		else if( name == Constants.nameDEBUG )
			return new ConstBoolExpr(Kiev.debugOutputA);
		else if( name == Constants.nameReturnVar ) {
			Kiev.reportWarning(pos,"Keyword '$return' is deprecated. Replace with 'Result', please");
			name = Constants.nameResultVar;
		}
		ASTNode@ v;
		ResInfo info = new ResInfo();
		if( !PassInfo.resolveNameR(v,info,name) ) {
			// May be a function
//			if( reqType instanceof MethodType ) {
//				if( PassInfo.resolveMethodR(v,null,name,(MethodType)reqType) ) {
//					ASTAnonymouseClosure ac = new ASTAnonymouseClosure();
//					ac.pos = pos;
//					ac.parent = parent;
//					ac.rettype = new TypeRef(pos, ((MethodType)reqType).ret);
//					for(int i=0; i < ac.params.length; i++)
//						ac.params[i] = new FormPar(pos,KString.from("arg"+(i+1)),reqType.args[i],0);
//					BlockStat bs = new BlockStat(pos,ac,ASTNode.emptyArray);
//					Expr[] cargs = new Expr[ac.params.length];
//					for(int i=0; i < cargs.length; i++)
//						cargs[i] = new VarAccessExpr(pos,this,(Var)ac.params[i]);
//					args = cargs;
//					ASTCallExpression ace = new ASTCallExpression();
//					ace.func = new ASTIdentifier(pos,name);
//					foreach (Expr e; cargs)
//						ace.args.add(e);
//					if( ac.rettype.getType() == Type.tpVoid ) {
//						bs.addStatement(new ExprStat(pos,bs,ace));
//						bs.addStatement(new ReturnStat(pos,bs,null));
//					} else {
//						bs.addStatement(new ReturnStat(pos,bs,ace));
//					}
//					ac.body = bs;
//					return ac.resolve(reqType);
//				}
//			}
			if( name.startsWith(Constants.nameDEF) ) {
				String prop = name.toString().substring(2);
				String val = Env.getProperty(prop);
				if( val == null ) val = Env.getProperty(prop.replace('_','.'));
				if( val != null ) {
					if( reqType == null || reqType == Type.tpString)
						return new ConstStringExpr(KString.from(val));
					if( reqType.isBoolean() )
						if( val == "" )
							return new ConstBoolExpr(true);
						else
							return new ConstBoolExpr(Boolean.valueOf(val).booleanValue());
					if( reqType.isInteger() )
						return new ConstIntExpr(Integer.valueOf(val).intValue());
					if( reqType.isNumber() )
						return new ConstDoubleExpr(Double.valueOf(val).doubleValue());
					return new ConstStringExpr(KString.from(val));
				}
				if( reqType.isBoolean() )
					return new ConstBoolExpr(false);
				return new ConstNullExpr();
			}
			throw new CompilerException(pos,"Unresolved identifier "+name);
		}
		Expr e = null;
		if( v instanceof BaseStruct ) {
			if( reqType != null && reqType.equals(Type.tpInt) ) {
				BaseStruct s = (BaseStruct)v;
				if( s.isPizzaCase() ) {
					Struct pc = (Struct)s;
					PizzaCaseAttr case_attr = (PizzaCaseAttr)pc.getAttr(attrPizzaCase);
					if( case_attr == null ) return pc;
					return new ConstIntExpr(case_attr.caseno).resolve(reqType);
				}
			}
			((BaseStruct)v).checkResolved();
			TypeNameRef tr = new TypeNameRef(this,((BaseStruct)v).type);
			return tr;
		}
		else if( v instanceof TypeRef ) {
			return (TypeRef)v;
		}
		else {
			e = info.buildAccess(pos, null, v);
		}
		this.replaceWith(e);
		return e.resolve(reqType);
	}

	public int		getPriority() { return 256; }

	public KString toKString() {
		return name;
	}
    
	public String toString() {
		return name.toString();
	}

	public Dumper toJava(Dumper dmp) {
		return dmp.space().append(name).space();
	}
}


/* Generated By:JJTree: Do not edit this line. ASTAnonymouseClosure.java */

/*
 Copyright (C) 1997-1998, Forestro, http://forestro.com

 This file is part of the Kiev compiler.

 The Kiev compiler is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation.

 The Kiev compiler is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with the Kiev compiler; see the file License.  If not, write to
 the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.
*/

package kiev.parser;

import kiev.Kiev;
import kiev.vlang.*;
import kiev.stdlib.*;

/**
 * $Header: /home/CVSROOT/forestro/kiev/kiev/parser/ASTAnonymouseClosure.java,v 1.5 1999/01/29 01:22:21 max Exp $
 * @author Maxim Kizub
 * @version $Revision: 1.5 $
 *
 */

public class ASTAnonymouseClosure extends Expr {
    public ASTNode[]	params = ASTNode.emptyArray;
    public ASTNode		type;
    public Statement	body;
	public Expr			new_closure;

	public ASTAnonymouseClosure(int id) {
		super(0);
	}

  	public void set(Token t) {
    	pos = t.getPos();
	}

	public void jjtAddChild(ASTNode n, int i) {
		if( n instanceof ASTFormalParameter ) {
			params = (ASTNode[])Arrays.append(params,n);
		}
		else if( n instanceof ASTType ) {
			type = n;
		}
		else if( n instanceof Statement ) {
			body = (Statement)n;
		}
		else {
			throw new CompilerException(n.getPos(),"Bad child number "+i+": "+n);
		}
    }

	public ASTNode resolve(Type reqType) {
		if( isResolved() ) return new_closure;
		if (Kiev.kaffe) {
			/* Create private method */
			Method m;
			Type ret;
			if( type instanceof ASTType )
				ret = ((ASTType)type).pass2();
			else
				ret = (Type)type;
			if( ret != Type.tpRule ) {
				ASTMethodDeclaration md = new ASTMethodDeclaration(0);
				md.name = KString.from("fun$"+this.hashCode());
				if( PassInfo.method==null || PassInfo.method.isStatic())
					md.modifier = new ASTNode[]{ASTModifier.modPRIVATE,ASTModifier.modSTATIC};
				else
					md.modifier = new ASTNode[]{ASTModifier.modPRIVATE};
				md.params = params;
				md.type = ret;
				md.body = body;
				md.parent = PassInfo.clazz;
				m = md.pass3();
			} else {
				ASTRuleDeclaration md = new ASTRuleDeclaration(0);
				md.name = KString.from("rule_fun$"+this.hashCode());
				if( PassInfo.method==null || PassInfo.method.isStatic())
					md.modifier = new ASTNode[]{ASTModifier.modPRIVATE,ASTModifier.modSTATIC};
				else
					md.modifier = new ASTNode[]{ASTModifier.modPRIVATE};
				md.params = params;
				md.body = body;
				md.parent = PassInfo.clazz;
				m = md.pass3();
			}
			m.setLocalMethod(true);
			m.resolve(null);
			new_closure = new NewClosure(pos,m);
			new_closure.parent = parent;
			new_closure = (Expr)new_closure.resolve(reqType);
		} else {
			ClazzName clname = ClazzName.fromBytecodeName(
				new KStringBuffer(PassInfo.clazz.name.bytecode_name.len+8)
					.append_fast(PassInfo.clazz.name.bytecode_name)
					.append_fast((byte)'$')
					.append(PassInfo.clazz.anonymouse_inner_counter)
					.toKString(),
				false
			);
			Struct me = Env.newStruct(clname,PassInfo.clazz,flags,true);
			me.setResolved(true);
			me.setLocal(true);
			me.setAnonymouse(true);
			if( PassInfo.method==null || PassInfo.method.isStatic() ) me.setStatic(true);
//			else System.out.println("Nonstatic fun "+this+" in method "+PassInfo.method);
			me.parent = parent;
			SourceFileAttr sfa = new SourceFileAttr(Kiev.curFile);
			me.addAttr(sfa);
			if( Env.getStruct(Type.tpClosureClazz.name) == null )
				throw new RuntimeException("Core class "+Type.tpClosureClazz.name+" not found");
			me.super_clazz = Type.tpClosureClazz.type;

			Type[] types = new Type[params.length];
			Var[] vars = new Var[params.length];
			for(int i=0; i < types.length; i++) {
				if( params[i] instanceof Var )
					vars[i] = (Var)params[i];
				else
					vars[i] = ((ASTFormalParameter)params[i]).pass3();
				types[i] = vars[i].type;
			}
			Type ret;
			if( type instanceof ASTType )
				ret = ((ASTType)type).pass2();
			else
				ret = (Type)type;
			me.type = MethodType.newMethodType(me,null,types,ret);

			ASTNode[] members;
			if( ret != Type.tpRule ) {
				ASTMethodDeclaration md = new ASTMethodDeclaration(0);
				KString call_name;
				if( ret.isReference() ) md.name = KString.from("call_Object");
				else md.name = KString.from("call_"+ret);
				md.modifier = new ASTNode[]{ASTModifier.modPUBLIC};
				if( ret.isReference() )
					md.type = Type.tpObject;
				else
					md.type = type;
				md.body = body;
				md.parent = me;
				members = new ASTNode[]{md};
			} else {
				ASTRuleDeclaration md = new ASTRuleDeclaration(0);
				md.name = KString.from("call_rule");
				md.body = body;
				md.parent = me;
				members = new ASTNode[]{md};
			}

			ASTNode[] stats;
			if( body instanceof ASTBlock )
				stats = ((ASTBlock)body).stats;
			else
				stats = ((BlockStat)body).stats;
			for(int i=0; i < vars.length; i++) {
				Var v = vars[i];
				Expr val = new ContainerAccessExpr(pos,
					new FieldAccessExpr(pos,(Field)Type.tpClosureClazz.resolveName(nameClosureArgs)),
					new ConstExpr(v.getPos(),new Integer(i)));
				DeclStat dc = new DeclStat(v.getPos(),body,v);
				if( !v.type.isReference() ) {
					Type celltp = Type.getProxyType(v.type);
//					if( v.type == Type.tpBoolean )		celltp = Type.tpCellBoolean;
//					else if( v.type == Type.tpByte )	celltp = Type.tpCellByte;
//					else if( v.type == Type.tpChar )	celltp = Type.tpCellChar;
//					else if( v.type == Type.tpShort )	celltp = Type.tpCellShort;
//					else if( v.type == Type.tpInt )		celltp = Type.tpCellInt;
//					else if( v.type == Type.tpLong )	celltp = Type.tpCellLong;
//					else if( v.type == Type.tpFloat )	celltp = Type.tpCellFloat;
//					else if( v.type == Type.tpDouble )	celltp = Type.tpCellDouble;
					val = new AccessExpr(v.getPos(),dc,
							new CastExpr(v.getPos(),celltp,val,true),
							(Field)celltp.clazz.resolveName(nameCellVal)
						);
				} else {
					val = new CastExpr(v.getPos(),v.type,val,true);
				}
				dc.init = val;
				dc.init.parent = dc;
				stats = (ASTNode[])Arrays.insert(stats,dc,i);
			}

			if( body instanceof ASTBlock )
				((ASTBlock)body).stats = stats;
			else
				((BlockStat)body).stats = stats;

			me = ASTTypeDeclaration.pass3(me,members);
			new_closure = new NewClosure(pos,me.type);
			new_closure.parent = parent;
			new_closure = (Expr)new_closure.resolve(reqType);
		}
		setResolved(true);
		return new_closure;
	}

	public int		getPriority() { return Constants.opAccessPriority; }

	public String toString() {
		StringBuffer sb = new StringBuffer();
    	sb.append("fun (");
		for(int i=0; i < params.length; i++) {
			sb.append(params[i]);
			if( i < params.length-1 ) sb.append(',');
		}
		sb.append(") {...}");
		return sb.toString();
	}

	public Dumper toJava(Dumper dmp) {
    	dmp.append("fun").space().append('(');
		for(int i=0; i < params.length; i++) {
			params[i].toJava(dmp);
			if( i < params.length-1 ) dmp.append(',');
		}
		dmp.append(')').space();
		body.toJava(dmp);
		return dmp;
	}
}

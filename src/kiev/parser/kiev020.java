/* Generated By:JJTree&JavaCC: Do not edit this line. kiev020.java */
package kiev.parser;

import kiev.Kiev;
import kiev.Kiev.Ext;
import kiev.vlang.*;

/*{

import syntax kiev.parser.TypeAliases;
import static kiev.vlang.AccessFlags.*;

typedef NArr<ASTArgumentDeclaration> NArrArgDecls;
typedef NArr<TypeRef> NArrTypeRefs;

}*/

public class kiev020/*@bgen(jjtree)*/implements kiev020TreeConstants, kiev020Constants {/*@bgen(jjtree)*/
  protected static JJTkiev020State jjtree = new JJTkiev020State();
        public static boolean   interface_only = false;
        public static boolean   reparse_body = false;
        public static int               reparse_pos = 0;
        public static PreScanneable             presc = null;

        public static boolean   declMode = true;

        static JJTkiev020State getJJTree() { return jjtree; }

    /** Report Parser Error (Exception) */
        public static void rpe(String msg, ParseError e) {
                int pos;
                if( token==null ) pos = 0;
                else if( token.next==null ) pos = token.getPos();
                else pos = token.next.getPos();
                if( kiev.Kiev.debug ) {
                        kiev.Kiev.reportParserError(pos, msg, e);
                } else {
                        kiev.Kiev.reportParserError(pos, msg);
                }
        }

    /** Report other Error (Exception) */
        public static void rperr(Throwable e) throws Throwable {
                int pos;
                if( token==null ) pos = 0;
                else if( token.next==null ) pos = token.getPos();
                else pos = token.next.getPos();
                if( kiev.Kiev.debug ) {
                        kiev.Kiev.reportParserError(pos, "Internal error:\n"+e);
                } else {
                        kiev.Kiev.reportParserError(pos, "Internal error");
                }
                throw e;
        }

        public void reset() {
                jjtree.reset();
        }

        private static boolean checkNoSpace(Token t1, Token t2) {
                return t1.endLine == t2.beginLine && t1.endColumn+1 == t2.beginColumn;
        }

        public static final int[] noColonTokenSet = new int[]{COLON};

        public static int[] no_tokens;

        private static boolean notAToken(Token t) {
                if( no_tokens == null ) return true;
                for(int i=0; i < no_tokens.length; i++) {
                        if( t.kind == no_tokens[i] ) return false;
                }
                return true;
        }

        private static boolean labledStatementLA() {
                for(int idx=1; ;idx+=2) {
                        if (getToken(idx).kind != IDENTIFIER || getToken(idx+1).kind != COLON)
                                return false;
                        switch(getToken(idx+2).kind) {
                        case LBRACE:
                        case SEMICOLON:
                        case SWITCH:
                        case IF:
                        case WHILE:
                        case DO:
                        case FOR:
                        case FOREACH:
                        case BREAK:
                        case CONTINUE:
                        case RETURN:
                        case THROW:
                        case SYNCHRONIZED:
                        case WITH:
                        case TRY:
                        case GOTO:
                        case REPARSE_STATEMENT:
                                return true;
                        }
                }
        }

        private static boolean operatorLA(int tk) {
                switch( getToken(tk).kind ) {
                case ASSIGN:
                case ASSIGN2:
                case LT:
                case GT:
                case COLON:
                case QUESTION:
                case ARROW:
                case BANG:
                case TILDE:
                case EQ:
                case LE:
                case GE:
                case NE:
                case SC_OR:
                case SC_AND:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                case STAR:
                case SLASH:
                case BIT_AND:
                case BIT_OR:
                case XOR:
                case REM:
                case LSHIFT:
                case PLUSASSIGN:
                case MINUSASSIGN:
                case STARASSIGN:
                case SLASHASSIGN:
                case ANDASSIGN:
                case ORASSIGN:
                case XORASSIGN:
                case REMASSIGN:
                case LSHIFTASSIGN:
                case RSIGNEDSHIFTASSIGN:
                case RUNSIGNEDSHIFTASSIGN:
                case OPERATOR_AT:
                case OPERATOR_SHARP:
                case OPERATOR:
                        return notAToken(getToken(tk));
                case OPERATOR_ID:
                        return true;
                }
                return false;
        }

        private static boolean castLA_Start() {
                int i = 1;
                Token t = getToken(i);
                if (t.kind == IDENTIFIER) {
                        String qname = t.image;
                        while( getToken(i+1).kind == DOT && getToken(i+2).kind == IDENTIFIER) {
                                i += 2;
                                qname = qname + "." + getToken(i).image;
                        }
                        switch (getToken(i+1).kind) {
                        case RPAREN:
                        case LT:
                        case LBRACKET:
                                break;
                        default:
                                return false;
                        }
                        try {
                                if( PassInfo.checkClassName(KString.from(qname)) ) {
                                        return true;
                                }
                        } catch( Exception e ) {}
                }
                return false;
        }

        private static boolean castLA() {
                if( getToken(1).kind != LPAREN ) return false;
                if( getToken(2).kind == CAST ) return true;
                if( getToken(2).kind == REINTERP ) return true;
                return castLA(1,LPAREN,RPAREN);
        }

        private static boolean castLA(int offs, int exp_kind1, int exp_kind2) {
                if( getToken(offs).kind != exp_kind1 ) return false;
                switch( getToken(offs+1).kind ) {
                case BOOLEAN: case CHAR: case BYTE:
                case SHORT: case INT: case LONG: case FLOAT:
                case DOUBLE: case VOID:
                        return true;
                case IDENTIFIER:
                        break;
                case LPAREN:
                        // Skip until matched ')' and check for "->"
                        {
                                int i = offs+2;
                                int depth = 1;
                                while( depth != 0 ) {
                                        switch(getToken(i++).kind) {
                                        case LPAREN: depth++; break;
                                        case RPAREN: depth--; break;
                                        }
                                }
                                if( getToken(i).kind==ARROW ) {
                                        return true;
                                } else {
                                        return false;
                                }
                        }
                default:
                        // TODO closure type
                        return false;
                }
                // Qualified name resolving to be a class name
                String qname = getToken(offs+1).image;
        scan_qname:
                for(int i=offs+2; ; i+=2) {
                        if( getToken(i).kind == DOT && getToken(i+1).kind == IDENTIFIER )
                                qname = qname+"."+getToken(i+1).image;
                        else {
                                switch( getToken(i).kind ) {
                                case RPAREN:
                                        if( exp_kind2 == RPAREN )  break scan_qname;
                                        else return false;
                                case GT:
                                        if( exp_kind2 == GT ) break scan_qname;
                                        else return false;
                                case LT:
                                        if( castLA(i,LT,GT) ) break scan_qname;
                                        else return false;
                                case LBRACKET:
                                        if( getToken(i+1).kind == RBRACKET ) {
                                                return true;
                                        }
                                        else return false;
                                case COMMA:
                                        if( exp_kind1 == LT ) break scan_qname;
                                        else return false;
                                default:
                                        return false;
                                }
                        }
                }
                try {
                        if( PassInfo.checkClassName(KString.from(qname)) ) {
                                return true;
                        }
                } catch( Exception e ) {}
                return false;
        }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  static final public ASTFileUnit FileUnit(String filename) throws ParseException {
 /*@bgen(jjtree) FileUnit */
  ASTFileUnit jjtn000 = new ASTFileUnit();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTPragma pr;
    try {
                ASTFileUnit n = jjtn000;
                Kiev.curFileUnit = jjtn000;
                jjtn000.filename = KString.from(filename);
                jjtn000.setPos(0);
                declMode = true;
                ASTModifiers modifiers;
      switch (jj_nt.kind) {
      case PACKAGE:
        n.pkg = Package();
        break;
      default:
        ;
      }
          PassInfo.push(n.pkg.clazz);
      try {
        label_1:
        while (true) {
          switch (jj_nt.kind) {
          case IMPORT:
          case OPERATOR_ID:
          case TYPEDEF:
          case PRAGMA:
            ;
            break;
          default:
            break label_1;
          }
          switch (jj_nt.kind) {
          case IMPORT:
            n.syntax += Import();
            break;
          case TYPEDEF:
            n.syntax += Typedef();
            break;
          case OPERATOR_ID:
            n.syntax += Opdef();
            break;
          case PRAGMA:
            pr        = Pragma();
                                       n.setPragma(pr); n.syntax += pr;
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        label_2:
        while (true) {
          if (jj_2_1(1)) {
            ;
          } else {
            break label_2;
          }
          modifiers = Modifiers();
          try {
            switch (jj_nt.kind) {
            case CLASS:
            case INTERFACE:
            case ENUM:
            case OPERATOR_AT:
              n.members += TypeDeclaration(modifiers, n);
              switch (jj_nt.kind) {
              case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
              default:
                ;
              }
              break;
            default:
              if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {
                n.members += SyntaxDeclaration(modifiers, n);
                switch (jj_nt.kind) {
                case SEMICOLON:
                  jj_consume_token(SEMICOLON);
                  break;
                default:
                  ;
                }
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          } catch (ParseError e) {
                                      rpe("Bad class declaration",e);
          } catch (Throwable e) {
                                     rperr(e);
          }
        }
      } finally {
                    {PassInfo.pop(n.pkg.clazz); }
      }
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                declMode = true;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTModifiers Modifiers() throws ParseException {
 /*@bgen(jjtree) Modifiers */
  ASTModifiers jjtn000 = new ASTModifiers();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_3;
        }
        try {
          switch (jj_nt.kind) {
          case OPERATOR_AT:
            jjtn000.annotations += Annotation();
            break;
          case ABSTRACT:
          case FINAL:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case STATIC:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOLATILE:
          case VIRTUAL:
          case FORWARD:
          case WRAPPER:
            Modifier();
            break;
          case PACKED:
            jjtn000.annotations += Pack();
            break;
          default:
            if (jj_2_3(1)) {
              jjtn000.acc          = Access();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } catch (ParseError e) {
                                      rpe("Bad modifiers",e);
        } catch (Throwable e) {
                                     rperr(e);
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtree.popNode(); {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public StructRef Package() throws ParseException {
    try {
      jj_consume_token(PACKAGE);
      QName();
      jj_consume_token(SEMICOLON);
    } catch (ParseError e) {
                              rpe("Bad package declaration",e);
    } catch (Throwable e) {
                             rperr(e);
    }
                ASTQName qn = (ASTQName)jjtree.popNode();
                Struct pkg = Env.newPackage(qn.toKString());
                StructRef r = new StructRef(pkg);
                r.pos = qn.pos;
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTPragma Pragma() throws ParseException {
 /*@bgen(jjtree) Pragma */
  ASTPragma jjtn000 = new ASTPragma();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRAGMA);
      switch (jj_nt.kind) {
      case PRAGMA_ENABLE:
        jj_consume_token(PRAGMA_ENABLE);
                                          jjtn000.enable = true;
        break;
      case PRAGMA_DISABLE:
        jj_consume_token(PRAGMA_DISABLE);
                                          jjtn000.enable = false;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        StringConstExpression();
        switch (jj_nt.kind) {
        case STRING_LITERAL:
          ;
          break;
        default:
          break label_4;
        }
      }
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtree.popNode(); {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTImport Import() throws ParseException {
 /*@bgen(jjtree) Import */
  ASTImport jjtn000 = new ASTImport();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(IMPORT);
        if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {
          jj_consume_token(IDENTIFIER);
                                      jjtn000.mode = Import.ImportMode.IMPORT_SYNTAX;
          switch (jj_nt.kind) {
          case IDENTIFIER:
            QName();
            break;
          default:
            ;
          }
        } else {
          switch (jj_nt.kind) {
          case PACKAGE:
            jj_consume_token(PACKAGE);
                                          jjtn000.mode = Import.ImportMode.IMPORT_PACKAGE;
            switch (jj_nt.kind) {
            case IDENTIFIER:
              QName();
              break;
            default:
              ;
            }
            break;
          case STATIC:
            jj_consume_token(STATIC);
                                          jjtn000.mode = Import.ImportMode.IMPORT_STATIC;
            QName();
            switch (jj_nt.kind) {
            case LPAREN:
            case DOT:
              switch (jj_nt.kind) {
              case DOT:
                jj_consume_token(DOT);
                jj_consume_token(STAR);
                                          jjtn000.star = true;
                break;
              case LPAREN:
                jj_consume_token(LPAREN);
                                                  jjtn000.of_method = true;
                jjtn000.args += Type();
                label_5:
                while (true) {
                  switch (jj_nt.kind) {
                  case COMMA:
                    ;
                    break;
                  default:
                    break label_5;
                  }
                  jj_consume_token(COMMA);
                  jjtn000.args += Type();
                }
                jj_consume_token(RPAREN);
                break;
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              ;
            }
            break;
          case IDENTIFIER:
            QName();
            switch (jj_nt.kind) {
            case LPAREN:
            case DOT:
              switch (jj_nt.kind) {
              case DOT:
                jj_consume_token(DOT);
                jj_consume_token(STAR);
                                          jjtn000.star = true;
                break;
              case LPAREN:
                jj_consume_token(LPAREN);
                                                  jjtn000.of_method = true;
                jjtn000.args += Type();
                label_6:
                while (true) {
                  switch (jj_nt.kind) {
                  case COMMA:
                    ;
                    break;
                  default:
                    break label_6;
                  }
                  jj_consume_token(COMMA);
                  jjtn000.args += Type();
                }
                jj_consume_token(RPAREN);
                break;
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              ;
            }
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(SEMICOLON);
      } catch (ParseError e) {
                              rpe("Bad import declaration",e);
      } catch (Throwable e) {
                             rperr(e);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtree.popNode(); {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTTypedef Typedef() throws ParseException {
 /*@bgen(jjtree) Typedef */
  ASTTypedef jjtn000 = new ASTTypedef();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTIdentifier id; ASTOperator op; ASTType tp;
    try {
          ASTTypedef n = jjtn000;
      try {
        jj_consume_token(TYPEDEF);
        if (jj_2_4(3) && (checkNoSpace(getToken(1),getToken(2)))) {
          id = Name();
          Operator();
                                          op = (ASTOperator)jjtree.popNode();
          tp = Type();
                          n.set(id, op, tp);
        } else if (jj_2_5(1)) {
          tp = Type();
          id = Name();
                          n.set(tp, id);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
      } catch (ParseError e) {
                              rpe("Bad typedef declaration",e);
      } catch (Throwable e) {
                             rperr(e);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtree.popNode(); {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTOpdef Opdef() throws ParseException {
 /*@bgen(jjtree) Opdef */
  ASTOpdef jjtn000 = new ASTOpdef();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPERATOR_ID);
      if (jj_2_6(1)) {
        Operator();
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          Identifier();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(COMMA);
      Identifier();
      jj_consume_token(COMMA);
      DecimalConstExpression();
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtree.popNode(); {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Struct SyntaxDeclaration(ASTModifiers modifiers, ASTNode parent) throws ParseException {
  Struct clazz; ASTIdentifier name;
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    // "syntax"
            name = Name();
                clazz = mkStruct(name, ACC_SYNTAX|ACC_PRIVATE|ACC_ABSTRACT, modifiers, parent);
          PassInfo.push(clazz);
    try {
      jj_consume_token(LBRACE);
      label_7:
      while (true) {
        switch (jj_nt.kind) {
        case OPERATOR_ID:
        case TYPEDEF:
          ;
          break;
        default:
          break label_7;
        }
        switch (jj_nt.kind) {
        case TYPEDEF:
          clazz.members += Typedef();
          break;
        case OPERATOR_ID:
          clazz.members += Opdef();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
    } finally {
                    PassInfo.pop(clazz);
    }
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  static final public Struct TypeDeclaration(ASTModifiers modifiers, ASTNode parent) throws ParseException {
  Struct clazz; ASTIdentifier name;
    switch (jj_nt.kind) {
    case CLASS:
      jj_consume_token(CLASS);
      name = Name();
                        clazz = mkStruct(name, 0, modifiers, parent);
      ClazzArguments(clazz);
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        if (jj_2_7(2147483647)) {
          clazz.super_bound = PrimitiveType();
        } else {
          switch (jj_nt.kind) {
          case IDENTIFIER:
            clazz.super_bound = NonArrayType();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        clazz.interfaces += NonArrayType();
        label_8:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_8;
          }
          jj_consume_token(COMMA);
          clazz.interfaces += NonArrayType();
        }
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case GENERATE:
        Generate(clazz.gens);
        break;
      default:
        ;
      }
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
      name = Name();
                        clazz = mkStruct(name, ACC_INTERFACE, modifiers, parent);
      ClazzArguments(clazz);
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        clazz.interfaces += NonArrayType();
        label_9:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_9;
          }
          jj_consume_token(COMMA);
          clazz.interfaces += NonArrayType();
        }
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case GENERATE:
        Generate(clazz.gens);
        break;
      default:
        ;
      }
      break;
    case OPERATOR_AT:
      jj_consume_token(OPERATOR_AT);
      jj_consume_token(INTERFACE);
      switch (jj_nt.kind) {
      case IDENTIFIER:
        name = Name();
        break;
      case VIRTUAL:
      case ALIAS:
      case PACKED:
        name = KeywordAsName();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                        clazz = mkStruct(name, ACC_INTERFACE|ACC_ANNOTATION, modifiers, parent);
      break;
    case ENUM:
      jj_consume_token(ENUM);
      name = Name();
                        clazz = mkStruct(name, ACC_ENUM|ACC_STATIC, modifiers, parent);
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        clazz.super_bound = PrimitiveType();
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          PassInfo.push(clazz);
    try {
      TypeBodyDeclaration(clazz);
    } finally {
                    PassInfo.pop(clazz);
    }
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  static final public void TypeBodyDeclaration(Struct clazz) throws ParseException {
  ASTModifiers modifiers;
          jjtree.openNodeScope(clazz);
    try {
      try {
        jj_consume_token(LBRACE);
      } catch (ParseError e) {
                                      rpe("'{' expected",e);
      } catch (Throwable e) {
                                     rperr(e);
      }
      try {
        if (clazz.isEnum()) {
          modifiers = Modifiers();
          EnumFieldDeclaration(modifiers);
          label_10:
          while (true) {
            switch (jj_nt.kind) {
            case COMMA:
              ;
              break;
            default:
              break label_10;
            }
            jj_consume_token(COMMA);
            modifiers = Modifiers();
            EnumFieldDeclaration(modifiers);
          }
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
        } else {
          ;
        }
      } catch (ParseError e) {
                                      rpe("Enumeration values are expected",e);
      } catch (Throwable e) {
                                     rperr(e);
      }
      try {
        label_11:
        while (true) {
          if (jj_2_8(1)) {
            ;
          } else {
            break label_11;
          }
          modifiers = Modifiers();
          if (jj_2_9(1)) {
            Initializer(modifiers);
          } else {
            switch (jj_nt.kind) {
            case INVARIANT:
              InvariantDeclaration(modifiers);
              switch (jj_nt.kind) {
              case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
              default:
                ;
              }
              break;
            case CLASS:
            case INTERFACE:
            case ENUM:
            case OPERATOR_AT:
              clazz.members += TypeDeclaration(modifiers, clazz);
              switch (jj_nt.kind) {
              case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
              default:
                ;
              }
              break;
            case CASE:
              clazz.members += CaseTypeDeclaration(modifiers, clazz);
              jj_consume_token(SEMICOLON);
              break;
            default:
              if (jj_2_10(2147483647)) {
                RuleDeclaration(modifiers);
              } else if (jj_2_11(2147483647)) {
                ConstructorDeclaration(modifiers);
              } else if (jj_2_12(2147483647)) {
                MethodDeclaration(modifiers);
              } else if (jj_2_13(2147483647)) {
                FieldDecls(modifiers);
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      } catch (ParseError e) {
                                      rpe("Field, method or class declaration expected",e);
      } catch (Throwable e) {
                                     rperr(e);
      }
      try {
        jj_consume_token(RBRACE);
      } catch (ParseError e) {
                                      rpe("'}' expected",e);
      } catch (Throwable e) {
                                     rperr(e);
      }
    } finally {
                    {jjtree.closeNodeScope(clazz, true); ASTNode n = jjtree.popNode(); Debug.assert(clazz==n); }
    }
  }

  static final public void EnumFieldDeclaration(ASTModifiers modifiers) throws ParseException {
 /*@bgen(jjtree) EnumFieldDeclaration */
  ASTEnumFieldDeclaration jjtn000 = new ASTEnumFieldDeclaration();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          jjtn000.jjtAddChild(modifiers, -1);
      try {
        Identifier();
        switch (jj_nt.kind) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          DecimalConstExpression();
          break;
        default:
          ;
        }
        switch (jj_nt.kind) {
        case COLON:
          jj_consume_token(COLON);
          StringConstExpression();
          break;
        default:
          ;
        }
      } catch (ParseError e) {
                              rpe("Enumeration values are expected",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public Struct CaseTypeDeclaration(ASTModifiers modifiers, Struct parent) throws ParseException {
  ASTIdentifier name; Struct clazz;
    jj_consume_token(CASE);
    name = Name();
                clazz = mkStruct(name, ACC_PIZZACASE|ACC_STATIC, modifiers, parent);
                clazz.super_type = parent.type;
    ClazzArguments(clazz);
          jjtree.openNodeScope(clazz);
    try {
      switch (jj_nt.kind) {
      case LPAREN:
        jj_consume_token(LPAREN);
        try {
          if (jj_2_14(1)) {
            modifiers = Modifiers();
            FormalParameter(modifiers);
            label_12:
            while (true) {
              switch (jj_nt.kind) {
              case COMMA:
                ;
                break;
              default:
                break label_12;
              }
              jj_consume_token(COMMA);
              modifiers = Modifiers();
              FormalParameter(modifiers);
            }
          } else {
            ;
          }
        } catch (ParseError e) {
                                              rpe("Formal parameter(s) expected",e);
        } catch (Throwable e) {
                                             rperr(e);
        }
        jj_consume_token(RPAREN);
        break;
      default:
        ;
      }
    } finally {
                    {jjtree.closeNodeScope(clazz, true); ASTNode n = jjtree.popNode(); Debug.assert(clazz==n); }
    }
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  static final public void ClazzArguments(ASTNode parent) throws ParseException {
    switch (jj_nt.kind) {
    case LT:
      jj_consume_token(LT);
      try {
        ArgumentDeclaration(parent);
        label_13:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_13;
          }
          jj_consume_token(COMMA);
          ArgumentDeclaration(parent);
        }
      } catch (ParseError e) {
                                      rpe("Class's argument expected",e);
      } catch (Throwable e) {
                                     rperr(e);
      }
      jj_consume_token(GT);
      break;
    default:
      ;
    }
  }

  static final public void Generate(NArrTypeRefs types) throws ParseException {
  Token t; ASTNonArrayType tp;
    jj_consume_token(GENERATE);
    try {
                  tp = new ASTNonArrayType(new ASTQName());
      jj_consume_token(LT);
      switch (jj_nt.kind) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case RULE:
        tp.children += PrimitiveType();
        break;
      case IDENTIFIER:
        tp.children += Name();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_14:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_14;
        }
        jj_consume_token(COMMA);
        switch (jj_nt.kind) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case VOID:
        case RULE:
          tp.children += PrimitiveType();
          break;
        case IDENTIFIER:
          tp.children += Name();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(GT);
                  types += tp;
      label_15:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_15;
        }
        jj_consume_token(COMMA);
                          tp = new ASTNonArrayType(new ASTQName());
        jj_consume_token(LT);
        switch (jj_nt.kind) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case VOID:
        case RULE:
          tp.children += PrimitiveType();
          break;
        case IDENTIFIER:
          tp.children += Name();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_16:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_16;
          }
          jj_consume_token(COMMA);
          switch (jj_nt.kind) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case VOID:
          case RULE:
            tp.children += PrimitiveType();
            break;
          case IDENTIFIER:
            tp.children += Name();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(GT);
                          types += tp;
      }
    } catch (ParseError e) {
                              rpe("Bad $generate directive",e);
    } catch (Throwable e) {
                             rperr(e);
    }
  }

  static final public BaseStruct ArgumentDeclaration(ASTNode parent) throws ParseException {
  ASTModifiers modifiers; ASTIdentifier name; BaseStruct arg;
    modifiers = Modifiers();
    name      = Name();
          arg = mkStructArg(name, modifiers, parent);
    switch (jj_nt.kind) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      arg.super_bound = NonArrayType();
      break;
    default:
      ;
    }
          {if (true) return arg;}
    throw new Error("Missing return statement in function");
  }

  static final public void Modifier() throws ParseException {
 /*@bgen(jjtree) Modifier */
  ASTModifier jjtn000 = new ASTModifier();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      switch (jj_nt.kind) {
      case PUBLIC:
        t= jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        t= jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        t= jj_consume_token(PRIVATE);
        break;
      case STATIC:
        t= jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        t= jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        t= jj_consume_token(FINAL);
        break;
      case NATIVE:
        t= jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        t= jj_consume_token(SYNCHRONIZED);
        break;
      case TRANSIENT:
        t= jj_consume_token(TRANSIENT);
        break;
      case VOLATILE:
        t= jj_consume_token(VOLATILE);
        break;
      case VIRTUAL:
        t= jj_consume_token(VIRTUAL);
        break;
      case FORWARD:
        t= jj_consume_token(FORWARD);
        break;
      case WRAPPER:
        t= jj_consume_token(WRAPPER);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.set(t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public Meta Pack() throws ParseException {
  Token t; int size=-1; int offset=-1; String packer=null;
    jj_consume_token(PACKED);
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
      t= jj_consume_token(INTEGER_LITERAL);
                                      size = Integer.parseInt(t.image); t = null;
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        t= jj_consume_token(IDENTIFIER);
                                 packer = t.image; t = null;
        jj_consume_token(COMMA);
        t= jj_consume_token(INTEGER_LITERAL);
                                      offset = Integer.parseInt(t.image); t = null;
        break;
      default:
        ;
      }
      break;
    default:
      ;
    }
                MetaPacked mp = new MetaPacked();
                mp.size       = size;
                mp.offset     = offset;
                mp.fld        = KString.from(packer);
                {if (true) return mp;}
    throw new Error("Missing return statement in function");
  }

  static final public Access Access() throws ParseException {
  int acc;      int accflags = 0; int offset = 6;
    if (Kiev.enabled(Ext.Access)) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ACCESS);
    acc = AccessSpec();
                                        for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
    switch (jj_nt.kind) {
    case COMMA1:
      jj_consume_token(COMMA1);
      acc = AccessSpec();
                                        for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
      switch (jj_nt.kind) {
      case COMMA1:
        jj_consume_token(COMMA1);
        acc = AccessSpec();
                                        for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
        switch (jj_nt.kind) {
        case COMMA1:
          jj_consume_token(COMMA1);
          acc = AccessSpec();
                                        for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
          break;
        default:
          ;
        }
        break;
      default:
        ;
      }
      break;
    default:
      ;
    }
          {if (true) return new Access(accflags);}
    throw new Error("Missing return statement in function");
  }

  static final public int AccessSpec() throws ParseException {
    switch (jj_nt.kind) {
    case READ_ONLY:
      jj_consume_token(READ_ONLY);
                                  {if (true) return 2;}
      break;
    case WRITE_ONLY:
      jj_consume_token(WRITE_ONLY);
                          {if (true) return 1;}
      break;
    case READ_WRITE:
      jj_consume_token(READ_WRITE);
                          {if (true) return 3;}
      break;
    case NO_READ_WRITE:
      jj_consume_token(NO_READ_WRITE);
                          {if (true) return 0;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTIdentifier KeywordAsName() throws ParseException {
  Token t; ASTIdentifier id;
    switch (jj_nt.kind) {
    case VIRTUAL:
      t= jj_consume_token(VIRTUAL);
      break;
    case ALIAS:
      t= jj_consume_token(ALIAS);
      break;
    case PACKED:
      t= jj_consume_token(PACKED);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                id = new ASTIdentifier();
                jjtree.openNodeScope(id);
                id.set(t);
                jjtree.closeNodeScope(id, true);
                t = null;
                jjtree.popNode();
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTIdentifier KeywordAsIdentifier() throws ParseException {
  Token t; ASTIdentifier id;
    switch (jj_nt.kind) {
    case VIRTUAL:
      t= jj_consume_token(VIRTUAL);
      break;
    case ALIAS:
      t= jj_consume_token(ALIAS);
      break;
    case PACKED:
      t= jj_consume_token(PACKED);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                id = new ASTIdentifier();
                jjtree.openNodeScope(id);
                id.set(t);
                jjtree.closeNodeScope(id, true);
                t = null;
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTMeta Annotation() throws ParseException {
 /*@bgen(jjtree) Meta */
  ASTMeta jjtn000 = new ASTMeta();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTIdentifier id; MetaValue v;
    try {
          ASTMeta n = jjtn000;
      jj_consume_token(OPERATOR_AT);
      switch (jj_nt.kind) {
      case IDENTIFIER:
        id = Name();
        break;
      case VIRTUAL:
      case ALIAS:
      case PACKED:
        id = KeywordAsName();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                n.pos = id.pos; n.type = new ASTNonArrayType(id);
      switch (jj_nt.kind) {
      case LPAREN:
        jj_consume_token(LPAREN);
        if (jj_2_17(1)) {
          if (jj_2_15(2147483647)) {
            AnnotationValues(n);
          } else if (jj_2_16(1)) {
            v = AnnotationValueAny();
                                                   n.set(v);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtree.popNode(); {if (true) return n;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void AnnotationValues(ASTMeta m) throws ParseException {
  ASTIdentifier id; MetaValue v;
    id = Name();
    jj_consume_token(ASSIGN);
    v = AnnotationValueAny();
          v.type = new MetaValueType(id.name); m.set(v);
    label_17:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_17;
      }
      jj_consume_token(COMMA);
      id = Name();
      jj_consume_token(ASSIGN);
      v = AnnotationValueAny();
                  v.type = new MetaValueType(id.name); m.set(v);
    }
  }

  static final public MetaValue AnnotationValueAny() throws ParseException {
  ASTNode n; MetaValue v;
    if (jj_2_18(2147483647)) {
      n = Annotation();
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = n;
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        v = AnnotationValueValueArrayInitializer();
        break;
      default:
        if (jj_2_19(1)) {
          ExpressionNT(null);
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = (ASTNode)jjtree.popNode();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public MetaValueScalar AnnotationValueScalar() throws ParseException {
  ASTNode n; MetaValueScalar v;
    if (jj_2_20(2147483647)) {
      n = Annotation();
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = n;
    } else if (jj_2_21(1)) {
      ExpressionNT(null);
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = (ASTNode)jjtree.popNode();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public MetaValueArray AnnotationValueValueArrayInitializer() throws ParseException {
  MetaValueScalar n; MetaValueArray v;
          v = new MetaValueArray();
    jj_consume_token(LBRACE);
    if (jj_2_22(1)) {
      n = AnnotationValueScalar();
                                              v.values.add(n.value);
      label_18:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_18;
        }
        jj_consume_token(COMMA);
        n = AnnotationValueScalar();
                                                      v.values.add(n.value);
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public void FieldDecls(ASTModifiers modifiers) throws ParseException {
  boolean old_declMode; ASTType type;
          old_declMode = declMode; declMode = false;
    try {
      type = Type();
      FieldDecl(modifiers, type, true);
      label_19:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_19;
        }
        jj_consume_token(COMMA);
        FieldDecl(modifiers, type, false);
      }
    } catch (ParseError e) {
                              rpe("Field declaration expected",e);
    } catch (Throwable e) {
                             rperr(e);
    } finally {
                  declMode = old_declMode;
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void FieldDecl(ASTModifiers modifiers, ASTType type, boolean first) throws ParseException {
 /*@bgen(jjtree) FieldDecl */
  ASTFieldDecl jjtn000 = new ASTFieldDecl();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
                if (first) {
                        jjtn000.modifiers = modifiers;
                        jjtn000.type = type;
                } else {
                        jjtn000.modifiers = (ASTModifiers)modifiers.copy();
                        jjtn000.type = (ASTType)type.copy();
                }
      Identifier();
      label_20:
      while (true) {
        switch (jj_nt.kind) {
        case LBRACKET:
          ;
          break;
        default:
          break label_20;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                    jjtn000.dim += 1;
      }
      switch (jj_nt.kind) {
      case ASSIGN:
      case ASSIGN2:
        switch (jj_nt.kind) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          break;
        case ASSIGN2:
          jj_consume_token(ASSIGN2);
                        jjtn000.of_wrapper=true;
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        VariableInitializer();
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VarDecls(ASTModifiers modifiers) throws ParseException {
 /*@bgen(jjtree) VarDecls */
  ASTVarDecls jjtn000 = new ASTVarDecls();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          jjtn000.jjtAddChild(modifiers,-1);
      try {
        jjtn000.type = Type();
      } catch (ParseError e) {
                              rpe("Type expected",e);
      } catch (Throwable e) {
                             rperr(e);
      }
      try {
        VarDecl();
        label_21:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_21;
          }
          jj_consume_token(COMMA);
          VarDecl();
        }
      } catch (ParseError e) {
                              rpe("Variable declaration expected",e);
      } catch (Throwable e) {
                             rperr(e);
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VarDecl() throws ParseException {
 /*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      label_22:
      while (true) {
        switch (jj_nt.kind) {
        case LBRACKET:
          ;
          break;
        default:
          break label_22;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                    jjtn000.dim += 1;
      }
      switch (jj_nt.kind) {
      case ASSIGN:
      case ASSIGN2:
        switch (jj_nt.kind) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          break;
        case ASSIGN2:
          jj_consume_token(ASSIGN2);
                        jjtn000.of_wrapper=true;
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        VariableInitializer();
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VariableInitializer() throws ParseException {
    switch (jj_nt.kind) {
    case LBRACE:
      ArrayInitializer();
      break;
    default:
      if (jj_2_23(1)) {
        Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ArrayInitializer() throws ParseException {
 /*@bgen(jjtree) NewInitializedArrayExpression */
  ASTNewInitializedArrayExpression jjtn000 = new ASTNewInitializedArrayExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(LBRACE);
      if (jj_2_25(2)) {
        VariableInitializer();
        label_23:
        while (true) {
          if (jj_2_24(2)) {
            ;
          } else {
            break label_23;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          ;
        }
      } else {
        ;
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setPos(t.getPos());
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public ASTFormalParameter FormalParameter(ASTModifiers modifiers) throws ParseException {
 /*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
          jjtn000.modifiers = modifiers;
      if (jj_2_26(1)) {
        jjtn000.type = Type();
        Identifier();
        label_24:
        while (true) {
          switch (jj_nt.kind) {
          case LBRACKET:
            ;
            break;
          default:
            break label_24;
          }
          t= jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                              jjtn000.type.addOperation(t);
        }
      } else {
        switch (jj_nt.kind) {
        case UNDERSCORE:
          t= jj_consume_token(UNDERSCORE);
                        jjtn000.set(t);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFormalParameter mmFormalParameter(ASTModifiers modifiers) throws ParseException {
 /*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
          jjtn000.modifiers = modifiers;
      if (jj_2_27(1)) {
        jjtn000.type = Type();
        if (!Kiev.javaMode && (getToken(1).image.equals(":"))) {
          jj_consume_token(COLON);
          jjtn000.mm_type = Type();
        } else {
          ;
        }
        Identifier();
        label_25:
        while (true) {
          switch (jj_nt.kind) {
          case LBRACKET:
            ;
            break;
          default:
            break label_25;
          }
          t= jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                              jjtn000.type.addOperation(t); if (jjtn000.mm_type != null) jjtn000.mm_type.addOperation(t);
        }
      } else {
        switch (jj_nt.kind) {
        case UNDERSCORE:
          t= jj_consume_token(UNDERSCORE);
                        jjtn000.set(t);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Throws() throws ParseException {
 /*@bgen(jjtree) Throws */
  ASTThrows jjtn000 = new ASTThrows();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
          ASTThrows n = jjtn000;
      t= jj_consume_token(THROWS);
                     n.setPos(t.getPos());
      try {
        n.children += NonArrayType();
        label_26:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_26;
          }
          jj_consume_token(COMMA);
          n.children += NonArrayType();
        }
      } catch (ParseError e) {
                              rpe("Throwable class name expected",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Alias() throws ParseException {
  Token t;
    jj_consume_token(ALIAS);
    try {
      if (jj_2_28(2)) {
        OperatorAlias();
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          IdentifierAlias();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseError e) {
                              rpe("Alias expected",e);
    } catch (Throwable e) {
                             rperr(e);
    }
  }

  static final public void IdentifierAlias() throws ParseException {
 /*@bgen(jjtree) IdentifierAlias */
  ASTIdentifierAlias jjtn000 = new ASTIdentifierAlias();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void OperatorAlias() throws ParseException {
 /*@bgen(jjtree) OperatorAlias */
  ASTOperatorAlias jjtn000 = new ASTOperatorAlias();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch (jj_nt.kind) {
      case OPERATOR_ID:
        jj_consume_token(OPERATOR_ID);
        jj_consume_token(LPAREN);
        DecimalConstExpression();
        jj_consume_token(COMMA);
        Identifier();
        jj_consume_token(COMMA);
        if (jj_2_29(1)) {
          Operator();
        } else {
          switch (jj_nt.kind) {
          case IDENTIFIER:
            Identifier();
            break;
          case LBRACKET:
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
                                  jjtn000.image = kiev.vlang.Constants.nameArrayOp;
            break;
          case NEW:
            jj_consume_token(NEW);
                                  jjtn000.image = kiev.vlang.Constants.nameNewOp;
            break;
          case CAST:
            jj_consume_token(CAST);
                                  jjtn000.image = kiev.vlang.Constants.nameCastOp;
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(RPAREN);
        break;
      case IDENTIFIER:
        t= jj_consume_token(IDENTIFIER);
                                 jjtn000.set(t);
        jj_consume_token(OPERATOR_ID);
        if (jj_2_30(1)) {
          Operator();
        } else {
          switch (jj_nt.kind) {
          case IDENTIFIER:
            Identifier();
            break;
          case LBRACKET:
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.image = kiev.vlang.Constants.nameArrayOp;
            break;
          case NEW:
            jj_consume_token(NEW);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                jjtn000.image = kiev.vlang.Constants.nameNewOp;
            break;
          case CAST:
            jj_consume_token(CAST);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.image = kiev.vlang.Constants.nameCastOp;
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MaybeSkipBlock() throws ParseException {
  boolean old_declMode;
    if (interface_only) {
      jj_consume_token(LBRACE);
                        Token tk = getToken(0);
                        PrescannedBody pbody = new PrescannedBody(tk.beginLine,tk.beginColumn);
                        Kiev.curFileUnit.addPrescannedBody(pbody);
                        int depth = 1;
                        do {
                                tk = getNextToken();
                                if( tk.kind == LBRACE ) depth++;
                                else if( tk.kind == RBRACE ) depth--;
                        } while( depth > 0 );
                        presc.pbody = pbody;
                        if( presc instanceof ASTCondDeclaration )
                                pbody.mode = PrescannedBody.CondBlockMode;
                        else if( presc instanceof ASTRuleDeclaration )
                                pbody.mode = PrescannedBody.RuleBlockMode;
                        else
                                pbody.mode = PrescannedBody.BlockMode;
    } else if (presc instanceof ASTCondDeclaration) {
      CondBlock();
    } else if (presc instanceof ASTRuleDeclaration) {
      RuleBlock();
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        Block();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void MethodDeclaration(ASTModifiers modifiers) throws ParseException {
 /*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
                ASTMethodDeclaration n = jjtn000;
                n.modifiers = modifiers;
      ClazzArguments(n);
      if (jj_2_31(2147483647)) {
        n.rettype = Type();
      } else {
        ;
      }
      Identifier();
      jj_consume_token(LPAREN);
      try {
        if (jj_2_34(1)) {
          modifiers = Modifiers();
          mmFormalParameter(modifiers);
          label_27:
          while (true) {
            if (jj_2_32(2)) {
              ;
            } else {
              break label_27;
            }
            jj_consume_token(COMMA);
            modifiers = Modifiers();
            mmFormalParameter(modifiers);
          }
          if (jj_2_33(2) && (Kiev.enabled(Ext.VarArgs))) {
            switch (jj_nt.kind) {
            case COMMA:
              jj_consume_token(COMMA);
              break;
            default:
              ;
            }
            jj_consume_token(VARARGS);
                                  jjtn000.setVarArgs(true);
          } else {
            ;
          }
        } else {
          ;
        }
      } catch (ParseError e) {
                                      rpe("Formal parameter(s) expected",e);
      } catch (Throwable e) {
                                     rperr(e);
      }
      jj_consume_token(RPAREN);
      label_28:
      while (true) {
        switch (jj_nt.kind) {
        case LBRACKET:
          ;
          break;
        default:
          break label_28;
        }
        t= jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                            n.rettype.addOperation(t);
      }
      label_29:
      while (true) {
        switch (jj_nt.kind) {
        case ALIAS:
          ;
          break;
        default:
          break label_29;
        }
        Alias();
      }
      switch (jj_nt.kind) {
      case THROWS:
        Throws();
        break;
      default:
        ;
      }
      try {
        label_30:
        while (true) {
          switch (jj_nt.kind) {
          case REQUIRE:
          case ENSURE:
            ;
            break;
          default:
            break label_30;
          }
          switch (jj_nt.kind) {
          case REQUIRE:
            RequareDeclaration();
            break;
          case ENSURE:
            EnsureDeclaration();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_35(2147483647)) {
                          presc = jjtn000;
          MaybeSkipBlock();
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
        } else {
          switch (jj_nt.kind) {
          case _DEFAULT:
          case SEMICOLON:
            switch (jj_nt.kind) {
            case _DEFAULT:
              jj_consume_token(_DEFAULT);
              n.annotation_default = AnnotationValueAny();
              break;
            default:
              ;
            }
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseError e) {
                              rpe("Method's body expected",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ConstructorDeclaration(ASTModifiers modifiers) throws ParseException {
 /*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
                ASTMethodDeclaration n = jjtn000;
                n.modifiers = modifiers;
      Identifier();
      jj_consume_token(LPAREN);
      try {
        if (jj_2_38(1)) {
          modifiers = Modifiers();
          mmFormalParameter(modifiers);
          label_31:
          while (true) {
            if (jj_2_36(2)) {
              ;
            } else {
              break label_31;
            }
            jj_consume_token(COMMA);
            modifiers = Modifiers();
            mmFormalParameter(modifiers);
          }
          if (jj_2_37(2) && (Kiev.enabled(Ext.VarArgs))) {
            switch (jj_nt.kind) {
            case COMMA:
              jj_consume_token(COMMA);
              break;
            default:
              ;
            }
            jj_consume_token(VARARGS);
                                  jjtn000.setVarArgs(true);
          } else {
            ;
          }
        } else {
          ;
        }
      } catch (ParseError e) {
                                      rpe("Formal parameter(s) expected",e);
      } catch (Throwable e) {
                                     rperr(e);
      }
      jj_consume_token(RPAREN);
      label_32:
      while (true) {
        switch (jj_nt.kind) {
        case ALIAS:
          ;
          break;
        default:
          break label_32;
        }
        Alias();
      }
      switch (jj_nt.kind) {
      case THROWS:
        Throws();
        break;
      default:
        ;
      }
      try {
        label_33:
        while (true) {
          switch (jj_nt.kind) {
          case REQUIRE:
          case ENSURE:
            ;
            break;
          default:
            break label_33;
          }
          switch (jj_nt.kind) {
          case REQUIRE:
            RequareDeclaration();
            break;
          case ENSURE:
            EnsureDeclaration();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_39(2147483647)) {
                          presc = jjtn000;
          MaybeSkipBlock();
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
        } else {
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseError e) {
                              rpe("Method's body expected",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RequareDeclaration() throws ParseException {
 /*@bgen(jjtree) RequareDeclaration */
  ASTRequareDeclaration jjtn000 = new ASTRequareDeclaration();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REQUIRE);
      try {
        if (jj_2_40(2147483647)) {
          jj_consume_token(LBRACKET);
          Identifier();
          jj_consume_token(RBRACKET);
        } else if (jj_2_41(2147483647)) {
          Identifier();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        CondBlock();
      } catch (ParseError e) {
                              rpe("Bad 'require' declaration",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EnsureDeclaration() throws ParseException {
 /*@bgen(jjtree) EnsureDeclaration */
  ASTEnsureDeclaration jjtn000 = new ASTEnsureDeclaration();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENSURE);
      try {
        if (jj_2_42(2147483647)) {
          jj_consume_token(LBRACKET);
          Identifier();
          jj_consume_token(RBRACKET);
        } else if (jj_2_43(2147483647)) {
          Identifier();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        CondBlock();
      } catch (ParseError e) {
                              rpe("Bad 'ensure' declaration",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void InvariantDeclaration(ASTModifiers modifiers) throws ParseException {
 /*@bgen(jjtree) InvariantDeclaration */
  ASTInvariantDeclaration jjtn000 = new ASTInvariantDeclaration();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          jjtn000.jjtAddChild(modifiers, -1);
      jj_consume_token(INVARIANT);
      try {
        if (jj_2_44(2147483647)) {
          jj_consume_token(LBRACKET);
          Identifier();
          jj_consume_token(RBRACKET);
        } else if (jj_2_45(2147483647)) {
          Identifier();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        CondBlock();
      } catch (ParseError e) {
                              rpe("Bad 'invariant' declaration",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RuleDeclaration(ASTModifiers modifiers) throws ParseException {
 /*@bgen(jjtree) RuleDeclaration */
  ASTRuleDeclaration jjtn000 = new ASTRuleDeclaration();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTBlock bl;
    try {
          jjtn000.jjtAddChild(modifiers, -1);
      jj_consume_token(RULE);
      Identifier();
      jj_consume_token(LPAREN);
      try {
        if (jj_2_46(1)) {
          modifiers = Modifiers();
          FormalParameter(modifiers);
          label_34:
          while (true) {
            switch (jj_nt.kind) {
            case COMMA:
              ;
              break;
            default:
              break label_34;
            }
            jj_consume_token(COMMA);
            modifiers = Modifiers();
            FormalParameter(modifiers);
          }
        } else {
          ;
        }
      } catch (ParseError e) {
                                      rpe("Formal parameter(s) expected",e);
      } catch (Throwable e) {
                                     rperr(e);
      }
      jj_consume_token(RPAREN);
      label_35:
      while (true) {
        switch (jj_nt.kind) {
        case ALIAS:
          ;
          break;
        default:
          break label_35;
        }
        Alias();
      }
      label_36:
      while (true) {
        if (jj_2_47(1)) {
          ;
        } else {
          break label_36;
        }
        modifiers = Modifiers();
        VarDecls(modifiers);
      }
      try {
        if (jj_2_48(2147483647)) {
                          presc = jjtn000;
          MaybeSkipBlock();
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
        } else {
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseError e) {
                              rpe("Method's body expected",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Initializer(ASTModifiers modifiers) throws ParseException {
 /*@bgen(jjtree) Initializer */
  ASTInitializer jjtn000 = new ASTInitializer();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          jjtn000.jjtAddChild(modifiers, -1);
      try {
                  presc = jjtn000;
        MaybeSkipBlock();
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
      } catch (ParseError e) {
                              rpe("Initializer's body expected",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * Type, name and expression syntax follows.
 */
  static final public ASTType Type() throws ParseException {
  ASTType res; Token t;
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
    case IDENTIFIER:
      res = SimpleType();
      label_37:
      while (true) {
        if (jj_2_49(1)) {
          ;
        } else {
          break label_37;
        }
        if (jj_2_50(2)) {
          t= jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                          res.addOperation(t);
        } else if (jj_2_51(1) && (Kiev.enabled(Ext.Typedef)&&checkNoSpace(getToken(0),getToken(1)))) {
          t= TypeOperatorChar();
                          res.addOperation(t);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      if (Kiev.enabled(Ext.With)) {
        res = ClosureType();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTType ClosureType() throws ParseException {
 /*@bgen(jjtree) ClosureType */
  ASTClosureType jjtn000 = new ASTClosureType();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
          ASTClosureType n = jjtn000;
      t= jj_consume_token(LPAREN);
                n.setPos(t.getPos());
      if (jj_2_52(1)) {
        n.types += Type();
        label_38:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_38;
          }
          jj_consume_token(COMMA);
          n.types += Type();
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(ARROW);
      n.types += Type();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtree.popNode(); {if (true) return n;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTType SimpleType() throws ParseException {
  ASTType tp;
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
      tp = PrimitiveType();
                  {if (true) return new ASTNonArrayType((ASTPrimitiveType)tp);}
      break;
    case IDENTIFIER:
      tp = NonArrayType();
                  {if (true) return tp;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTType NonArrayType() throws ParseException {
 /*@bgen(jjtree) NonArrayType */
  ASTNonArrayType jjtn000 = new ASTNonArrayType();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
          ASTNonArrayType n = jjtn000;
      try {
        QName();
                          n.children += jjtree.popNode();
        if (jj_2_53(1) && (Kiev.enabled(Ext.Generics))) {
          jj_consume_token(LT);
          n.children += Type();
          label_39:
          while (true) {
            switch (jj_nt.kind) {
            case COMMA:
              ;
              break;
            default:
              break label_39;
            }
            jj_consume_token(COMMA);
            n.children += Type();
          }
          jj_consume_token(GT);
        } else {
          ;
        }
        label_40:
        while (true) {
          if (jj_2_54(1) && (Kiev.enabled(Ext.Typedef)&&checkNoSpace(getToken(0),getToken(1)))) {
            ;
          } else {
            break label_40;
          }
          t= TypeOperatorChar();
                          n.addOperation(t);
        }
      } catch (ParseError e) {
                              rpe("Bad type specification",e);
      } catch (Throwable e) {
                             rperr(e);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtree.popNode(); {if (true) return n;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTType PrimitiveType() throws ParseException {
 /*@bgen(jjtree) PrimitiveType */
  ASTPrimitiveType jjtn000 = new ASTPrimitiveType();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case BOOLEAN:
        t= jj_consume_token(BOOLEAN);
        break;
      case CHAR:
        t= jj_consume_token(CHAR);
        break;
      case BYTE:
        t= jj_consume_token(BYTE);
        break;
      case SHORT:
        t= jj_consume_token(SHORT);
        break;
      case INT:
        t= jj_consume_token(INT);
        break;
      case LONG:
        t= jj_consume_token(LONG);
        break;
      case FLOAT:
        t= jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        t= jj_consume_token(DOUBLE);
        break;
      case VOID:
        t= jj_consume_token(VOID);
        break;
      case RULE:
        t= jj_consume_token(RULE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.set(t); jjtree.popNode(); {if (true) return jjtn000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTIdentifier Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.set(t); {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTIdentifier Name() throws ParseException {
  ASTIdentifier id;
    id = Identifier();
          jjtree.popNode(); {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  static final public void QName() throws ParseException {
 /*@bgen(jjtree) QName */
  ASTQName jjtn000 = new ASTQName();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        Identifier();
        label_41:
        while (true) {
          if (jj_2_55(2)) {
            ;
          } else {
            break label_41;
          }
          jj_consume_token(DOT);
          Identifier();
        }
      } catch (ParseError e) {
                              rpe("Qualified name expected",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * Expression syntax follows.
 */
  static final public void CommaExpression() throws ParseException {
 /*@bgen(jjtree) #CommaExpression(> 1) */
  ASTCommaExpression jjtn000 = new ASTCommaExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_42:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_42;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  static final public void RuleOrExpression() throws ParseException {
 /*@bgen(jjtree) #RuleOrExpression(> 1) */
  ASTRuleOrExpression jjtn000 = new ASTRuleOrExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RuleAndExpression();
      label_43:
      while (true) {
        switch (jj_nt.kind) {
        case SEMICOLON:
          ;
          break;
        default:
          break label_43;
        }
        jj_consume_token(SEMICOLON);
        RuleAndExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  static final public void RuleAndExpression() throws ParseException {
 /*@bgen(jjtree) #RuleAndExpression(> 1) */
  ASTRuleAndExpression jjtn000 = new ASTRuleAndExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RuleExpression();
      label_44:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_44;
        }
        jj_consume_token(COMMA);
        RuleExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  static final public void RuleExpression() throws ParseException {
  Token t = null; int n;
    if (getToken(1).kind == IDENTIFIER
             && getToken(2).kind == IS_THE) {
      RuleIstheExpression();
    } else if (getToken(1).kind == IDENTIFIER
             && getToken(2).kind == IS_ONE_OF) {
      RuleIsoneofExpression();
    } else if (getToken(1).kind == PCUT) {
      RuleCutExpression();
    } else if (getToken(1).kind == LBRACE) {
      jj_consume_token(LBRACE);
      RuleOrExpression();
      jj_consume_token(RBRACE);
    } else if (getToken(1).kind == WHILE) {
      jj_consume_token(WHILE);
      Expression();
                               ASTRuleExpression jjtn001 = new ASTRuleExpression();
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
                               jjtree.closeNodeScope(jjtn001,  1);
                               jjtc001 = false;
                               jjtn001.while_mode=true; t=null;
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  1);
                               }
      }
    } else {
      ExpressionNT(noColonTokenSet);
                                        n = 1;
          ASTRuleExpression jjtn002 = new ASTRuleExpression();
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        switch (jj_nt.kind) {
        case COLON:
          jj_consume_token(COLON);
          ExpressionNT(noColonTokenSet);
                                             n = 2;
          break;
        default:
          ;
        }
      } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  n);
          }
      }
    }
  }

  static final public void RuleIstheExpression() throws ParseException {
 /*@bgen(jjtree) RuleIstheExpression */
  ASTRuleIstheExpression jjtn000 = new ASTRuleIstheExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(IS_THE);
      AccessExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RuleIsoneofExpression() throws ParseException {
 /*@bgen(jjtree) RuleIsoneofExpression */
  ASTRuleIsoneofExpression jjtn000 = new ASTRuleIsoneofExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(IS_ONE_OF);
      AccessExpression();
      label_45:
      while (true) {
        if (getToken(1).image.equals("&")
                         && getToken(2).kind == IDENTIFIER
                         && getToken(3).kind == IS_ONE_OF) {
          ;
        } else {
          break label_45;
        }
        jj_consume_token(BIT_AND);
        Identifier();
        jj_consume_token(IS_ONE_OF);
        AccessExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RuleCutExpression() throws ParseException {
 /*@bgen(jjtree) RuleCutExpression */
  ASTRuleCutExpression jjtn000 = new ASTRuleCutExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(PCUT);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.setPos(t.getPos()); t = null;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public Token TypeOperatorChar() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case QUESTION:
      t= jj_consume_token(QUESTION);
      break;
    case BANG:
      t= jj_consume_token(BANG);
      break;
    case TILDE:
      t= jj_consume_token(TILDE);
      break;
    case PLUS:
      t= jj_consume_token(PLUS);
      break;
    case MINUS:
      t= jj_consume_token(MINUS);
      break;
    case STAR:
      t= jj_consume_token(STAR);
      break;
    case SLASH:
      t= jj_consume_token(SLASH);
      break;
    case BIT_AND:
      t= jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      t= jj_consume_token(BIT_OR);
      break;
    case XOR:
      t= jj_consume_token(XOR);
      break;
    case REM:
      t= jj_consume_token(REM);
      break;
    case OPERATOR_AT:
      t= jj_consume_token(OPERATOR_AT);
      break;
    case OPERATOR_SHARP:
      t= jj_consume_token(OPERATOR_SHARP);
      break;
    case OPERATOR:
      t= jj_consume_token(OPERATOR);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Token OperatorChar() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case ASSIGN:
      t= jj_consume_token(ASSIGN);
      break;
    case ASSIGN2:
      t= jj_consume_token(ASSIGN2);
      break;
    case LT:
      t= jj_consume_token(LT);
      break;
    case GT:
      t= jj_consume_token(GT);
      break;
    case COLON:
      t= jj_consume_token(COLON);
      break;
    case QUESTION:
      t= jj_consume_token(QUESTION);
      break;
    case ARROW:
      t= jj_consume_token(ARROW);
      break;
    case BANG:
      t= jj_consume_token(BANG);
      break;
    case TILDE:
      t= jj_consume_token(TILDE);
      break;
    case EQ:
      t= jj_consume_token(EQ);
      break;
    case LE:
      t= jj_consume_token(LE);
      break;
    case GE:
      t= jj_consume_token(GE);
      break;
    case NE:
      t= jj_consume_token(NE);
      break;
    case SC_OR:
      t= jj_consume_token(SC_OR);
      break;
    case SC_AND:
      t= jj_consume_token(SC_AND);
      break;
    case INCR:
      t= jj_consume_token(INCR);
      break;
    case DECR:
      t= jj_consume_token(DECR);
      break;
    case PLUS:
      t= jj_consume_token(PLUS);
      break;
    case MINUS:
      t= jj_consume_token(MINUS);
      break;
    case STAR:
      t= jj_consume_token(STAR);
      break;
    case SLASH:
      t= jj_consume_token(SLASH);
      break;
    case BIT_AND:
      t= jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      t= jj_consume_token(BIT_OR);
      break;
    case XOR:
      t= jj_consume_token(XOR);
      break;
    case REM:
      t= jj_consume_token(REM);
      break;
    case LSHIFT:
      t= jj_consume_token(LSHIFT);
      break;
    case PLUSASSIGN:
      t= jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      t= jj_consume_token(MINUSASSIGN);
      break;
    case STARASSIGN:
      t= jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      t= jj_consume_token(SLASHASSIGN);
      break;
    case ANDASSIGN:
      t= jj_consume_token(ANDASSIGN);
      break;
    case ORASSIGN:
      t= jj_consume_token(ORASSIGN);
      break;
    case XORASSIGN:
      t= jj_consume_token(XORASSIGN);
      break;
    case REMASSIGN:
      t= jj_consume_token(REMASSIGN);
      break;
    case LSHIFTASSIGN:
      t= jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      t= jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      t= jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case OPERATOR_AT:
      t= jj_consume_token(OPERATOR_AT);
      break;
    case OPERATOR_SHARP:
      t= jj_consume_token(OPERATOR_SHARP);
      break;
    case OPERATOR:
      t= jj_consume_token(OPERATOR);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void Operator() throws ParseException {
 /*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; String image;
    try {
      switch (jj_nt.kind) {
      case ARROW:
      case COLON:
      case QUESTION:
      case LT:
      case GT:
      case ASSIGN:
      case ASSIGN2:
      case BANG:
      case TILDE:
      case EQ:
      case LE:
      case GE:
      case NE:
      case SC_OR:
      case SC_AND:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case REM:
      case LSHIFT:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR:
        t= OperatorChar();
                  image = t.image;
        label_46:
        while (true) {
          if (jj_2_56(1)) {
            ;
          } else {
            break label_46;
          }
          if (!Kiev.javaMode && operatorLA(1) && checkNoSpace(getToken(0),getToken(1))) {
            t= OperatorChar();
                          image = image+t.image;
          } else if (Kiev.javaMode && getToken(1).kind==GT && checkNoSpace(getToken(0),getToken(1))) {
            t= jj_consume_token(GT);
                          image = image+t.image;
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        if (!Kiev.javaMode) {
          jj_consume_token(OPERATOR_ID);
          t= jj_consume_token(IDENTIFIER);
                  image = t.image;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setPos(t.getPos());
                jjtn000.image = KString.from(image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void CastOperatorLA() throws ParseException {
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case CAST:
      jj_consume_token(CAST);
      break;
    case REINTERP:
      jj_consume_token(REINTERP);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
      PrimitiveType();
      break;
    default:
      if (castLA_Start()) {
        Type();
        jj_consume_token(RPAREN);
        switch (jj_nt.kind) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case LONG_INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          ConstExpression();
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        default:
          if (jj_2_57(1)) {
            Operator();
          } else {
            switch (jj_nt.kind) {
            case REPARSE_EXPRESSION:
              ReparseExpression();
              break;
            case FUNCTION:
              jj_consume_token(FUNCTION);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void CastOperator() throws ParseException {
 /*@bgen(jjtree) CastOperator */
  ASTCastOperator jjtn000 = new ASTCastOperator();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(LPAREN);
                jjtn000.setPos(t.getPos());
      switch (jj_nt.kind) {
      case CAST:
      case REINTERP:
        switch (jj_nt.kind) {
        case CAST:
          jj_consume_token(CAST);
          break;
        case REINTERP:
          jj_consume_token(REINTERP);
                                                                     jjtn000.reinterp=true;
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      jjtn000.type = Type();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ExpressionNT(int[] nt_new) throws ParseException {
  int[] nt_old = no_tokens; no_tokens = nt_new;
    try {
      Expression();
    } finally {
                    no_tokens = nt_old;
    }
  }

  static final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTType tp;
    try {
      try {
        label_47:
        while (true) {
          if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("instanceof")) {
            Identifier();
            tp = Type();
                                                   jjtree.pushNode(tp);
          } else if (operatorLA(1)) {
            Operator();
          } else if (jj_2_58(2147483647)) {
            CastOperator();
          } else if (jj_2_59(2)) {
            AccessExpression();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          if (jj_2_60(1)) {
            ;
          } else {
            break label_47;
          }
        }
      } catch (ParseError e) {
                              rpe("Bad expression",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ReparseExpression() throws ParseException {
 /*@bgen(jjtree) ReparseExpression */
  ASTReparseExpression jjtn000 = new ASTReparseExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        t= jj_consume_token(REPARSE_EXPRESSION);
                                         jjtn000.set(t);
      } catch (ParseError e) {
                              rpe("Bad expression",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void CallExpression() throws ParseException {
 /*@bgen(jjtree) CallExpression */
  ASTCallExpression jjtn000 = new ASTCallExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(LPAREN);
      if (jj_2_61(1)) {
        ExpressionNT(null);
        label_48:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_48;
          }
          jj_consume_token(COMMA);
          ExpressionNT(null);
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void TypeClassExpression() throws ParseException {
 /*@bgen(jjtree) TypeClassExpression */
  ASTTypeClassExpression jjtn000 = new ASTTypeClassExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.type = Type();
      jj_consume_token(DOT);
      jj_consume_token(CLASS);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void AccessExpression() throws ParseException {
  Token t;
    if (jj_2_62(2147483647)) {
      TypeClassExpression();
    } else if (jj_2_63(2)) {
      ConstExpression();
    } else if (jj_2_64(2)) {
      CallExpression();
    } else if (jj_2_65(2)) {
      Identifier();
    } else if (jj_2_66(2147483647)) {
      NewInitializedArrayExpression();
    } else if (jj_2_67(2147483647)) {
      NewArrayExpression();
    } else if (jj_2_68(2147483647)) {
      NewExpression();
    } else {
      switch (jj_nt.kind) {
      case REPARSE_EXPRESSION:
        ReparseExpression();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        ExpressionNT(null);
        jj_consume_token(RPAREN);
        break;
      default:
        if (jj_2_69(2147483647)) {
          AnonymouseClosure();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    label_49:
    while (true) {
      switch (jj_nt.kind) {
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        break label_49;
      }
      if (jj_2_70(3)) {
        jj_consume_token(DOT);
                      ASTCallAccessExpression jjtn001 = new ASTCallAccessExpression();
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
        try {
          CallExpression();
        } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
        } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
        }
      } else if (jj_2_71(3)) {
        t= jj_consume_token(DOT);
        Identifier();
          ASTAccessExpression jjtn002 = new ASTAccessExpression();
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jjtree.closeNodeScope(jjtn002,  2);
          jjtc002 = false;
          jjtn002.setPos(t.getPos());
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
      } else if (jj_2_72(2)) {
        t= jj_consume_token(LBRACKET);
        ExpressionNT(null);
        jj_consume_token(RBRACKET);
          ASTArrayElementAccessExpression jjtn003 = new ASTArrayElementAccessExpression();
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          jjtree.closeNodeScope(jjtn003,  2);
          jjtc003 = false;
          jjtn003.setPos(t.getPos());
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
      } else if (jj_2_73(2147483647)) {
        jj_consume_token(DOT);
                  ASTNewAccessExpression jjtn004 = new ASTNewAccessExpression();
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
        try {
          NewExpression();
        } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte004;}
                  }
                  if (jjte004 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte004;}
                  }
                  {if (true) throw (Error)jjte004;}
        } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void AnonymouseClosure() throws ParseException {
 /*@bgen(jjtree) AnonymouseClosure */
  ASTAnonymouseClosure jjtn000 = new ASTAnonymouseClosure();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; ASTModifiers modifiers;
    try {
      t= jj_consume_token(FUNCTION);
      jj_consume_token(LPAREN);
      if (jj_2_74(1)) {
        modifiers = Modifiers();
        FormalParameter(modifiers);
        label_50:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_50;
          }
          jj_consume_token(COMMA);
          modifiers = Modifiers();
          FormalParameter(modifiers);
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(ARROW);
      jjtn000.setPos(t.getPos());
      if (getToken(1).kind == RULE) {
        jjtn000.rettype = Type();
        RuleBlock();
      } else if (jj_2_75(1)) {
        jjtn000.rettype = Type();
        Block();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ConstExpression() throws ParseException {
    switch (jj_nt.kind) {
    case FALSE:
    case TRUE:
      BooleanConstExpression();
      break;
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
      DecimalConstExpression();
      break;
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
      FloatConstExpression();
      break;
    case CHARACTER_LITERAL:
      CharConstExpression();
      break;
    case NULL:
      NullConstExpression();
      break;
    case STRING_LITERAL:
      StringConstExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BooleanConstExpression() throws ParseException {
 /*@bgen(jjtree) ConstExpression */
  ASTConstExpression jjtn000 = new ASTConstExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case TRUE:
        t= jj_consume_token(TRUE);
        break;
      case FALSE:
        t= jj_consume_token(FALSE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.set(t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DecimalConstExpression() throws ParseException {
 /*@bgen(jjtree) ConstExpression */
  ASTConstExpression jjtn000 = new ASTConstExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
        t= jj_consume_token(INTEGER_LITERAL);
        break;
      case LONG_INTEGER_LITERAL:
        t= jj_consume_token(LONG_INTEGER_LITERAL);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.set(t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FloatConstExpression() throws ParseException {
 /*@bgen(jjtree) ConstExpression */
  ASTConstExpression jjtn000 = new ASTConstExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case FLOATING_POINT_LITERAL:
        t= jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case DOUBLE_POINT_LITERAL:
        t= jj_consume_token(DOUBLE_POINT_LITERAL);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.set(t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void CharConstExpression() throws ParseException {
 /*@bgen(jjtree) ConstExpression */
  ASTConstExpression jjtn000 = new ASTConstExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(CHARACTER_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.set(t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void NullConstExpression() throws ParseException {
 /*@bgen(jjtree) ConstExpression */
  ASTConstExpression jjtn000 = new ASTConstExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(NULL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.set(t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StringConstExpression() throws ParseException {
 /*@bgen(jjtree) ConstExpression */
  ASTConstExpression jjtn000 = new ASTConstExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t, t1;
    try {
      t= jj_consume_token(STRING_LITERAL);
      label_51:
      while (true) {
        if (getToken(1).kind==PLUS
                         && getToken(2).kind==STRING_LITERAL) {
          ;
        } else {
          break label_51;
        }
        jj_consume_token(PLUS);
        t1= jj_consume_token(STRING_LITERAL);
                        t.image = t.image.substring(0,t.image.length()-1)+t1.image.substring(1);
                        t.endLine = t1.endLine;
                        t.endColumn = t1.endColumn;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.set(t);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void NewExpression() throws ParseException {
 /*@bgen(jjtree) NewExpression */
        ASTNewExpression jjtn000 = new ASTNewExpression();
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        boolean old_mode;
        Struct clazz;
    try {
      t= jj_consume_token(NEW);
                  jjtn000.setPos(t.getPos());
      jjtn000.type = NonArrayType();
      jj_consume_token(LPAREN);
      if (jj_2_76(1)) {
        ExpressionNT(null);
        label_52:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_52;
          }
          jj_consume_token(COMMA);
          ExpressionNT(null);
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      if (jj_2_77(2147483647)) {
                        old_mode = interface_only;
                        interface_only = false;
                        jjtn000.clazz = clazz = mkStruct(null, 0, new ASTModifiers(), jjtn000);
                        PassInfo.push(clazz);
        try {
          TypeBodyDeclaration(clazz);
        } finally {
                        { interface_only = old_mode; PassInfo.pop(clazz); }
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void NewArrayExpression() throws ParseException {
 /*@bgen(jjtree) NewArrayExpression */
  ASTNewArrayExpression jjtn000 = new ASTNewArrayExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; int dim=0;
    try {
      t= jj_consume_token(NEW);
      jjtn000.type = SimpleType();
      label_53:
      while (true) {
        jj_consume_token(LBRACKET);
        ExpressionNT(null);
        jj_consume_token(RBRACKET);
                                                    dim += 1;
        if (jj_2_78(2)) {
          ;
        } else {
          break label_53;
        }
      }
      label_54:
      while (true) {
        if (jj_2_79(2)) {
          ;
        } else {
          break label_54;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                 dim += 1;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.dim = dim; jjtn000.setPos(t.getPos());
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void NewInitializedArrayExpression() throws ParseException {
 /*@bgen(jjtree) NewInitializedArrayExpression */
  ASTNewInitializedArrayExpression jjtn000 = new ASTNewInitializedArrayExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; int dim=0;
    try {
      t= jj_consume_token(NEW);
      jjtn000.type = SimpleType();
      label_55:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                    dim += 1;
        switch (jj_nt.kind) {
        case LBRACKET:
          ;
          break;
        default:
          break label_55;
        }
      }
      jj_consume_token(LBRACE);
      if (jj_2_81(1)) {
        VariableInitializer();
        label_56:
        while (true) {
          if (jj_2_80(2)) {
            ;
          } else {
            break label_56;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          ;
        }
      } else {
        ;
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.dim = dim; jjtn000.setPos(t.getPos());
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * Statement syntax follows.
 */
  static final public void Statement() throws ParseException {
    try {
      if (labledStatementLA()) {
        LabeledStatement();
      } else {
        switch (jj_nt.kind) {
        case LBRACE:
          Block();
          break;
        case SEMICOLON:
          EmptyStatement();
          break;
        case SWITCH:
          SwitchStatement();
          break;
        case IF:
          IfStatement();
          break;
        case WHILE:
          WhileStatement();
          break;
        case DO:
          DoStatement();
          break;
        case FOR:
          ForStatement();
          break;
        case FOREACH:
          ForEachStatement();
          break;
        case BREAK:
          BreakStatement();
          break;
        case CONTINUE:
          ContinueStatement();
          break;
        case RETURN:
          ReturnStatement();
          break;
        case THROW:
          ThrowStatement();
          break;
        case SYNCHRONIZED:
          SynchronizedStatement();
          break;
        case WITH:
          WithStatement();
          break;
        case TRY:
          TryStatement();
          break;
        case GOTO:
          GotoStatement();
          break;
        case REPARSE_STATEMENT:
          ReparseStatement();
          break;
        default:
          if (jj_2_82(1)) {
            StatementExpression();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseError e) {
                              rpe("Bad statement",e);
    } catch (Throwable e) {
                             rperr(e);
    }
  }

  static final public void ReparseStatement() throws ParseException {
 /*@bgen(jjtree) ReparseStatement */
  ASTReparseStatement jjtn000 = new ASTReparseStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        t= jj_consume_token(REPARSE_STATEMENT);
                                        jjtn000.set(t);
      } catch (ParseError e) {
                              rpe("Bad statement",e);
      } catch (Throwable e) {
                             rperr(e);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LabeledStatement() throws ParseException {
 /*@bgen(jjtree) LabeledStatement */
  ASTLabeledStatement jjtn000 = new ASTLabeledStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (getToken(1).kind == IDENTIFIER && getToken(2).kind == COLON) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      Identifier();
      jj_consume_token(COLON);
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public ASTBlock PrescannedBlock(PrescannedBody b) throws ParseException {
        Token t;
        // Skip to the start of prescanned body
        Token tk;
        for(;;) {
                tk = getToken(1);
                if( tk.beginLine==b.lineno && tk.beginColumn==b.columnno )
                        break;
                if( tk.kind == EOF ) {
                        throw new CompilerException(
                                (b.lineno <<11) | (b.columnno & 0x3FF),
                                "Expected to find start of block after scanning. Have you changed the file?"
                        );
                }
                getNextToken();
        }
        ASTBlock bl;
    bl= Block();
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTBlock Block() throws ParseException {
 /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean old_declMode;
    try {
      jj_consume_token(LBRACE);
                jjtn000.setPos(getToken(1).getPos());
                PassInfo.push(jjtn000);
                old_declMode = declMode;
                declMode = false;
      try {
        label_57:
        while (true) {
          if (jj_2_83(1)) {
            ;
          } else {
            break label_57;
          }
          BlockStatement(jjtn000);
        }
      } finally {
                    declMode = old_declMode; PassInfo.pop(jjtn000);
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTBlock PrescannedRuleBlock(PrescannedBody b) throws ParseException {
        Token t;
        // Skip to the start of prescanned body
        Token tk;
        for(;;) {
                tk = getToken(1);
                if( tk.beginLine==b.lineno && tk.beginColumn==b.columnno )
                        break;
                if( tk.kind == EOF ) {
                        throw new CompilerException(
                                (b.lineno <<11) | (b.columnno & 0x3FF),
                                "Expected to find start of block after scanning. Have you changed the file?"
                        );
                }
                getNextToken();
        }
        ASTBlock bl;
    bl= RuleBlock();
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTBlock RuleBlock() throws ParseException {
 /*@bgen(jjtree) RuleBlock */
  ASTRuleBlock jjtn000 = new ASTRuleBlock();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean old_declMode;
    try {
      jj_consume_token(LBRACE);
                jjtn000.setPos(getToken(1).getPos());
                PassInfo.push(jjtn000);
                old_declMode = declMode;
                declMode = false;
      try {
        RuleOrExpression();
      } catch (ParseError e) {
                              rpe("Bad rule",e);
      } catch (Throwable e) {
                             rperr(e);
      } finally {
                declMode = old_declMode;
                PassInfo.pop(jjtn000);
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTBlock PrescannedCondBlock(PrescannedBody b) throws ParseException {
        Token t;
        // Skip to the start of prescanned body
        Token tk;
        for(;;) {
                tk = getToken(1);
                if( tk.beginLine==b.lineno && tk.beginColumn==b.columnno )
                        break;
                if( tk.kind == EOF ) {
                        throw new CompilerException(
                                (b.lineno <<11) | (b.columnno & 0x3FF),
                                "Expected to find start of block after scanning. Have you changed the file?"
                        );
                }
                getNextToken();
        }
        ASTBlock bl;
    bl= CondBlock();
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTBlock CondBlock() throws ParseException {
 /*@bgen(jjtree) CondBlock */
  ASTCondBlock jjtn000 = new ASTCondBlock();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean old_declMode;
    try {
                jjtn000.setPos(getToken(1).getPos());
                PassInfo.push(jjtn000);
                old_declMode = declMode;
                declMode = false;
      try {
        switch (jj_nt.kind) {
        case LBRACE:
          jj_consume_token(LBRACE);
          label_58:
          while (true) {
            CondStatement();
            if (jj_2_84(1)) {
              ;
            } else {
              break label_58;
            }
          }
          jj_consume_token(RBRACE);
          switch (jj_nt.kind) {
          case END_CONSTRAINT:
            jj_consume_token(END_CONSTRAINT);
            break;
          default:
            ;
          }
          break;
        default:
          if (jj_2_86(1)) {
            label_59:
            while (true) {
              CondStatement();
              if (jj_2_85(1)) {
                ;
              } else {
                break label_59;
              }
            }
            jj_consume_token(END_CONSTRAINT);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } finally {
                declMode = old_declMode;
                PassInfo.pop(jjtn000);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void BlockStatement(ASTNode parent) throws ParseException {
  boolean old_declMode; ASTModifiers modifiers; Struct clazz;
    if (jj_2_87(2147483647)) {
                  old_declMode = declMode; declMode = true;
      try {
        modifiers = Modifiers();
        clazz = TypeDeclaration(modifiers, parent);
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
                          jjtree.pushNode(clazz);
      } finally {
                        declMode = old_declMode;
      }
    } else if (jj_2_88(2147483647)) {
      modifiers = Modifiers();
      VarDecls(modifiers);
    } else {
      Statement();
    }
  }

  static final public void CondStatement() throws ParseException {
 /*@bgen(jjtree) CondStatement */
  ASTCondStatement jjtn000 = new ASTCondStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = getToken(1);
    try {
      ExpressionNT(noColonTokenSet);
      switch (jj_nt.kind) {
      case COLON:
        jj_consume_token(COLON);
                  t = null;
        Expression();
        break;
      default:
        ;
      }
                if( t != null ) {
                        int pos = t.getPos();
                        StringBuffer sb = new StringBuffer();
                        while( t != null && t != getToken(1) ) {
                                sb.append(t.image).append(' ');
                                t = t.next;
                        }
                        ASTConstExpression e = new ASTConstExpression();
                        e.pos = pos;
                        e.val = KString.from(sb.toString());
                        jjtn000.jjtAddChild(e,1);
                }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EmptyStatement() throws ParseException {
 /*@bgen(jjtree) EmptyStatement */
  ASTEmptyStatement jjtn000 = new ASTEmptyStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(SEMICOLON);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.setPos(t.getPos());
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StatementExpression() throws ParseException {
 /*@bgen(jjtree) StatementExpression */
  ASTStatementExpression jjtn000 = new ASTStatementExpression();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExpressionNT(null);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
  ASTSwitchStatement jjtn000 = new ASTSwitchStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(SWITCH);
                     jjtn000.setPos(t.getPos());
      jj_consume_token(LPAREN);
      ExpressionNT(null);
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_60:
      while (true) {
        CaseStatements();
        switch (jj_nt.kind) {
        case CASE:
        case _DEFAULT:
          ;
          break;
        default:
          break label_60;
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void CaseStatements() throws ParseException {
    if (jj_2_89(2147483647)) {
      PizzaCase();
    } else {
      switch (jj_nt.kind) {
      case CASE:
      case _DEFAULT:
        NormalCase();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void NormalCase() throws ParseException {
 /*@bgen(jjtree) NormalCase */
  ASTNormalCase jjtn000 = new ASTNormalCase();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case CASE:
        t= jj_consume_token(CASE);
        ExpressionNT(noColonTokenSet);
        jj_consume_token(COLON);
        break;
      case _DEFAULT:
        t= jj_consume_token(_DEFAULT);
        jj_consume_token(COLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtn000.setPos(t.getPos());
      label_61:
      while (true) {
        if (jj_2_90(1)) {
          ;
        } else {
          break label_61;
        }
        BlockStatement(jjtn000);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PizzaCase() throws ParseException {
 /*@bgen(jjtree) PizzaCase */
  ASTPizzaCase jjtn000 = new ASTPizzaCase();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; ASTModifiers modifiers;
    try {
      t= jj_consume_token(CASE);
                   jjtn000.setPos(t.getPos());
      QName();
      jj_consume_token(LPAREN);
      if (jj_2_91(1)) {
        modifiers = Modifiers();
        FormalParameter(modifiers);
        label_62:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_62;
          }
          jj_consume_token(COMMA);
          modifiers = Modifiers();
          FormalParameter(modifiers);
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(COLON);
      label_63:
      while (true) {
        if (jj_2_92(1)) {
          ;
        } else {
          break label_63;
        }
        BlockStatement(jjtn000);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(IF);
                 jjtn000.setPos(t.getPos());
      switch (jj_nt.kind) {
      case BANG:
        jj_consume_token(BANG);
                jjtn000.not = true;
        break;
      default:
        ;
      }
      jj_consume_token(LPAREN);
      ExpressionNT(null);
      jj_consume_token(RPAREN);
      Statement();
      switch (jj_nt.kind) {
      case ELSE:
        jj_consume_token(ELSE);
        Statement();
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(WHILE);
                    jjtn000.setPos(t.getPos());
      switch (jj_nt.kind) {
      case BANG:
        jj_consume_token(BANG);
                jjtn000.not = true;
        break;
      default:
        ;
      }
      jj_consume_token(LPAREN);
      ExpressionNT(null);
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DoStatement() throws ParseException {
 /*@bgen(jjtree) DoStatement */
  ASTDoStatement jjtn000 = new ASTDoStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(DO);
                 jjtn000.setPos(t.getPos());
      Statement();
      jj_consume_token(WHILE);
      switch (jj_nt.kind) {
      case BANG:
        jj_consume_token(BANG);
                jjtn000.not = true;
        break;
      default:
        ;
      }
      jj_consume_token(LPAREN);
      ExpressionNT(null);
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = new ASTForStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(FOR);
                  jjtn000.setPos(t.getPos());
      jj_consume_token(LPAREN);
      ForInit();
                            jjtn000.init = jjtree.popNode();
      if (jj_2_93(1)) {
        ExpressionNT(null);
                                     jjtn000.cond = (Expr)jjtree.popNode();
      } else {
        ;
      }
      jj_consume_token(SEMICOLON);
      if (jj_2_94(1)) {
        CommaExpression();
                                    jjtn000.iter = (Expr)jjtree.popNode();
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ForEachStatement() throws ParseException {
 /*@bgen(jjtree) ForEachStatement */
  ASTForEachStatement jjtn000 = new ASTForEachStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; ASTModifiers modifiers;
    try {
      t= jj_consume_token(FOREACH);
                      jjtn000.setPos(t.getPos());
      jj_consume_token(LPAREN);
      if (jj_2_95(2147483647)) {
        modifiers = Modifiers();
        FormalParameter(modifiers);
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
      ExpressionNT(null);
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        if (jj_2_96(1)) {
          ExpressionNT(null);
        } else {
          ;
        }
        break;
      default:
        ;
      }
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ForInit() throws ParseException {
  ASTModifiers modifiers;
    if (jj_2_97(2147483647)) {
      modifiers = Modifiers();
      VarDecls(modifiers);
    } else if (jj_2_98(1)) {
      CommaExpression();
      jj_consume_token(SEMICOLON);
    } else {
      switch (jj_nt.kind) {
      case SEMICOLON:
        EmptyStatement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void GotoStatement() throws ParseException {
 /*@bgen(jjtree) GotoStatement */
  ASTGotoStatement jjtn000 = new ASTGotoStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(GOTO);
                   jjtn000.setPos(t.getPos());
      switch (jj_nt.kind) {
      case CASE:
        jj_consume_token(CASE);
        ExpressionNT(null);
                                            jjtn000.casemode = true;
        break;
      case _DEFAULT:
        jj_consume_token(_DEFAULT);
                            jjtn000.casemode = true;
        break;
      case IDENTIFIER:
        Identifier();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(BREAK);
                    jjtn000.setPos(t.getPos());
      switch (jj_nt.kind) {
      case IDENTIFIER:
        Identifier();
        break;
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(CONTINUE);
                       jjtn000.setPos(t.getPos());
      switch (jj_nt.kind) {
      case IDENTIFIER:
        Identifier();
        break;
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(RETURN);
                     jjtn000.setPos(t.getPos());
      if (jj_2_99(1)) {
        ExpressionNT(null);
      } else {
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ThrowStatement() throws ParseException {
 /*@bgen(jjtree) ThrowStatement */
  ASTThrowStatement jjtn000 = new ASTThrowStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(THROW);
                    jjtn000.setPos(t.getPos());
      ExpressionNT(null);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SynchronizedStatement() throws ParseException {
 /*@bgen(jjtree) SynchronizedStatement */
  ASTSynchronizedStatement jjtn000 = new ASTSynchronizedStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(SYNCHRONIZED);
                           jjtn000.setPos(t.getPos());
      jj_consume_token(LPAREN);
      ExpressionNT(null);
      jj_consume_token(RPAREN);
      Block();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void WithStatement() throws ParseException {
 /*@bgen(jjtree) WithStatement */
  ASTWithStatement jjtn000 = new ASTWithStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t= jj_consume_token(WITH);
                   jjtn000.setPos(t.getPos());
      jj_consume_token(LPAREN);
      ExpressionNT(null);
      jj_consume_token(RPAREN);
      Block();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TryStatement() throws ParseException {
 /*@bgen(jjtree) TryStatement */
  ASTTryStatement jjtn000 = new ASTTryStatement();
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; ASTModifiers modifiers;
    try {
      t= jj_consume_token(TRY);
                  jjtn000.setPos(t.getPos());
      Block();
      label_64:
      while (true) {
        switch (jj_nt.kind) {
        case CATCH:
          ;
          break;
        default:
          break label_64;
        }
        t= jj_consume_token(CATCH);
        jj_consume_token(LPAREN);
        modifiers = Modifiers();
        FormalParameter(modifiers);
        jj_consume_token(RPAREN);
        Block();
                  ASTCatchInfo jjtn001 = new ASTCatchInfo();
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                  jjtn001.setPos(t.getPos());
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
      switch (jj_nt.kind) {
      case FINALLY:
        t= jj_consume_token(FINALLY);
        Block();
                  ASTFinallyInfo jjtn002 = new ASTFinallyInfo();
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
                  jjtree.closeNodeScope(jjtn002,  1);
                  jjtc002 = false;
                  jjtn002.setPos(t.getPos());
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  1);
                  }
        }
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = interface_only;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_181()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = presc instanceof ASTCondDeclaration;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_182()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = presc instanceof ASTRuleDeclaration;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_196() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_110()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_387() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  static final private boolean jj_3R_386() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static final private boolean jj_3R_385() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_384() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3_29() {
    if (jj_3R_74()) return true;
    return false;
  }

  static final private boolean jj_3R_143() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPERATOR_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_388()) {
    jj_scanpos = xsp;
    if (jj_3R_389()) {
    jj_scanpos = xsp;
    if (jj_3R_390()) {
    jj_scanpos = xsp;
    if (jj_3R_391()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_218() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_142() {
    if (jj_scan_token(OPERATOR_ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_201()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_384()) {
    jj_scanpos = xsp;
    if (jj_3R_385()) {
    jj_scanpos = xsp;
    if (jj_3R_386()) {
    jj_scanpos = xsp;
    if (jj_3R_387()) return true;
    }
    }
    }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_205() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_338() {
    if (jj_3R_350()) return true;
    return false;
  }

  static final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    return false;
  }

  static final private boolean jj_3_28() {
    if (jj_3R_93()) return true;
    return false;
  }

  static final private boolean jj_3R_204() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static final private boolean jj_3R_350() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_203() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_339() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  static final private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_315() {
    if (jj_scan_token(ALIAS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_201() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_351() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  static final private boolean jj_3R_352() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_317() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_339()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_144() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  static final private boolean jj_3R_162() {
    if (jj_3R_205()) return true;
    return false;
  }

  static final private boolean jj_3R_161() {
    if (jj_3R_204()) return true;
    return false;
  }

  static final private boolean jj_3R_200() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_160() {
    if (jj_3R_203()) return true;
    return false;
  }

  static final private boolean jj_3R_159() {
    if (jj_3R_202()) return true;
    return false;
  }

  static final private boolean jj_3_27() {
    if (jj_3R_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_351()) jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_352()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_158() {
    if (jj_3R_201()) return true;
    return false;
  }

  static final private boolean jj_3R_157() {
    if (jj_3R_200()) return true;
    return false;
  }

  static final private boolean jj_3_75() {
    if (jj_3R_73()) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  static final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_136() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  static final private boolean jj_3R_208() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_272() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  static final private boolean jj_3R_268() {
    if (jj_3R_73()) return true;
    if (jj_3R_215()) return true;
    return false;
  }

  static final private boolean jj_3_26() {
    if (jj_3R_73()) return true;
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_208()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_24() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static final private boolean jj_3_74() {
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_272()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_73() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_110()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_109() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_25() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_198() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == RULE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3_75()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_199() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  static final private boolean jj_3_72() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_23() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_189() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_71() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_141() {
    if (jj_3R_189()) return true;
    return false;
  }

  static final private boolean jj_3_69() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_68() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_110()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_70() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  static final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_67() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_357() {
    if (jj_scan_token(ASSIGN2)) return true;
    return false;
  }

  static final private boolean jj_3R_153() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_66() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    if (jj_3R_109()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_152() {
    if (jj_3R_197()) return true;
    return false;
  }

  static final private boolean jj_3R_154() {
    if (jj_3R_198()) return true;
    return false;
  }

  static final private boolean jj_3R_331() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_330()) return true;
    return false;
  }

  static final private boolean jj_3R_151() {
    if (jj_3R_196()) return true;
    return false;
  }

  static final private boolean jj_3R_345() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_3R_357()) return true;
    }
    if (jj_3R_92()) return true;
    return false;
  }

  static final private boolean jj_3R_344() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_150() {
    if (jj_3R_195()) return true;
    return false;
  }

  static final private boolean jj_3R_330() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_344()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_149() {
    if (jj_3R_194()) return true;
    return false;
  }

  static final private boolean jj_3_62() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  static final private boolean jj_3_65() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3_64() {
    if (jj_3R_107()) return true;
    return false;
  }

  static final private boolean jj_3_63() {
    if (jj_3R_106()) return true;
    return false;
  }

  static final private boolean jj_3R_269() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_148() {
    if (jj_3R_193()) return true;
    return false;
  }

  static final private boolean jj_3R_342() {
    if (jj_scan_token(ASSIGN2)) return true;
    return false;
  }

  static final private boolean jj_3R_95() {
    if (jj_3R_73()) return true;
    if (jj_3R_330()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_331()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_61() {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_3R_342()) return true;
    }
    if (jj_3R_92()) return true;
    return false;
  }

  static final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_155()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_324() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_193() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  static final private boolean jj_3R_299() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_298()) return true;
    return false;
  }

  static final private boolean jj_3R_107() {
    if (jj_3R_98()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_263() {
    if (jj_scan_token(REINTERP)) return true;
    return false;
  }

  static final private boolean jj_3_58() {
    if (jj_3R_101()) return true;
    return false;
  }

  static final private boolean jj_3R_298() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_324()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_325()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_261() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    return false;
  }

  static final private boolean jj_3_59() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_105() {
    if (jj_3R_156()) return true;
    return false;
  }

  static final private boolean jj_3R_265() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  static final private boolean jj_3R_104() {
    if (jj_3R_74()) return true;
    return false;
  }

  static final private boolean jj_3R_197() {
    if (jj_scan_token(REPARSE_EXPRESSION)) return true;
    return false;
  }

  static final private boolean jj_3R_133() {
    if (jj_3R_73()) return true;
    if (jj_3R_298()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_3R_98()) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  static final private boolean jj_3_60() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("instanceof");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_103()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = operatorLA(1);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_22() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_265()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_20() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_187() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_21() {
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_91() {
    Token xsp;
    if (jj_3_60()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_140() {
    if (jj_3R_120()) return true;
    return false;
  }

  static final private boolean jj_3_18() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_192() {
    if (jj_3R_197()) return true;
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3_57() {
    if (jj_3R_74()) return true;
    return false;
  }

  static final private boolean jj_3R_191() {
    if (jj_3R_106()) return true;
    return false;
  }

  static final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  static final private boolean jj_3_19() {
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_138() {
    if (jj_3R_187()) return true;
    return false;
  }

  static final private boolean jj_3R_156() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_261()) jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_137() {
    if (jj_3R_120()) return true;
    return false;
  }

  static final private boolean jj_3R_147() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_146() {
    if (jj_3R_190()) return true;
    return false;
  }

  static final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static final private boolean jj_3R_264() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_188()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_3R_87()) return true;
    return false;
  }

  static final private boolean jj_3R_101() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = castLA_Start();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_147()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_3R_139()) return true;
    return false;
  }

  static final private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_99() {
    if (jj_3R_145()) return true;
    return false;
  }

  static final private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = !Kiev.javaMode && operatorLA(1) && checkNoSpace(getToken(0),getToken(1));
    lookingAhead = false;
    if (!jj_semLA || jj_3R_99()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = Kiev.javaMode && getToken(1).kind==GT && checkNoSpace(getToken(0),getToken(1));
    lookingAhead = false;
    if (!jj_semLA || jj_3R_100()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_127() {
    if (jj_scan_token(OPERATOR_ID)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_139() {
    if (jj_3R_188()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_87()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_264()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_256() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_176() {
    if (jj_3R_209()) return true;
    return false;
  }

  static final private boolean jj_3R_175() {
    if (jj_3R_188()) return true;
    return false;
  }

  static final private boolean jj_3R_126() {
    if (jj_3R_145()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_369() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  static final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = !Kiev.javaMode;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_127()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_120() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_256()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_368() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  static final private boolean jj_3R_253() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_216()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_368()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_369()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_252() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  static final private boolean jj_3R_251() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  static final private boolean jj_3R_250() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_213() {
    if (jj_scan_token(NO_READ_WRITE)) return true;
    return false;
  }

  static final private boolean jj_3R_249() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_99()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_212() {
    if (jj_scan_token(READ_WRITE)) return true;
    return false;
  }

  static final private boolean jj_3R_117() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_211() {
    if (jj_scan_token(WRITE_ONLY)) return true;
    return false;
  }

  static final private boolean jj_3_99() {
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_210() {
    if (jj_scan_token(READ_ONLY)) return true;
    return false;
  }

  static final private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_123() {
    return false;
  }

  static final private boolean jj_3R_248() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_367() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_262() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  static final private boolean jj_3R_260() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_178()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_257() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_178()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_247() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_366()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_366() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = Kiev.enabled(Ext.Access);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_123()) return true;
    if (jj_scan_token(ACCESS)) return true;
    if (jj_3R_178()) return true;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_371() {
    if (jj_scan_token(_DEFAULT)) return true;
    return false;
  }

  static final private boolean jj_3R_370() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_383() {
    if (jj_3R_188()) return true;
    return false;
  }

  static final private boolean jj_3R_372() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_259() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_377() {
    if (jj_3R_188()) return true;
    return false;
  }

  static final private boolean jj_3R_254() {
    if (jj_scan_token(GOTO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) {
    jj_scanpos = xsp;
    if (jj_3R_372()) return true;
    }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_177() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_259()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_97() {
    if (jj_3R_65()) return true;
    if (jj_3R_73()) return true;
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_328() {
    if (jj_scan_token(PCUT)) return true;
    return false;
  }

  static final private boolean jj_3R_343() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(IS_ONE_OF)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_381() {
    if (jj_3R_240()) return true;
    return false;
  }

  static final private boolean jj_3_98() {
    if (jj_3R_116()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_375() {
    if (jj_3R_188()) return true;
    return false;
  }

  static final private boolean jj_3R_122() {
    if (jj_scan_token(PACKED)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_95() {
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  static final private boolean jj_3R_380() {
    if (jj_3R_65()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static final private boolean jj_3R_363() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_380()) {
    jj_scanpos = xsp;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3R_381()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_347() {
    if (jj_3R_188()) return true;
    return false;
  }

  static final private boolean jj_3R_327() {
    if (jj_3R_98()) return true;
    if (jj_scan_token(IS_ONE_OF)) return true;
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_343()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_96() {
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_364() {
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_365() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_326() {
    if (jj_3R_98()) return true;
    if (jj_scan_token(IS_THE)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_382() {
    if (jj_3R_190()) return true;
    return false;
  }

  static final private boolean jj_3R_329() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_305() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_246() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_364()) jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    xsp = jj_scanpos;
    if (jj_3R_365()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  static final private boolean jj_3R_378() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) {
    jj_scanpos = xsp;
    if (jj_3R_383()) return true;
    }
    return false;
  }

  static final private boolean jj_3_94() {
    if (jj_3R_116()) return true;
    return false;
  }

  static final private boolean jj_3R_376() {
    if (jj_3R_190()) return true;
    return false;
  }

  static final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_304() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_217() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  static final private boolean jj_3_93() {
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_303() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_274()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_302() {
    if (jj_3R_328()) return true;
    return false;
  }

  static final private boolean jj_3R_374() {
    if (jj_3R_190()) return true;
    return false;
  }

  static final private boolean jj_3R_349() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) {
    jj_scanpos = xsp;
    if (jj_3R_377()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_378()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static final private boolean jj_3R_301() {
    if (jj_3R_327()) return true;
    return false;
  }

  static final private boolean jj_3R_185() {
    if (jj_3R_65()) return true;
    if (jj_3R_188()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_348() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) {
    jj_scanpos = xsp;
    if (jj_3R_375()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_346() {
    if (jj_3R_190()) return true;
    return false;
  }

  static final private boolean jj_3R_245() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_363()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3_94()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  static final private boolean jj_3R_300() {
    if (jj_3R_326()) return true;
    return false;
  }

  static final private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER
         && getToken(2).kind == IS_THE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_300()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER
         && getToken(2).kind == IS_ONE_OF;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_301()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == PCUT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_302()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == LBRACE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_303()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == WHILE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_3R_305()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_362() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  static final private boolean jj_3R_282() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_281()) return true;
    return false;
  }

  static final private boolean jj_3R_244() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_207()) return true;
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_362()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_277() {
    if (jj_3R_281()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_282()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_186() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  static final private boolean jj_3R_278() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  static final private boolean jj_3R_361() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  static final private boolean jj_3R_274() {
    if (jj_3R_277()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_243() {
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  static final private boolean jj_3R_360() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  static final private boolean jj_3R_399() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  static final private boolean jj_3R_394() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_335() {
    if (jj_scan_token(GENERATE)) return true;
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_348()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_349()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_337() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  static final private boolean jj_3R_116() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_394()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_55() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_359() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  static final private boolean jj_3R_280() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_205()) return true;
    return false;
  }

  static final private boolean jj_3_92() {
    if (jj_3R_112()) return true;
    return false;
  }

  static final private boolean jj_3R_242() {
    if (jj_scan_token(IF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_207()) return true;
    xsp = jj_scanpos;
    if (jj_3R_360()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_91() {
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_399()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_337()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_135() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_115() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_3R_73()) return true;
    return false;
  }

  static final private boolean jj_3R_188() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3_90() {
    if (jj_3R_112()) return true;
    return false;
  }

  static final private boolean jj_3R_395() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_91()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(COLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_98() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_285() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_398() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static final private boolean jj_3R_397() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static final private boolean jj_3_54() {
    if (jj_3R_72()) return true;
    return false;
  }

  static final private boolean jj_3_89() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_279() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_201()) return true;
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_53() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static final private boolean jj_3R_206() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  static final private boolean jj_3R_393() {
    if (jj_3R_396()) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_396() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_397()) {
    jj_scanpos = xsp;
    if (jj_3R_398()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_392() {
    if (jj_3R_395()) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_scan_token(RULE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_166() {
    if (jj_3R_72()) return true;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_3R_133()) return true;
    return false;
  }

  static final private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_3R_132()) return true;
    return false;
  }

  static final private boolean jj_3R_129() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_188()) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_285()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_358() {
    if (jj_3R_379()) return true;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_3R_131()) return true;
    return false;
  }

  static final private boolean jj_3R_165() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static final private boolean jj_3R_379() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) {
    jj_scanpos = xsp;
    if (jj_3R_393()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_3R_130()) return true;
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_3R_129()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_3R_118()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_75() {
    if (jj_3R_128()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_275() {
    if (jj_3R_98()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_279()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_280()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_82()) return true;
    return false;
  }

  static final private boolean jj_3R_241() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3R_358()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_358()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_114() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  static final private boolean jj_3R_111() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_164() {
    if (jj_3R_110()) return true;
    return false;
  }

  static final private boolean jj_3R_110() {
    if (jj_3R_115()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_163() {
    if (jj_3R_190()) return true;
    return false;
  }

  static final private boolean jj_3R_276() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_275()) return true;
    return false;
  }

  static final private boolean jj_3R_240() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_51() {
    if (jj_3R_72()) return true;
    return false;
  }

  static final private boolean jj_3R_238() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  static final private boolean jj_3_50() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_52() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_273() {
    if (jj_3R_65()) return true;
    if (jj_3R_275()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_276()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_373() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_97() {
    if (jj_3R_72()) return true;
    return false;
  }

  static final private boolean jj_3_88() {
    if (jj_3R_65()) return true;
    if (jj_3R_73()) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_179() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  static final private boolean jj_3R_96() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = Kiev.enabled(Ext.Typedef)&&checkNoSpace(getToken(0),getToken(1));
    lookingAhead = false;
    if (!jj_semLA || jj_3R_97()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_125() {
    if (jj_3R_179()) return true;
    return false;
  }

  static final private boolean jj_3R_113() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_373()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_169() {
    if (jj_3R_207()) return true;
    return false;
  }

  static final private boolean jj_3_87() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_168() {
    if (jj_3R_65()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static final private boolean jj_3R_124() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_84() {
    if (jj_3R_113()) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = Kiev.enabled(Ext.With);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_125()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_167() {
    if (jj_3R_65()) return true;
    if (jj_3R_118()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_313() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_190()) return true;
    return false;
  }

  static final private boolean jj_3R_271() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_48() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_85() {
    if (jj_3R_113()) return true;
    return false;
  }

  static final private boolean jj_3R_312() {
    if (jj_3R_209()) return true;
    return false;
  }

  static final private boolean jj_3R_311() {
    if (jj_3R_188()) return true;
    return false;
  }

  static final private boolean jj_3_86() {
    Token xsp;
    if (jj_3_85()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_85()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_CONSTRAINT)) return true;
    return false;
  }

  static final private boolean jj_3R_336() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  static final private boolean jj_3R_310() {
    if (jj_3R_335()) return true;
    return false;
  }

  static final private boolean jj_3R_287() {
    if (jj_3R_134()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_173() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_188()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_313()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_237() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3_84()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_84()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_3R_134()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_309() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_scan_token(RULE)) return true;
    return false;
  }

  static final private boolean jj_3R_172() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_314() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  static final private boolean jj_3R_334() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  static final private boolean jj_3R_333() {
    if (jj_3R_110()) return true;
    return false;
  }

  static final private boolean jj_3R_308() {
    if (jj_3R_335()) return true;
    return false;
  }

  static final private boolean jj_3_47() {
    if (jj_3R_65()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static final private boolean jj_3R_332() {
    if (jj_3R_190()) return true;
    return false;
  }

  static final private boolean jj_3R_307() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_286() {
    if (jj_3R_315()) return true;
    return false;
  }

  static final private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3_86()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_171() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_3R_188()) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_46() {
    if (jj_3R_65()) return true;
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_314()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_306() {
    if (jj_scan_token(EXTENDS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) {
    jj_scanpos = xsp;
    if (jj_3R_333()) return true;
    }
    return false;
  }

  static final private boolean jj_3_45() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_44() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_284() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_170() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_188()) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_283() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_130() {
    if (jj_scan_token(RULE)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    return false;
  }

  static final private boolean jj_3_43() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    }
    }
    if (jj_3R_271()) return true;
    return false;
  }

  static final private boolean jj_3_42() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_356() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_355() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_174() {
    return false;
  }

  static final private boolean jj_3R_128() {
    if (jj_scan_token(INVARIANT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) return true;
    }
    if (jj_3R_214()) return true;
    return false;
  }

  static final private boolean jj_3R_215() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_274()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_41() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_40() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_174()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_354() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_74()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_353() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_341() {
    if (jj_scan_token(ENSURE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) return true;
    }
    if (jj_3R_214()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_73()) return true;
    return false;
  }

  static final private boolean jj_3_39() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  static final private boolean jj_3R_291() {
    if (jj_3R_134()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_83() {
    if (jj_3R_112()) return true;
    return false;
  }

  static final private boolean jj_3R_340() {
    if (jj_scan_token(REQUIRE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) return true;
    }
    if (jj_3R_214()) return true;
    return false;
  }

  static final private boolean jj_3R_319() {
    if (jj_3R_341()) return true;
    return false;
  }

  static final private boolean jj_3R_318() {
    if (jj_3R_340()) return true;
    return false;
  }

  static final private boolean jj_3R_290() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_316() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  static final private boolean jj_3R_216() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_83()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_289() {
    if (jj_3R_317()) return true;
    return false;
  }

  static final private boolean jj_3_36() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  static final private boolean jj_3R_288() {
    if (jj_3R_315()) return true;
    return false;
  }

  static final private boolean jj_3_38() {
    if (jj_3R_65()) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_316()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_258() {
    return false;
  }

  static final private boolean jj_3_35() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_323() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  static final private boolean jj_3R_69() {
    if (jj_3R_121()) return true;
    return false;
  }

  static final private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(2).kind == COLON;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_258()) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  static final private boolean jj_3R_297() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_296() {
    if (jj_3R_134()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  static final private boolean jj_3R_322() {
    if (jj_3R_341()) return true;
    return false;
  }

  static final private boolean jj_3R_131() {
    if (jj_3R_98()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_288()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_290()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_321() {
    if (jj_3R_340()) return true;
    return false;
  }

  static final private boolean jj_3R_295() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_255() {
    if (jj_scan_token(REPARSE_STATEMENT)) return true;
    return false;
  }

  static final private boolean jj_3R_320() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  static final private boolean jj_3_82() {
    if (jj_3R_111()) return true;
    return false;
  }

  static final private boolean jj_3R_294() {
    if (jj_3R_317()) return true;
    return false;
  }

  static final private boolean jj_3R_236() {
    if (jj_3R_255()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_71()) return true;
    return false;
  }

  static final private boolean jj_3R_235() {
    if (jj_3R_254()) return true;
    return false;
  }

  static final private boolean jj_3R_293() {
    if (jj_3R_315()) return true;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_3R_122()) return true;
    return false;
  }

  static final private boolean jj_3_32() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  static final private boolean jj_3R_234() {
    if (jj_3R_253()) return true;
    return false;
  }

  static final private boolean jj_3R_233() {
    if (jj_3R_252()) return true;
    return false;
  }

  static final private boolean jj_3R_292() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_68() {
    if (jj_3R_120()) return true;
    return false;
  }

  static final private boolean jj_3R_232() {
    if (jj_3R_251()) return true;
    return false;
  }

  static final private boolean jj_3R_231() {
    if (jj_3R_250()) return true;
    return false;
  }

  static final private boolean jj_3R_230() {
    if (jj_3R_249()) return true;
    return false;
  }

  static final private boolean jj_3R_229() {
    if (jj_3R_248()) return true;
    return false;
  }

  static final private boolean jj_3R_228() {
    if (jj_3R_247()) return true;
    return false;
  }

  static final private boolean jj_3R_227() {
    if (jj_3R_246()) return true;
    return false;
  }

  static final private boolean jj_3R_226() {
    if (jj_3R_245()) return true;
    return false;
  }

  static final private boolean jj_3R_225() {
    if (jj_3R_244()) return true;
    return false;
  }

  static final private boolean jj_3R_224() {
    if (jj_3R_243()) return true;
    return false;
  }

  static final private boolean jj_3_34() {
    if (jj_3R_65()) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_320()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_223() {
    if (jj_3R_242()) return true;
    return false;
  }

  static final private boolean jj_3R_222() {
    if (jj_3R_241()) return true;
    return false;
  }

  static final private boolean jj_3R_221() {
    if (jj_3R_240()) return true;
    return false;
  }

  static final private boolean jj_3R_220() {
    if (jj_3R_216()) return true;
    return false;
  }

  static final private boolean jj_3_31() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_219() {
    if (jj_3R_239()) return true;
    return false;
  }

  static final private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = labledStatementLA();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3_82()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_80() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static final private boolean jj_3R_180() {
    if (jj_3R_73()) return true;
    return false;
  }

  static final private boolean jj_3R_65() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_3R_119()) return true;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_3R_118()) return true;
    return false;
  }

  static final private boolean jj_3_81() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_80()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_184() {
    if (jj_3R_216()) return true;
    return false;
  }

  static final private boolean jj_3R_266() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_132() {
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_292()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_293()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_295()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) return true;
    }
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_67()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_183() {
    if (jj_3R_215()) return true;
    return false;
  }

  static final private boolean jj_3R_182() {
    if (jj_3R_214()) return true;
    return false;
  }

  static final private boolean jj_3R_194() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    if (jj_3R_266()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3_81()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_79() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_78() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_77() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_195() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    if (jj_3_78()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_78()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_270() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_267() {
    if (jj_3R_271()) return true;
    return false;
  }

  static final private boolean jj_3R_181() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_391() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  static final private boolean jj_3_76() {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_390() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static final private boolean jj_3R_389() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_388() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3_30() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public kiev020TokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;

  public kiev020(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new kiev020TokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
  }

  public kiev020(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new kiev020TokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
  }

  public kiev020(kiev020TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(kiev020TokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

        /*{
	private static Struct mkStruct(ASTIdentifier name, int flags, ASTModifiers modifiers, ASTNode parent) {
		ClazzName clname;
		if (parent instanceof FileUnit) {
			clname = ClazzName.fromOuterAndName(((FileUnit)parent).pkg.clazz,name.name,false,false);
		}
		else if (parent instanceof Struct) {
			clname = ClazzName.fromOuterAndName(PassInfo.clazz,name.name,false,true);
		}
		else if (name != null) {
			// Construct name of local class
			KString bytecode_name =
				KString.from(PassInfo.clazz.name.bytecode_name
					+"$"+PassInfo.clazz.countAnonymouseInnerStructs()
					+"$"+name.name);
			KString fixname = bytecode_name.replace('/','.');
			clname = new ClazzName(fixname,name.name,bytecode_name,false,false);
		}
		else {
			// Local anonymouse class
			KString bytecode_name =
				KString.from(PassInfo.clazz.name.bytecode_name
					+"$"+PassInfo.clazz.countAnonymouseInnerStructs());
			clname = ClazzName.fromBytecodeName(bytecode_name, false);
		}
		Struct clazz = Env.newStruct(clname,PassInfo.clazz,flags|modifiers.getFlags(),true);
		if (name != null)
			clazz.pos  = name.pos;
		else
			clazz.pos  = parent.pos;
		if (modifiers.acc != null)
			clazz.acc  = modifiers.acc;
		if      (parent instanceof FileUnit)
			clazz.setLocal(false);
		else if (parent instanceof Struct)
			clazz.setLocal(parent.isLocal());
		else
			clazz.setLocal(true);
		foreach (Meta m; modifiers.annotations)
			clazz.meta.set(m);
		return clazz;
	}

	private static BaseStruct mkStructArg(ASTIdentifier name, ASTModifiers modifiers, ASTNode parent) {
		BaseStruct arg;
		if (parent instanceof Struct) {
			Struct s = (Struct)parent;
			arg = Env.newArgument(name.name, s);
			s.args += arg;
		} else {
			ASTMethodDeclaration m = (ASTMethodDeclaration)parent;
			arg = Env.newMethodArgument(name.name, PassInfo.clazz);
			m.argtypes += arg;
		}
		arg.pos  = name.pos;
		foreach (Meta m; modifiers.annotations)
			arg.meta.set(m);
		return arg;
	}
	}*/

}

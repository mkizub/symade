/* Generated By:JavaCC: Do not edit this line. kiev050Constants.java */
/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.parser;

public interface kiev050Constants {

  int EOF = 0;
  int SINGLE_LINE_COMMENT = 11;
  int FORMAL_COMMENT = 12;
  int MULTI_LINE_COMMENT = 13;
  int ABSTRACT = 15;
  int BREAK = 16;
  int CASE = 17;
  int CATCH = 18;
  int CLASS = 19;
  int CONTINUE = 20;
  int _DEFAULT = 21;
  int DO = 22;
  int ELSE = 23;
  int EXTENDS = 24;
  int FINAL = 25;
  int FINALLY = 26;
  int FOR = 27;
  int FOREACH = 28;
  int GOTO = 29;
  int IF = 30;
  int IF_REWR = 31;
  int IMPLEMENTS = 32;
  int IMPORT = 33;
  int INTERFACE = 34;
  int METATYPE = 35;
  int NATIVE = 36;
  int PACKAGE = 37;
  int RETURN = 38;
  int STATIC = 39;
  int SWITCH = 40;
  int SYNCHRONIZED = 41;
  int WITH = 42;
  int THROW = 43;
  int THROWS = 44;
  int TRANSIENT = 45;
  int TRY = 46;
  int VOLATILE = 47;
  int VIEW = 48;
  int WHILE = 49;
  int VARARGS = 50;
  int PCUT = 51;
  int ALIAS = 52;
  int TYPE = 53;
  int TYPEDEF = 54;
  int ENUM = 55;
  int REQUIRE = 56;
  int ENSURE = 57;
  int INVARIANT = 58;
  int META_INTERFACE = 59;
  int META_SINGLETON = 60;
  int META_MIXIN = 61;
  int META_FORWARD = 62;
  int META_UNERASABLE = 63;
  int META_VIRTUAL = 64;
  int META_PACKED = 65;
  int META_MACRO = 66;
  int META_STATIC = 67;
  int META_ABSTRACT = 68;
  int META_FINAL = 69;
  int META_NATIVE = 70;
  int META_SYNCHRONIZED = 71;
  int META_TRANSIENT = 72;
  int META_VOLATILE = 73;
  int META_THROWS = 74;
  int META_UUID = 75;
  int META_GETTER = 76;
  int META_SETTER = 77;
  int META_ACCESS1 = 78;
  int META_PUBLIC = 79;
  int PUBLIC = 80;
  int META_PROTECTED = 81;
  int PROTECTED = 82;
  int META_PRIVATE = 83;
  int PRIVATE = 84;
  int READ_ONLY = 85;
  int WRITE_ONLY = 86;
  int READ_WRITE = 87;
  int NO_READ_WRITE = 88;
  int COMMA1 = 89;
  int COLON1 = 90;
  int OPEN_ACCESS = 91;
  int CLOSE_ACCESS = 92;
  int PRAGMA = 98;
  int PRAGMA_ENABLE = 99;
  int PRAGMA_DISABLE = 100;
  int FUNCTION = 101;
  int FALSE = 102;
  int NEW = 103;
  int NULL = 104;
  int TRUE = 105;
  int OPERATOR_ID = 106;
  int INTEGER_LITERAL = 107;
  int LONG_INTEGER_LITERAL = 108;
  int DECIMAL_LITERAL = 109;
  int HEX_LITERAL = 110;
  int OCTAL_LITERAL = 111;
  int FLOATING_POINT_LITERAL = 112;
  int DOUBLE_POINT_LITERAL = 113;
  int EXPONENT = 114;
  int CHARACTER_LITERAL = 115;
  int STRING_LITERAL = 116;
  int IDENTIFIER = 117;
  int LETTER = 118;
  int DIGIT = 119;
  int ID_STRING_LITERAL = 120;
  int LPAREN = 121;
  int RPAREN = 122;
  int LBRACE = 123;
  int RBRACE = 124;
  int LBRACKET = 125;
  int RBRACKET = 126;
  int SEMICOLON = 127;
  int COLON = 128;
  int DOT = 129;
  int COMMA = 130;
  int LT = 131;
  int GT = 132;
  int LANGLE = 133;
  int RANGLE = 134;
  int ASSIGN = 135;
  int ASSIGN2 = 136;
  int IS_THE = 137;
  int IS_ONE_OF = 138;
  int ARROW = 139;
  int OPERATOR_AT = 140;
  int OPERATOR_SHARP = 141;
  int OPERATOR_LRBRACKETS = 142;
  int OPERATOR_SUPERSCRIPT_PLUS = 143;
  int OPERATOR_SUPERSCRIPT_MINUS = 144;
  int OPERATOR_UPPER_BOUND = 145;
  int OPERATOR_LOWER_BOUND = 146;
  int OPERATOR = 147;

  int DEFAULT = 0;
  int IN_PRAGMA = 1;
  int IN_SINGLE_LINE_COMMENT = 2;
  int IN_FORMAL_COMMENT = 3;
  int IN_MULTI_LINE_COMMENT = 4;
  int IN_ACCESS = 5;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*{\"",
    "\"}*/\"",
    "\"//\"",
    "<token of kind 9>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 14>",
    "\"abstract\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"class\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"else\"",
    "\"extends\"",
    "\"final\"",
    "\"finally\"",
    "\"for\"",
    "\"foreach\"",
    "\"goto\"",
    "\"if\"",
    "\"if#\"",
    "\"implements\"",
    "\"import\"",
    "\"interface\"",
    "\"metatype\"",
    "\"native\"",
    "\"package\"",
    "\"return\"",
    "\"static\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"with\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"try\"",
    "\"volatile\"",
    "\"view\"",
    "\"while\"",
    "\"...\"",
    "\"$cut\"",
    "\"alias\"",
    "\"type\"",
    "\"typedef\"",
    "\"enum\"",
    "\"require\"",
    "\"ensure\"",
    "\"invariant\"",
    "\"@interface\"",
    "\"@singleton\"",
    "\"@mixin\"",
    "\"@forward\"",
    "\"@unerasable\"",
    "\"@virtual\"",
    "\"@packed\"",
    "\"@macro\"",
    "\"@static\"",
    "\"@abstract\"",
    "\"@final\"",
    "\"@native\"",
    "\"@synchronized\"",
    "\"@transient\"",
    "\"@volatile\"",
    "\"@throws\"",
    "\"@uuid\"",
    "\"@getter\"",
    "\"@setter\"",
    "\"@access\"",
    "\"@public\"",
    "\"public\"",
    "\"@protected\"",
    "\"protected\"",
    "\"@private\"",
    "\"private\"",
    "<READ_ONLY>",
    "<WRITE_ONLY>",
    "\"rw\"",
    "<NO_READ_WRITE>",
    "\",\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"pragma\"",
    "\"enable\"",
    "\"disable\"",
    "\"fun\"",
    "\"false\"",
    "\"new\"",
    "\"null\"",
    "\"true\"",
    "\"operator\"",
    "<INTEGER_LITERAL>",
    "<LONG_INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DOUBLE_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<ID_STRING_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\",\"",
    "\"<\"",
    "\">\"",
    "\"<\\u0335\"",
    "\">\\u0335\"",
    "\"=\"",
    "\":=\"",
    "\"?=\"",
    "\"@=\"",
    "\"->\"",
    "\"@\"",
    "\"#\"",
    "<OPERATOR_LRBRACKETS>",
    "\"\\u207a\"",
    "\"\\u207b\"",
    "\"\\u2264\"",
    "\"\\u2265\"",
    "<OPERATOR>",
  };

}

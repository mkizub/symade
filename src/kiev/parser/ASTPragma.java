/* Generated By:JJTree: Do not edit this line. ASTPragma.java */

/*
 Copyright (C) 1997-1998, Forestro, http://forestro.com

 This file is part of the Kiev compiler.
 
 The Kiev compiler is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation.

 The Kiev compiler is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with the Kiev compiler; see the file License.  If not, write to
 the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.
*/
  
package kiev.parser;

import kiev.Kiev;
import kiev.vlang.*;
import kiev.stdlib.*;

@node
public final class ASTPragma extends DNode {

	@node
	static class ASTPragmaImpl extends DNodeImpl {
		ASTPragmaImpl() {}
		@att boolean				enable;
		@att NArr<ConstStringExpr>	options;
	}
	@nodeview
	static class ASTPragmaView extends DNodeView {
		final ASTPragmaImpl impl;
		ASTPragmaView(ASTPragmaImpl impl) {
			super(impl);
			this.impl = impl;
		}
		@getter public final boolean				get$enable()	{ return this.impl.enable; }
		@getter public final NArr<ConstStringExpr>	get$options()	{ return this.impl.options; }
		@setter public final void set$enable(boolean val)			{ this.impl.enable = val; }
	}
	public NodeView			getNodeView()		{ return new ASTPragmaView((ASTPragmaImpl)this.$v_impl); }
	public DNodeView		getDNodeView()		{ return new ASTPragmaView((ASTPragmaImpl)this.$v_impl); }
	public ASTPragmaView	getASTPragmaView()	{ return new ASTPragmaView((ASTPragmaImpl)this.$v_impl); }

	@att public abstract           boolean					enable;
	@att public abstract access:ro NArr<ConstStringExpr>	options;

	public ASTPragma() { super(new ASTPragmaImpl()); }
	
	@getter public boolean					get$enable()	{ return this.getASTPragmaView().enable; }
	@getter public NArr<ConstStringExpr>	get$options()	{ return this.getASTPragmaView().options; }
	@setter public void set$enable(boolean val)			{ this.getASTPragmaView().enable = val; }

	public void resolve(Type reqType) {}
	
	public Dumper toJavaDecl(Dumper dmp) {
		return toJava(dmp);
	}
	
	public Dumper toJava(Dumper dmp) {
		dmp.append("/* pragma ").append(enable?"enable":"disable").space();
		foreach (ConstStringExpr e; options)
			dmp.forsed_space().append(e);
		return dmp.append("; */").newLine();
	}
}

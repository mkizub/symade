/* Generated By:JJTree: Do not edit this line. ASTMessageCallAccessExpression.java */

/*
 Copyright (C) 1997-1998, Forestro, http://forestro.com

 This file is part of the Kiev compiler.
 
 The Kiev compiler is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation.

 The Kiev compiler is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with the Kiev compiler; see the file License.  If not, write to
 the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.
*/
  
package kiev.parser;

import kiev.Kiev;
import kiev.vlang.*;
import kiev.stdlib.*;

/**
 * $Header: /home/CVSROOT/forestro/kiev/kiev/parser/ASTMessageCallAccessExpression.java,v 1.3 1998/10/26 23:47:04 max Exp $
 * @author Maxim Kizub
 * @version $Revision: 1.3 $
 *
 */

@node
public class ASTMessageCallAccessExpression extends Expr {
	public Expr		obj;
	public KString	func;
    public Expr[]	args = Expr.emptyArray;

	public ASTMessageCallAccessExpression(int id) {
		super(0);
	}

	public void jjtAddChild(ASTNode n, int i) {
    	if(i==0) {
        	obj = (Expr)n;
		} else {
        	func = ((ASTCallExpression)n).func;
			args = ((ASTCallExpression)n).args;
            pos = n.getPos();
        }
    }

	public ASTNode resolve(Type reqType) {
		for(int i=0; i < args.length; i++) {
			args[i] = args[i].resolveExpr(null);
		}
		ASTNode o;
		Struct cl;
		Type tp = null;
		o = obj.resolve(null);
		if( o == null )
			throw new CompilerException(obj.getPos(),"Unresolved object "+obj);
		if( !(o instanceof Expr) || !((Expr)o).getType().isReference() )
			throw new CompilerException(obj.getPos(),"Bad instance object "+obj);
		obj = (Expr)o;
		tp = ((Expr)o).getType();
		if( !tp.isInstanceOf(Type.tpDynamic) )
			throw new CompilerException(obj.getPos(),"Expression "+obj+" must implement kiev.stdlib.Dynamic interface");
		Expr[] args1 = new Expr[args.length+2];
		args1[0] = new ConstExpr(getPos(),new Integer(makeHash(func.toString())));
		args1[1] = new ConstExpr(getPos(),func);
		for(int i=0; i < args.length; i++)
			args1[i+2] = args[i];
		if( args.length > 4 ) {
			Method mr = Type.tpDynamic.clazz.resolveMethod(KString.from("$message$N"),
				KString.from("(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;"));
			return new CallAccessExpr(getPos(),parent,obj,mr,mr.makeArgs(args1,PassInfo.clazz.type)).resolve(reqType);
		} else {
			KStringBuffer sign = new KStringBuffer(256);
			sign.append("(ILjava/lang/String;");
			for(int i=0; i < args.length; i++)
				sign.append("Ljava/lang/Object;");
			sign.append(")Ljava/lang/Object;");
			Method mr = Type.tpDynamic.clazz.resolveMethod(KString.from("$message$"+args.length),
				sign.toKString());
			return new CallAccessExpr(getPos(),parent,obj,mr,mr.makeArgs(args1,PassInfo.clazz.type)).resolve(reqType);
		}
	}

	static int makeHash(String sign) {
		int hash = 0;
		int len = sign.length();
		for(int j=0; j < len; j++) hash = hash*37 + sign.charAt(j);
		return hash;
	}

	public Dumper toJava(Dumper dmp) {
    	dmp.append(obj).append('.');
    	if( args.length > 4 )
    		dmp.append("$message$N");
    	else
    		dmp.append("$message$"+args.length);
    	dmp.append("(").append(Integer.toString(makeHash(func.toString()))).append(",\"").append(func).append("\"");
		for(int i=0; i < args.length; i++) {
			dmp.append(',').append(args[i]);
		}
		return dmp.append(')');
	}
}

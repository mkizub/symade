/* Generated By:JJTree: Do not edit this line. ASTIdentifierAlias.java */

package kiev.parser;

import kiev.Kiev;
import kiev.stdlib.*;
import kiev.vlang.*;
import kiev.transf.*;

/**
 * @author Maxim Kizub
 * @version $Revision$
 *
 */

@node
public abstract class ASTAlias extends ASTNode {
	public static ASTAlias[]	emptyArray = new ASTAlias[0];
	
	@virtual typedef This  = ASTAlias;
	@virtual typedef VView = ASTAliasView;

	@nodeview
	public static view ASTAliasView of ASTAlias extends NodeView {
	}

	public ASTAlias() {}
	
	public abstract void attach(ASTNode n);

}

@node
public final class ASTIdentifierAlias extends ASTAlias {

	@virtual typedef This  = ASTIdentifierAlias;
	@virtual typedef VView = ASTIdentifierAliasView;

	@att public String		name;

	@setter
	public void set$name(String value) {
		this.name = (value != null) ? value.intern() : null;
	}
	
	@nodeview
	public static view ASTIdentifierAliasView of ASTIdentifierAlias extends ASTAliasView {
		public String		name;
	}

	public ASTIdentifierAlias() {}
	
	public void attach(ASTNode n) {
		switch(n) {
		case Method:
			((Method)n).id.addAlias(name);
			break;
		case Field:
			((Field)n).id.addAlias(name);
			break;
		default:
			throw new CompilerException(this,"Node of type "+n.getClass()+" cannot have aliases");
		}
	}

	public String toString() {
		return name.toString();
	}
    
	public Dumper toJava(Dumper dmp) {
		return dmp.space().append("/* alias ").append(name).append(" */").space();
	}

}


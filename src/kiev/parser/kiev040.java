/* Generated By:JavaCC: Do not edit this line. kiev040.java */
/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package kiev.parser;

import kiev.Kiev;
import java.io.Reader;

/*{

import static kiev.vlang.AccessFlags.*;
import syntax kiev.Syntax;

}*/

public final class Parser extends kiev040 {
        public Parser(Reader r) {
                super(r,1,1);
        }
}

public interface ParserConstants extends kiev040Constants {
}

public abstract class kiev040 implements kiev040Constants {

        public FileUnit                 curFileUnit;
        public TypeDecl                 curClazz;
        public Method                   curMethod;
        public boolean                  interface_only = false;
        public PreScanneable    presc = null;

        public boolean                  declMode = true;

        public kiev040(java.io.Reader stream, int line, int pos) {
                jj_input_stream = new SimpleCharStream(stream, line, pos);
                token_source = new kiev040TokenManager(jj_input_stream, this);
                token = new Token();
                token.next = jj_nt = token_source.getNextToken();
        }

        /** Report Parser Error (Exception) */
        private void rpe(String msg, ParseError e) {
                int pos;
                if( token==null ) pos = 0;
                else if( token.next==null ) pos = token.getPos();
                else pos = token.next.getPos();
                if( kiev.Kiev.debug ) {
                        kiev.Kiev.reportParserError(pos, msg, e);
                } else {
                        kiev.Kiev.reportParserError(pos, msg);
                }
        }

    /** Report other Error (Exception) */
        private void rperr(Throwable e) throws Throwable {
                int pos;
                if( token==null ) pos = 0;
                else if( token.next==null ) pos = token.getPos();
                else pos = token.next.getPos();
                if( kiev.Kiev.debug ) {
                        kiev.Kiev.reportParserError(pos, "Internal error:\n"+e, e);
                } else {
                        kiev.Kiev.reportParserError(pos, "Internal error");
                }
                throw e;
        }

        private boolean operatorLA() {
                Token t0 = getToken(0);
                Token t1 = getToken(1);
                if (t0.endLine != t1.beginLine || t0.endColumn+1 != t1.beginColumn)
                        return false;
                switch (t1.kind) {
                case ARROW:
                case LT:
                case GT:
                case ASSIGN:
                case ASSIGN2:
                case OPERATOR_AT:
                case OPERATOR_SHARP:
                case OPERATOR_UPPER_BOUND:
                case OPERATOR_LOWER_BOUND:
                case OPERATOR:
                        return true;
                }
                return false;
        }

        /*{
	private TypeDecl mkMetaType(Symbol name, ASTModifiers modifiers, NameSpace fu) {
		Struct pkg = fu.getPackage();
		String uuid = modifiers == null ? null : modifiers.getUUID();
		TypeDecl tdecl = Env.newMetaType(new Symbol<MetaTypeDecl>(name.pos,name.sname), pkg, true, uuid);
		tdecl.setTypeDeclNotLoaded(false);
		modifiers.moveToNode(tdecl.meta);
		Env.createProjectInfo(tdecl, String.valueOf(Kiev.getCurFile()));
		return tdecl;
	}

	private Struct mkStruct(Symbol name, Struct variant, int flags, ASTModifiers modifiers, ASTNode parent) {
		String nm;
		TypeDecl outer;
		boolean direct;
		if (parent instanceof NameSpace) {
			NameSpace ns = (NameSpace)parent;
			nm = name.sname;
			outer = ns.getPackage();
			direct = true;
		}
		else if (parent instanceof Struct) {
			nm = name.sname;
			outer = curClazz;
			direct = true;
		}
		else if (name != null) {
			// Construct name of local class
			nm = name.sname;
			outer = curClazz;
			direct = false;
		}
		else {
			// Local anonymouse class
			nm = null;
			outer = curClazz;
			direct = false;
		}
		String uuid = modifiers == null ? null : modifiers.getUUID();
		Struct clazz = Env.newStruct(nm,direct,(Struct)curClazz,flags,variant,true,uuid);
		if (name != null)
			clazz.pos  = name.pos;
		else
			clazz.pos  = parent.pos;
		clazz.setTypeDeclNotLoaded(false);
		modifiers.moveToNode(clazz.meta);
		if (parent instanceof NameSpace) {
			clazz.setLocal(false);
			Env.createProjectInfo(clazz, String.valueOf(Kiev.getCurFile()));
		}
		else if (parent instanceof Struct)
			clazz.setLocal(parent.isLocal());
		else
			clazz.setLocal(true);
		
		return clazz;
	}

	private TypeAssign mkTypeAssign(Symbol name, ASTModifiers modifiers, boolean mkUUID) {
		String uuid = modifiers == null ? null : modifiers.getUUID();
		TypeAssign arg = new TypeAssign(name.sname);
		arg.pos = name.pos;
		if (modifiers != null)
			modifiers.moveToNode(arg.meta);
		if (uuid == null && mkUUID) {
			MetaUUID muuid = new MetaUUID(true);
			muuid.setAutoGenerated(true);
			arg.setMeta(muuid);
		}
		return arg;
	}

	private TypeConstr mkTypeConstr(Symbol name, ASTModifiers modifiers, boolean mkUUID) {
		TypeConstr arg = null;
		String uuid = modifiers == null ? null : modifiers.getUUID();
		if (uuid != null) {
			DNode dn = MetaUUID.getRegisteredNode(uuid);
			if (dn instanceof TypeConstr) {
				arg = (TypeConstr)dn;
				arg.sname = name.sname;
				arg.meta.metas.delAll();
				arg.super_types.delAll();
				arg.lower_bound.delAll();
			}
		}
		if (arg == null)
			arg = new TypeConstr(name.sname);
		arg.pos = name.pos;
		if (modifiers != null)
			modifiers.moveToNode(arg.meta);
		if (uuid == null && mkUUID) {
			MetaUUID muuid = new MetaUUID(true);
			muuid.setAutoGenerated(true);
			arg.setMeta(muuid);
		}
		return arg;
	}

	private Constructor mkConstructor(Symbol id, ASTModifiers modifiers) {
		Constructor meth = new Constructor(0);
		meth.pos = id.pos;
		modifiers.moveToNode(meth.meta);
		return meth;
	}
	
	private Method mkMethod(Symbol id, ASTModifiers modifiers, TypeRef ret) {
		Method meth = new MethodImpl(id.sname, ret, 0);
		meth.pos = id.pos;
		modifiers.moveToNode(meth.meta);
		return meth;
	}
	
	private RuleMethod mkRuleMethod(Symbol id, ASTModifiers modifiers, TypeRef ret) {
		RuleMethod meth = new RuleMethod(id.sname, 0);
		meth.pos = id.pos;
		modifiers.moveToNode(meth.meta);
		return meth;
	}
	
	private Field mkField(Symbol id, ASTModifiers modifiers, TypeRef tp, ENode init) {
		if (tp == null)
			tp = new TypeDeclRef();
		Field f = new Field(id.sname, tp, 0);
		f.pos = id.pos;
		modifiers.copyToNode(f.meta);
		f.init = init;
		return f;
	}

	private Field mkEnumField(Symbol id, ASTModifiers modifiers) {
		Field f = new Field(id.sname,new TypeDeclRef(),0);
		f.meta.is_enum = true;
		f.pos = id.pos;
		modifiers.moveToNode(f.meta);
		return f;
	}

	private Field mkCaseField(Symbol id, ASTModifiers modifiers, TypeRef tp) {
		Field f = new Field(id.sname,tp,0|ACC_PUBLIC);
		f.pos = id.pos;
		modifiers.moveToNode(f.meta);
		return f;
	}
	
	private LVar mkVar(Symbol id, ASTModifiers modifiers, TypeRef tp) {
		if (tp == null)
			tp = new TypeDeclRef();
		LVar v = new LVar(id.pos, id.sname, tp, Var.VAR_LOCAL, 0);
		modifiers.copyToNode(v.meta);
		return v;
	}
	
	private LVar mkRuleVar(Symbol id, ASTModifiers modifiers, TypeRef tp, boolean first) {
		if (!first)
			tp = tp.ncopy();
		LVar v = new LVar(id.pos, id.sname, tp, Var.VAR_RULE, 0);
		modifiers.copyToNode(v.meta);
		return v;
	}
	
	private LVar mkFormPar(Symbol id, ASTModifiers modifiers, TypeRef vt, TypeRef st) {
		LVar v = new LVar(id.pos, id.sname, vt, LVar.PARAM_NORMAL, 0);
		if (st != null)
			v.stype = st;
		modifiers.moveToNode(v.meta);
		return v;
	}
	
	private LVar mkVarargPar(Symbol id, ASTModifiers modifiers, TypeRef vt) {
		LVar v = new LVar(id.pos, id.sname, vt, LVar.PARAM_VARARGS, ACC_FINAL);
		modifiers.moveToNode(v.meta);
		return v;
	}
	
	private RewritePattern mkRewritePattern(Symbol id, ASTModifiers modifiers, TypeRef tp) {
		RewritePattern v = new RewritePattern(id.sname, tp);
		v.pos = id.pos;
		modifiers.moveToNode(v.meta);
		return v;
	}
	
	private	Initializer mkInitializer(int pos, ASTModifiers modifiers) {
		Initializer init = new Initializer();
		init.pos = pos;
		modifiers.moveToNode(init.meta);
		return init;
	}

	
	private ENode mkNotExpr(EToken not, ENode cond) {
		cond.setPrimaryExpr(true);
		ASTExpression e = new ASTExpression();
		e.pos = cond.pos;
		e.nodes.append(not);
		e.nodes.append(~cond);
		return e;
	}
	
	private void expandExpr(ASTExpression e, ENode n) {
		if (n instanceof ASTExpression) {
			foreach (ENode x; n.nodes.delToArray())
				e.nodes += x;
		} else {
			e.nodes += n;
		}
	}


	}*/

        void comments_alone(SpacePtr arr) {
                Comment[] comments = get_comments();
                if (comments == null || comments.length == 0)
                        return;
                for (int i=0; i < comments.length; i++)
                        arr += comments[i];
        }
        void comments_before(ASTNode node) {
                Comment[] comments = get_comments();
                if (comments == null || comments.length == 0)
                        return;
                for (int i=0; i < comments.length; i++)
                        Comment.ATTR_BEFORE.set(node, comments[i]);
        }

        Comment[] get_comments() {
                Token t0 = getToken(0);
                Token t1 = getToken(1);
                Token st = t1.specialToken;
                if (st == null)
                        return null;
                Comment[] comments = new Comment[0];
                t1.specialToken = null;
                while (st.specialToken != null)
                        st = st.specialToken;
                for (; st != null; st = st.next) {
                        if (st.kind == SINGLE_LINE_COMMENT) {
                                String text = st.image.substring(2);
                                text = text.trim();
                                if (comments.length > 0 && comments[comments.length-1].eol_form) {
                                        Comment c = comments[comments.length-1];
                                        c.text = new StringBuffer(c.text.length()+1+text.length()).append(c.text).append('\n').append(text).toString();
                                        c.multiline = true;
                                } else {
                                        Comment c = new Comment();
                                        c.text = text;
                                        c.eol_form = true;
                                        c.nl_after = true;
                                        if (st.specialToken != null) {
                                                if (st.beginLine > st.specialToken.endLine)
                                                        c.nl_before = true;
                                        } else {
                                                if (st.beginLine < t0.endLine)
                                                        c.nl_before = true;
                                        }
                                        comments = (Comment[])Arrays.append(comments, c);
                                }
                        }
                        else if (st.kind == FORMAL_COMMENT || st.kind == MULTI_LINE_COMMENT) {
                                String text = (st.kind == FORMAL_COMMENT) ?
                                                st.image.substring(3, st.image.length()-5)
                                        :       st.image.substring(2, st.image.length()-4);
                                String[] lines = text.trim().split("\n");
                                for (int i=0; i < lines.length; i++) {
                                        String l = lines[i].trim();
                                        if (l.length() >= 1 && l.charAt(0) == '*') {
                                                l = l.substring(1);
                                                l = l.trim();
                                        }
                                        lines[i] = l;
                                }
                                Comment c = new Comment();
                                c.doc_form = (st.kind == FORMAL_COMMENT);
                                if (lines.length > 1) {
                                        c.multiline = true;
                                        c.text = "";
                                        for (int i=0; i < lines.length; i++) {
                                                String txt = lines[i].trim();
                                                c.text = new StringBuffer(c.text.length()+1+txt.length()).append(c.text).append('\n').append(txt).toString();
                                        }
                                } else {
                                        c.text = lines[0];
                                }

                                if (st.specialToken != null) {
                                        if (st.beginLine > st.specialToken.endLine)
                                                c.nl_before = true;
                                } else {
                                        if (st.beginLine < t0.endLine)
                                                c.nl_before = true;
                                }

                                if (st.next != null) {
                                        if (st.endLine < st.next.beginLine)
                                                c.nl_after = true;
                                } else {
                                        if (st.endLine < t1.beginLine)
                                                c.nl_after = true;
                                }
                                comments = (Comment[])Arrays.append(comments, c);
                        }
                }
                return comments;
        }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public FileUnit FileUnit(String filename) throws ParseException {
  FileUnit oldFileUnit; TypeDecl oldClazz;
                oldFileUnit = curFileUnit;
                FileUnit fu = FileUnit.makeFile(filename);
                curFileUnit = fu;
                declMode = true;
                ASTModifiers modifiers;
                oldClazz = curClazz;
                curClazz = Env.getRoot();
    try {
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case PRAGMA:
          ;
          break;
        default:
          break label_1;
        }
        Pragma(fu);
      }
      switch (jj_nt.kind) {
      case PACKAGE:
        fu.srpkg = Package();
                          curClazz = fu.getPackage();
        break;
      default:
        ;
      }
      TopLevelDeclarations(fu);
      jj_consume_token(0);
    } catch (ParseError e) {
                              rpe("Bad declaration",e);
    } catch (Throwable e) {
                             rperr(e);
    } finally {
                curClazz = oldClazz;
                curFileUnit = oldFileUnit;
                declMode = true;
                {if (true) return fu;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NameSpace NameSpaceDeclaration(ASTModifiers modifiers, NameSpace parent) throws ParseException {
  TypeDecl oldClazz = curClazz; NameSpace ns = new NameSpace();
          declMode = true;
    try {
      if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("namespace")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      if (parent.getPackage() instanceof Env) {
        ns.srpkg = QName();
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          ns.srpkg = NameRef();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                  parent.members += ns; curClazz = ns.getPackage();
      jj_consume_token(LBRACE);
      TopLevelDeclarations(ns);
      jj_consume_token(RBRACE);
    } catch (ParseError e) {
                              rpe("Bad declaration",e);
    } catch (Throwable e) {
                             rperr(e);
    } finally {
                curClazz = oldClazz;
                declMode = true;
                {if (true) return ns;}
    }
    throw new Error("Missing return statement in function");
  }

  final public void TopLevelDeclarations(NameSpace ns) throws ParseException {
  ASTModifiers modifiers; SpacePtr ns_members = ns.getSpacePtr("members");
    label_2:
    while (true) {
      if (getToken(1).kind != RBRACE && getToken(1).kind != EOF) {
        ;
      } else {
        break label_2;
      }
                  comments_alone(ns_members);
      modifiers = Modifiers();
      switch (jj_nt.kind) {
      case IMPORT:
        ns.members += Import(modifiers);
        break;
      case TYPEDEF:
        ns.members += Typedef(modifiers);
        break;
      case OPERATOR_ID:
        ns.members += Opdef(modifiers);
        break;
      case METATYPE:
        ns.members += MetaTypeDeclaration(modifiers, ns);
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
        break;
      case CLASS:
      case INTERFACE:
      case VIEW:
      case ENUM:
      case META_INTERFACE:
        ns.members += TypeDeclaration(modifiers, ns);
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
        break;
      default:
        if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {
          SyntaxDeclaration(modifiers, ns);
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
        } else if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("namespace")) {
          NameSpaceDeclaration(modifiers, ns);
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          comments_alone(ns_members);
  }

  final public ASTModifiers Modifiers() throws ParseException {
          ASTModifiers n = new ASTModifiers();
    label_3:
    while (true) {
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_ACCESS1:
      case META_PUBLIC:
      case PUBLIC:
      case META_PROTECTED:
      case PROTECTED:
      case META_PRIVATE:
      case PRIVATE:
      case OPERATOR_AT:
        ;
        break;
      default:
        break label_3;
      }
      switch (jj_nt.kind) {
      case OPERATOR_AT:
        n.annotations   += Annotation();
        break;
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
        SpecialAnnotation(n);
        break;
      case META_ACCESS1:
      case META_PUBLIC:
      case PUBLIC:
      case META_PROTECTED:
      case PROTECTED:
      case META_PRIVATE:
      case PRIVATE:
        Access(n);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public SymbolRef Package() throws ParseException {
  SymbolRef qn;
    jj_consume_token(PACKAGE);
    qn = QName();
    jj_consume_token(SEMICOLON);
                qn.symbol = Env.newPackage(qn.name);
                {if (true) return qn;}
    throw new Error("Missing return statement in function");
  }

  final public void Pragma(FileUnit fu) throws ParseException {
  ASTPragma p = new ASTPragma();
          comments_before(p);
    jj_consume_token(PRAGMA);
    switch (jj_nt.kind) {
    case PRAGMA_ENABLE:
      jj_consume_token(PRAGMA_ENABLE);
                                          p.enable = true;
      break;
    case PRAGMA_DISABLE:
      jj_consume_token(PRAGMA_DISABLE);
                                          p.enable = false;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      p.options += StringConstExpression();
      switch (jj_nt.kind) {
      case STRING_LITERAL:
        ;
        break;
      default:
        break label_4;
      }
    }
    jj_consume_token(SEMICOLON);
          fu.setPragma(p);
  }

  final public Import Import(ASTModifiers modifiers) throws ParseException {
  Import imp = new Import();
    jj_consume_token(IMPORT);
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {
      jj_consume_token(IDENTIFIER);
                              imp.mode = Import.ImportMode.IMPORT_SYNTAX;
      imp.name = QName();
    } else {
      switch (jj_nt.kind) {
      case STATIC:
      case IDENTIFIER:
        switch (jj_nt.kind) {
        case STATIC:
          jj_consume_token(STATIC);
                                  imp.mode = Import.ImportMode.IMPORT_STATIC;
          break;
        default:
          ;
        }
        imp.name = QName();
        if (jj_2_2(1)) {
          if (jj_2_1(2147483647) && (getToken(2).image.equals("*"))) {
            jj_consume_token(DOT);
            jj_consume_token(OPERATOR);
                                         imp.star = true;
          } else {
            switch (jj_nt.kind) {
            case LPAREN:
              jj_consume_token(LPAREN);
                                          imp.of_method = true;
              switch (jj_nt.kind) {
              case IDENTIFIER:
              case LPAREN:
                imp.args += Type();
                label_5:
                while (true) {
                  switch (jj_nt.kind) {
                  case COMMA:
                    ;
                    break;
                  default:
                    break label_5;
                  }
                  jj_consume_token(COMMA);
                  imp.args += Type();
                }
                break;
              default:
                ;
              }
              jj_consume_token(RPAREN);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } else {
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
          {if (true) return imp;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDecl Typedef(ASTModifiers modifiers) throws ParseException {
  Symbol id; TypeDecl n; TypeRef tr; Token t; EToken et;
    jj_consume_token(TYPEDEF);
    if (jj_2_3(3)) {
                  n = new TypeOpDef();
      id = Name();
      jj_consume_token(ASSIGN);
      tr = Type();
                  n = mkTypeAssign(id, modifiers,true); n.super_types += tr;
    } else if (jj_2_4(3)) {
                  n = new TypeOpDef();
      id     = Name();
                                          n.arg = mkTypeAssign(id, new ASTModifiers(),true);
      switch (jj_nt.kind) {
      case OPERATOR_ID:
      case LT:
      case GT:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        et   = Operator();
                                                       n.op = et.ident;
        break;
      case OPERATOR_LRBRACKETS:
        t    = jj_consume_token(OPERATOR_LRBRACKETS);
                                                       n.op = "[]";
        break;
      case VARARGS:
        t    = jj_consume_token(VARARGS);
                                                       n.op = "...";
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      n.type = Type();
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER:
      case LPAREN:
        tr = Type();
        id = Name();
                  n = mkTypeAssign(id, modifiers,true); n.super_types += tr;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Opdef Opdef(ASTModifiers modifiers) throws ParseException {
  SymbolRef id; EToken op; ConstIntExpr ce; ConstStringExpr cs; Opdef opd = new Opdef();
    jj_consume_token(OPERATOR_ID);
                                                                          opd.pos = getToken(0).getPos();
    switch (jj_nt.kind) {
    case OPERATOR_ID:
    case IDENTIFIER:
    case LT:
    case GT:
    case ASSIGN:
    case ASSIGN2:
    case IS_THE:
    case IS_ONE_OF:
    case ARROW:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      switch (jj_nt.kind) {
      case OPERATOR_ID:
      case LT:
      case GT:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        op = Operator();
                                                     opd.setImage(op);
        break;
      case IDENTIFIER:
        id = NameRef();
                                                     opd.setImage(id);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      // FX,FY,XF,YF,XFX,YFX,XFY,YFY
                      id = NameRef();
                                                 opd.setMode(id);
      jj_consume_token(COMMA);
      ce = IntConstExpression();
                                                          opd.setPriority(ce);
      break;
    case STRING_LITERAL:
      cs = StringConstExpression();
                                                  opd.decl = cs.value;
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
      ce = IntConstExpression();
                                                          opd.setPriority(ce);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
          {if (true) return opd;}
    throw new Error("Missing return statement in function");
  }

  final public KievSyntax SyntaxDeclaration(ASTModifiers modifiers, NameSpace parent) throws ParseException {
  KievSyntax stx; Symbol name; TypeDecl oldClazz;
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    // "syntax"
            name = Name();
                stx = (KievSyntax)mkStruct(name, new KievSyntax(), 0, modifiers, parent);
    switch (jj_nt.kind) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      stx.super_types += Type();
      label_6:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_6;
        }
        jj_consume_token(COMMA);
        stx.super_types += Type();
      }
      break;
    default:
      ;
    }
          parent.members += stx; oldClazz = curClazz; curClazz = stx;
    try {
      jj_consume_token(LBRACE);
      label_7:
      while (true) {
        switch (jj_nt.kind) {
        case ABSTRACT:
        case FINAL:
        case IMPORT:
        case NATIVE:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case TYPEDEF:
        case META_SINGLETON:
        case META_MIXIN:
        case META_FORWARD:
        case META_UNERASABLE:
        case META_VIRTUAL:
        case META_PACKED:
        case META_MACRO:
        case META_STATIC:
        case META_ABSTRACT:
        case META_FINAL:
        case META_NATIVE:
        case META_SYNCHRONIZED:
        case META_TRANSIENT:
        case META_VOLATILE:
        case META_THROWS:
        case META_UUID:
        case META_ACCESS1:
        case META_PUBLIC:
        case PUBLIC:
        case META_PROTECTED:
        case PROTECTED:
        case META_PRIVATE:
        case PRIVATE:
        case OPERATOR_ID:
        case OPERATOR_AT:
          ;
          break;
        default:
          break label_7;
        }
        modifiers = Modifiers();
        switch (jj_nt.kind) {
        case TYPEDEF:
          stx.members += Typedef(modifiers);
          break;
        case OPERATOR_ID:
          stx.members += Opdef(modifiers);
          break;
        case IMPORT:
          stx.members += Import(modifiers);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
    } finally {
                    curClazz = oldClazz;
    }
          {if (true) return stx;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDecl MetaTypeDeclaration(ASTModifiers modifiers, ASTNode parent) throws ParseException {
  TypeDecl tdecl; Symbol name; TypeRef tp; TypeDecl oldClazz; TypeConstr[] args;
    jj_consume_token(METATYPE);
    name = Name();
                tdecl = mkMetaType(name, modifiers, (NameSpace)parent);
    args = ClazzArguments();
                                  tdecl.args.addAll(args);
    switch (jj_nt.kind) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      tdecl.super_types += Type();
      label_8:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_8;
        }
        jj_consume_token(COMMA);
        tdecl.super_types += Type();
      }
      break;
    default:
      ;
    }
          oldClazz = curClazz; curClazz = null;
    try {
      TypeBodyDeclaration(tdecl);
    } finally {
                    curClazz = oldClazz;
    }
          {if (true) return tdecl;}
    throw new Error("Missing return statement in function");
  }

  final public Struct TypeDeclaration(ASTModifiers modifiers, ASTNode parent) throws ParseException {
  Struct clazz; Symbol name; TypeDecl oldClazz; TypeConstr[] args;
    switch (jj_nt.kind) {
    case CLASS:
      jj_consume_token(CLASS);
      name = Name();
                        clazz = mkStruct(name, new JavaClass(), 0, modifiers, parent);
      args = ClazzArguments();
                                          clazz.args.addAll(args);
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        clazz.super_types += Type();
        label_9:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_9;
          }
          jj_consume_token(COMMA);
          clazz.super_types += Type();
        }
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        clazz.super_types += Type();
        label_10:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_10;
          }
          jj_consume_token(COMMA);
          clazz.super_types += Type();
        }
        break;
      default:
        ;
      }
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
      name = Name();
                        clazz = mkStruct(name, new JavaInterface(), ACC_INTERFACE, modifiers, parent);
      args = ClazzArguments();
                                          clazz.args.addAll(args);
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        clazz.super_types += Type();
        label_11:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_11;
          }
          jj_consume_token(COMMA);
          clazz.super_types += Type();
        }
        break;
      default:
        ;
      }
      break;
    case META_INTERFACE:
      jj_consume_token(META_INTERFACE);
      switch (jj_nt.kind) {
      case IDENTIFIER:
        name = Name();
        break;
      case THROWS:
      case ALIAS:
        name = KeywordAsName();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                        clazz = mkStruct(name, new JavaAnnotation(), ACC_INTERFACE|ACC_ANNOTATION, modifiers, parent);
      break;
    case ENUM:
      jj_consume_token(ENUM);
      name = Name();
                        clazz = mkStruct(name, new JavaEnum(), ACC_ENUM|ACC_STATIC, modifiers, parent);
      break;
    case VIEW:
      jj_consume_token(VIEW);
      name = Name();
                        clazz = mkStruct(name, new KievView(), ACC_VIRTUAL, modifiers, parent);
                        KievView kview = (KievView)clazz;
      args = ClazzArguments();
                                          clazz.args.addAll(args);
      if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("of")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      // "of"
                      kview.view_of = NArrType();
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        clazz.super_types += Type();
        label_12:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_12;
          }
          jj_consume_token(COMMA);
          clazz.super_types += Type();
        }
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        clazz.super_types += Type();
        label_13:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_13;
          }
          jj_consume_token(COMMA);
          clazz.super_types += Type();
        }
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          oldClazz = curClazz; curClazz = clazz;
    try {
      TypeBodyDeclaration(clazz);
    } finally {
                    curClazz = oldClazz;
    }
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public void TypeBodyDeclaration(TypeDecl clazz) throws ParseException {
  ASTModifiers modifiers; DeclGroupEnumFields enums; SpacePtr clazz_members = clazz.getSpacePtr("members");
    jj_consume_token(LBRACE);
    if (clazz.isEnum()) {
                  enums = new DeclGroupEnumFields();
      modifiers = Modifiers();
      enums.decls += EnumFieldDeclaration(modifiers);
      label_14:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_14;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        enums.decls += EnumFieldDeclaration(modifiers);
      }
                  clazz.members.insert(0,enums);
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    label_15:
    while (true) {
      if (jj_2_5(1)) {
        ;
      } else {
        break label_15;
      }
                  comments_alone(clazz_members);
      modifiers = Modifiers();
      if (jj_2_6(1)) {
        clazz.members += Initializer(modifiers);
      } else {
        switch (jj_nt.kind) {
        case INVARIANT:
          clazz.members += InvariantDeclaration(modifiers);
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
          break;
        case CLASS:
        case INTERFACE:
        case VIEW:
        case ENUM:
        case META_INTERFACE:
          clazz.members += TypeDeclaration(modifiers, clazz);
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
          break;
        case TYPEDEF:
          clazz.members += MemberArgDecl(modifiers);
          break;
        case CASE:
          clazz.members += CaseTypeDeclaration(modifiers, (Struct)clazz);
          break;
        default:
          if (jj_2_7(3) && (getToken(1).image.equals("rule"))) {
            clazz.members += RuleDeclaration(modifiers);
          } else if (jj_2_8(2147483647)) {
            clazz.members += ConstructorDeclaration(modifiers);
          } else if (jj_2_9(2147483647)) {
            clazz.members += MethodDeclaration(modifiers);
          } else {
            // LOOKAHEAD( Type() <IDENTIFIER> ("=" | "," | ";") )
                                    clazz_members += FieldDecls(modifiers);
          }
        }
      }
    }
          comments_alone(clazz_members);
    jj_consume_token(RBRACE);
  }

  final public Field EnumFieldDeclaration(ASTModifiers modifiers) throws ParseException {
  Symbol id; Field f; ConstStringExpr text; NewEnumExpr ne;
    id = Name();
          f = mkEnumField(id, modifiers);
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
      text = StringConstExpression();
                                                 Field.ALT_ENUM_ID_ATTR.set(f, text);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
                          ne = new NewEnumExpr(); f.init = ne;
      if (getToken(1).kind != RPAREN) {
        ne.args += ExpressionColon();
        label_16:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_16;
          }
          jj_consume_token(COMMA);
          ne.args += ExpressionColon();
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:

    }
          {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Struct CaseTypeDeclaration(ASTModifiers modifiers, Struct parent) throws ParseException {
  Symbol name; Struct clazz; TypeConstr[] args; DeclGroupCaseFields cases;
    jj_consume_token(CASE);
    name = Name();
                clazz = mkStruct(name, new PizzaCase(), ACC_STATIC|ACC_FINAL, modifiers, parent);
                //clazz.super_types.insert(0, new TypeRef(parent.xtype));
                //clazz.setPizzaCase();
                clazz.setSingleton(true);
                cases = new DeclGroupCaseFields();
                clazz.members.insert(0, cases);
    args = ClazzArguments();
                                  clazz.args.addAll(args);
    switch (jj_nt.kind) {
    case LPAREN:
      jj_consume_token(LPAREN);
              clazz.setSingleton(false);
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_ACCESS1:
      case META_PUBLIC:
      case PUBLIC:
      case META_PROTECTED:
      case PROTECTED:
      case META_PRIVATE:
      case PRIVATE:
      case IDENTIFIER:
      case LPAREN:
      case OPERATOR_AT:
        modifiers = Modifiers();
        cases.decls += CaseTypeField(modifiers);
        label_17:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_17;
          }
          jj_consume_token(COMMA);
          modifiers = Modifiers();
          cases.decls += CaseTypeField(modifiers);
        }
        break;
      default:
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public TypeConstr[] ClazzArguments() throws ParseException {
  TypeConstr[] args = new TypeConstr[0]; TypeConstr arg;
    switch (jj_nt.kind) {
    case LT:
    case LANGLE:
      switch (jj_nt.kind) {
      case LT:
        jj_consume_token(LT);
        break;
      case LANGLE:
        jj_consume_token(LANGLE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg = ArgumentDeclaration();
                          args = (TypeConstr[])Arrays.append(args,arg);
      label_18:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_18;
        }
        jj_consume_token(COMMA);
        arg = ArgumentDeclaration();
                                  args = (TypeConstr[])Arrays.append(args,arg);
      }
      switch (jj_nt.kind) {
      case GT:
        jj_consume_token(GT);
        break;
      case RANGLE:
        jj_consume_token(RANGLE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
          {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDef MemberArgDecl(ASTModifiers modifiers) throws ParseException {
  Symbol name; TypeDef arg; TypeRef t;
    jj_consume_token(TYPEDEF);
    name      = Name();
    switch (jj_nt.kind) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
                          arg = mkTypeAssign(name,modifiers,true);
      t = Type();
                                     arg.super_types += t;
      jj_consume_token(SEMICOLON);
      break;
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
                          arg = mkTypeConstr(name,modifiers,true);
      label_19:
      while (true) {
        switch (jj_nt.kind) {
        case OPERATOR_UPPER_BOUND:
          jj_consume_token(OPERATOR_UPPER_BOUND);
          t = Type();
                                                                    arg.super_types.add(t);
          break;
        case OPERATOR_LOWER_BOUND:
          jj_consume_token(OPERATOR_LOWER_BOUND);
          t = Type();
                                                                    arg.lower_bound.add(t);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch (jj_nt.kind) {
        case OPERATOR_UPPER_BOUND:
        case OPERATOR_LOWER_BOUND:
          ;
          break;
        default:
          break label_19;
        }
      }
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return arg;}
    throw new Error("Missing return statement in function");
  }

  final public TypeConstr ArgumentDeclaration() throws ParseException {
  ASTModifiers modifiers; Symbol name; TypeConstr arg; TypeRef tr;
    modifiers = Modifiers();
    name      = Name();
          arg = mkTypeConstr(name,modifiers,true); arg.setAbstract(true);
    switch (jj_nt.kind) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      tr = Type();
                              arg.super_types.add(tr);
      label_20:
      while (true) {
        if (jj_2_10(2147483647) && (getToken(1).image.equals("&"))) {
          ;
        } else {
          break label_20;
        }
        jj_consume_token(OPERATOR);
        tr = Type();
                                      arg.super_types.add(tr);
      }
      break;
    default:
      ;
    }
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("super")) {
      //"super"
                      tr = Type();
                              arg.lower_bound.add(tr);
      label_21:
      while (true) {
        if (jj_2_11(2147483647) && (getToken(1).image.equals("&"))) {
          ;
        } else {
          break label_21;
        }
        jj_consume_token(OPERATOR);
        tr = Type();
                                      arg.lower_bound.add(tr);
      }
    } else {
      ;
    }
          {if (true) return arg;}
    throw new Error("Missing return statement in function");
  }

  final public void Access(ASTModifiers modifiers) throws ParseException {
  int acc;      int accflags = 0; int offset = 6; MetaAccess ma;
    switch (jj_nt.kind) {
    case META_ACCESS1:
      jj_consume_token(META_ACCESS1);
                                          ma = new MetaAccess();
      break;
    case META_PUBLIC:
      jj_consume_token(META_PUBLIC);
                                          ma = new MetaAccess("public");
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
                                          ma = new MetaAccess("public");
      break;
    case META_PROTECTED:
      jj_consume_token(META_PROTECTED);
                                  ma = new MetaAccess("protected");
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
                                          ma = new MetaAccess("protected");
      break;
    case META_PRIVATE:
      jj_consume_token(META_PRIVATE);
                                          ma = new MetaAccess("private");
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                                          ma = new MetaAccess("private");
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          modifiers += ma;
    switch (jj_nt.kind) {
    case COLON1:
    case OPEN_ACCESS:
      switch (jj_nt.kind) {
      case COLON1:
        jj_consume_token(COLON1);
        // ":"
                        acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
        switch (jj_nt.kind) {
        case COMMA1:
          jj_consume_token(COMMA1);
          acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
          switch (jj_nt.kind) {
          case COMMA1:
            jj_consume_token(COMMA1);
            acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
            switch (jj_nt.kind) {
            case COMMA1:
              jj_consume_token(COMMA1);
              acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
              break;
            default:
              ;
            }
            break;
          default:
            ;
          }
          break;
        default:
          ;
        }
                  ma.setFlags(accflags);
        break;
      case OPEN_ACCESS:
        jj_consume_token(OPEN_ACCESS);
        // "("
                        acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
        switch (jj_nt.kind) {
        case COMMA1:
          jj_consume_token(COMMA1);
          acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
          switch (jj_nt.kind) {
          case COMMA1:
            jj_consume_token(COMMA1);
            acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
            switch (jj_nt.kind) {
            case COMMA1:
              jj_consume_token(COMMA1);
              acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
              break;
            default:
              ;
            }
            break;
          default:
            ;
          }
          break;
        default:
          ;
        }
        jj_consume_token(CLOSE_ACCESS);
                  ma.setFlags(accflags);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
  }

  final public int AccessSpec() throws ParseException {
    switch (jj_nt.kind) {
    case READ_ONLY:
      jj_consume_token(READ_ONLY);
                                  {if (true) return 2;}
      break;
    case WRITE_ONLY:
      jj_consume_token(WRITE_ONLY);
                          {if (true) return 1;}
      break;
    case READ_WRITE:
      jj_consume_token(READ_WRITE);
                          {if (true) return 3;}
      break;
    case NO_READ_WRITE:
      jj_consume_token(NO_READ_WRITE);
                          {if (true) return 0;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void SpecialAnnotation(ASTModifiers modifiers) throws ParseException {
  MetaPacked mp; MetaThrows mt; TypeNameRef thr; ConstIntExpr ice; ConstStringExpr cs; SymbolRef nr;
    switch (jj_nt.kind) {
    case META_SINGLETON:
      jj_consume_token(META_SINGLETON);
                                  modifiers += new MetaSingleton();
      break;
    case META_MIXIN:
      jj_consume_token(META_MIXIN);
                                          modifiers += new MetaMixin();
      break;
    case META_FORWARD:
      jj_consume_token(META_FORWARD);
                                  modifiers += new MetaForward();
      break;
    case META_UNERASABLE:
      jj_consume_token(META_UNERASABLE);
                                  modifiers += new MetaUnerasable();
      break;
    case META_VIRTUAL:
      jj_consume_token(META_VIRTUAL);
                                  modifiers += new MetaVirtual();
      break;
    case META_MACRO:
      jj_consume_token(META_MACRO);
                                          modifiers += new MetaMacro();
      break;
    case STATIC:
      jj_consume_token(STATIC);
                                          modifiers += new MetaStatic();
      break;
    case META_STATIC:
      jj_consume_token(META_STATIC);
                                          modifiers += new MetaStatic();
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                                  modifiers += new MetaAbstract();
      break;
    case META_ABSTRACT:
      jj_consume_token(META_ABSTRACT);
                                  modifiers += new MetaAbstract();
      break;
    case FINAL:
      jj_consume_token(FINAL);
                                          modifiers += new MetaFinal();
      break;
    case META_FINAL:
      jj_consume_token(META_FINAL);
                                          modifiers += new MetaFinal();
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
                                          modifiers += new MetaNative();
      break;
    case META_NATIVE:
      jj_consume_token(META_NATIVE);
                                          modifiers += new MetaNative();
      break;
    case SYNCHRONIZED:
      jj_consume_token(SYNCHRONIZED);
                                  modifiers += new MetaSynchronized();
      break;
    case META_SYNCHRONIZED:
      jj_consume_token(META_SYNCHRONIZED);
                                  modifiers += new MetaSynchronized();
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
                                  modifiers += new MetaTransient();
      break;
    case META_TRANSIENT:
      jj_consume_token(META_TRANSIENT);
                                  modifiers += new MetaTransient();
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
                                  modifiers += new MetaVolatile();
      break;
    case META_VOLATILE:
      jj_consume_token(META_VOLATILE);
                                  modifiers += new MetaVolatile();
      break;
    case META_PACKED:
      jj_consume_token(META_PACKED);
                  mp = new MetaPacked();
      switch (jj_nt.kind) {
      case LPAREN:
        jj_consume_token(LPAREN);
        ice = IntConstExpression();
                                                                             mp.size = ice.value;
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          nr  = NameRef();
                                                                  mp.fld = nr;
          jj_consume_token(COMMA);
          ice = IntConstExpression();
                                                                             mp.offset = ice.value;
          break;
        default:
          ;
        }
        jj_consume_token(RPAREN);
        break;
      case COLON:
        jj_consume_token(COLON);
        ice = IntConstExpression();
                                                             mp.size = ice.value;
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          nr  = NameRef();
                                                          mp.fld = nr;
          jj_consume_token(COMMA);
          ice = IntConstExpression();
                                                                     mp.offset = ice.value;
          break;
        default:
          ;
        }
        break;
      default:

      }
                  modifiers += mp;
      break;
    case META_THROWS:
      jj_consume_token(META_THROWS);
                  mt = new MetaThrows();
      switch (jj_nt.kind) {
      case IDENTIFIER:
        thr = TypeQName();
                                            mt.add(thr);
        label_22:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_22;
          }
          jj_consume_token(COMMA);
          thr = TypeQName();
                                                  mt.add(thr);
        }
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        if (jj_2_12(2)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(ASSIGN);
        } else {
          ;
        }
        switch (jj_nt.kind) {
        case LBRACE:
          jj_consume_token(LBRACE);
          break;
        default:
          ;
        }
        thr = TypeQName();
                                            mt.add(thr);
        label_23:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_23;
          }
          jj_consume_token(COMMA);
          thr = TypeQName();
                                                  mt.add(thr);
        }
        switch (jj_nt.kind) {
        case RBRACE:
          jj_consume_token(RBRACE);
          break;
        default:
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  modifiers += mt;
      break;
    case META_UUID:
      jj_consume_token(META_UUID);
                  mt = new MetaUUID();
      jj_consume_token(LPAREN);
      cs = StringConstExpression();
      jj_consume_token(RPAREN);
                  mt.value = cs.value; modifiers += mt;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public SymbolRef KeywordAsNameRef() throws ParseException {
  Token t; SymbolRef id;
    switch (jj_nt.kind) {
    case ALIAS:
      t= jj_consume_token(ALIAS);
      break;
    case THROWS:
      t= jj_consume_token(THROWS);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                id = new SymbolRef();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol KeywordAsName() throws ParseException {
  Token t; Symbol id;
    switch (jj_nt.kind) {
    case ALIAS:
      t= jj_consume_token(ALIAS);
      break;
    case THROWS:
      t= jj_consume_token(THROWS);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                id = new Symbol();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public UserMeta Annotation() throws ParseException {
  SymbolRef id; MetaValue v;
          UserMeta n = new UserMeta();
    jj_consume_token(OPERATOR_AT);
    switch (jj_nt.kind) {
    case IDENTIFIER:
      id = QName();
      break;
    case THROWS:
    case ALIAS:
      id = KeywordAsNameRef();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                n.pos = id.pos;  n.decl.name = id.name;
    if (getToken(1).kind == LPAREN) {
      jj_consume_token(LPAREN);
      if (getToken(1).kind != RPAREN) {
        if (jj_2_13(2147483647)) {
          AnnotationValues(n);
        } else {
          v = AnnotationValueAny(new SymbolRef("value"));
                                                                                 n.set(v);
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
    } else {
      ;
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public void AnnotationValues(UserMeta m) throws ParseException {
  SymbolRef id; MetaValue v;
    id = NameRef();
    jj_consume_token(ASSIGN);
    v = AnnotationValueAny(id);
          m.set(v);
    label_24:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_24;
      }
      jj_consume_token(COMMA);
      id = NameRef();
      jj_consume_token(ASSIGN);
      v = AnnotationValueAny(id);
                  v.ident = id.name; v.pos = id.pos; m.set(v);
    }
  }

  final public MetaValue AnnotationValueAny(SymbolRef id) throws ParseException {
  ENode n; MetaValue v;
    if (jj_2_14(2147483647)) {
      n = Annotation();
                  v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        v = AnnotationValueValueArrayInitializer(id);
        break;
      default:
        n = Expression();
                  v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
      }
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public MetaValueScalar AnnotationValueScalar(SymbolRef id) throws ParseException {
  ENode n; MetaValueScalar v;
    if (jj_2_15(2147483647)) {
      n = Annotation();
                  v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
    } else {
      n = Expression();
                  v = new MetaValueScalar(id); ((MetaValueScalar)v).value = n;
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public MetaValueArray AnnotationValueValueArrayInitializer(SymbolRef id) throws ParseException {
  MetaValueScalar n; MetaValueArray v;
          v = new MetaValueArray(id);
    jj_consume_token(LBRACE);
    if (getToken(1).kind != RBRACE) {
      n = AnnotationValueScalar(null);
                                                  v.values.add(~n.value);
      label_25:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        n = AnnotationValueScalar(null);
                                                          v.values.add(~n.value);
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode FieldDecls(ASTModifiers modifiers) throws ParseException {
  boolean old_declMode; TypeRef type; Symbol id; ENode init; Field f; DeclGroupFields decl; DNode ret;
                old_declMode = declMode;
                declMode = false;
                init = null;
                decl = null;
                f = null;
    try {
      type = Type();
      id = Name();
      switch (jj_nt.kind) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        init = VariableInitializer();
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case COMMA:
                                decl = new DeclGroupFields();
                                modifiers.copyToNode(decl.meta);
                                decl.dtype = type;
                                f = mkField(id, new ASTModifiers(), null, init);
                                init = null;
                                decl.decls += f;
                                ret = decl;
        label_26:
        while (true) {
          jj_consume_token(COMMA);
          id = Name();
          switch (jj_nt.kind) {
          case ASSIGN:
            jj_consume_token(ASSIGN);
            init = VariableInitializer();
            break;
          default:
            ;
          }
                                        f = mkField(id, new ASTModifiers(), null, init);
                                        init = null;
                                        decl.decls += f;
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_26;
          }
        }
        break;
      default:
                                f = mkField(id, modifiers, type, init);
                                init = null;
                                ret = f;
      }
      jj_consume_token(SEMICOLON);
                        {if (true) return ret;}
    } finally {
                    declMode = old_declMode;
    }
    throw new Error("Missing return statement in function");
  }

  final public void LocalVarDecls(ASTModifiers modifiers, RuleMethod meth) throws ParseException {
  TypeRef type;
    type = Type();
    meth.localvars += RuleVarDecl(modifiers, type, true);
    label_27:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_27;
      }
      jj_consume_token(COMMA);
      meth.localvars += RuleVarDecl(modifiers, type, false);
    }
    jj_consume_token(SEMICOLON);
  }

  final public LVar RuleVarDecl(ASTModifiers modifiers, TypeRef type, boolean first) throws ParseException {
  Token t; Symbol id; LVar lv;
    id = Name();
          lv = mkRuleVar(id, modifiers, type, first);
    switch (jj_nt.kind) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      lv.init = VariableInitializer();
      break;
    default:
      ;
    }
          {if (true) return lv;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode VarDecls(ASTModifiers modifiers) throws ParseException {
  boolean old_declMode; TypeRef type; Symbol id; ENode init; DeclGroupVars decl; Var var;
                old_declMode = declMode;
                declMode = false;
                init = null;
                decl = null;
                var = null;
    try {
      type = Type();
      id = Name();
      switch (jj_nt.kind) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        init = VariableInitializer();
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case COMMA:
                                decl = new DeclGroupVars();
                                modifiers.copyToNode(decl.meta);
                                decl.dtype = type;
                                var = mkVar(id, new ASTModifiers(), null);
                                var.init = init;
                                init = null;
                                decl.decls += var;
        label_28:
        while (true) {
          jj_consume_token(COMMA);
          id = Name();
          switch (jj_nt.kind) {
          case ASSIGN:
            jj_consume_token(ASSIGN);
            init = VariableInitializer();
            break;
          default:
            ;
          }
                                        var = mkVar(id, new ASTModifiers(), null);
                                        var.init = init;
                                        init = null;
                                        decl.decls += var;
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_28;
          }
        }
                                {if (true) return decl;}
        break;
      default:
                                var = mkVar(id, modifiers, type);
                                var.init = init;
                                init = null;
                                {if (true) return var;}
      }
    } finally {
                    declMode = old_declMode;
    }
    throw new Error("Missing return statement in function");
  }

  final public ENode VariableInitializer() throws ParseException {
  ENode e;
    switch (jj_nt.kind) {
    case LBRACE:
      e = ArrayInitializer();
      break;
    default:
      e = ExpressionColon();
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ArrayInitializer() throws ParseException {
  NewInitializedArrayExpr e = new NewInitializedArrayExpr(); e.pos = getToken(1).getPos();
    jj_consume_token(LBRACE);
    if (jj_2_17(2)) {
      e.args += VariableInitializer();
      label_29:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_29;
        }
        jj_consume_token(COMMA);
        e.args += VariableInitializer();
      }
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Field CaseTypeField(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; Symbol id;
    tp = Type();
    id = Name();
                {if (true) return mkCaseField(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
  }

  final public Var PizzaCaseFormalParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; Symbol id;
    if (getToken(1).image.equals("_")) {
      id = Name();
                              tp = new TypeRef(Type.tpVoid); tp.pos = id.pos;
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER:
      case LPAREN:
        tp = Type();
        id = Name();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return mkVar(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
  }

  final public LVar MethodFormalParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; TypeRef st=null; Symbol id;
    tp = Type();
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
      st = Type();
      break;
    default:
      ;
    }
    id = Name();
          {if (true) return mkFormPar(id, modifiers, tp, st);}
    throw new Error("Missing return statement in function");
  }

  final public LVar MethodVarargsParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp = null; Symbol id = null;
    switch (jj_nt.kind) {
    case IDENTIFIER:
    case LPAREN:
      tp = Type();
      break;
    default:
      ;
    }
    t = jj_consume_token(VARARGS);
    switch (jj_nt.kind) {
    case IDENTIFIER:
      id = Name();
      break;
    default:
      ;
    }
                if (tp == null)
                        tp = new TypeExpr(new TypeRef(Type.tpObject), t);
                else
                        tp = new TypeExpr(tp, t);
                tp.pos = t.getPos();
                if (id == null) {
                        id = new Symbol(t.getPos(), Constants.nameVarArgs);
                }
                {if (true) return mkVarargPar(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
  }

  final public LVar FormalParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; Symbol id;
    tp = Type();
    id = Name();
          {if (true) return mkFormPar(id, modifiers, tp, null);}
    throw new Error("Missing return statement in function");
  }

  final public MetaThrows Throws() throws ParseException {
  MetaThrows n = new MetaThrows(); TypeNameRef thr;
    jj_consume_token(THROWS);
    thr = TypeQName();
                            n.add(thr);
    label_30:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_30;
      }
      jj_consume_token(COMMA);
      thr = TypeQName();
                                    n.add(thr);
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol Alias() throws ParseException {
  Token t; Symbol a; SymbolRef id; EToken op; ConstIntExpr ce; ConstStringExpr cs;
    switch (jj_nt.kind) {
    case ALIAS:
      jj_consume_token(ALIAS);
      switch (jj_nt.kind) {
      case IDENTIFIER:
        a = Name();
        switch (jj_nt.kind) {
        case OPERATOR_ID:
          jj_consume_token(OPERATOR_ID);
                                  String opmode = a.sname; a = new ASTOperatorAlias(); a.setMode(opmode);
          switch (jj_nt.kind) {
          case OPERATOR_ID:
          case LT:
          case GT:
          case ASSIGN:
          case ASSIGN2:
          case IS_THE:
          case IS_ONE_OF:
          case ARROW:
          case OPERATOR_AT:
          case OPERATOR_SHARP:
          case OPERATOR_UPPER_BOUND:
          case OPERATOR_LOWER_BOUND:
          case OPERATOR:
            op = Operator();
                                                                                  a.setImage(op);
            break;
          case IDENTIFIER:
            id = NameRef();
                                                                                  a.setImage(id);
            break;
          case OPERATOR_LRBRACKETS:
            jj_consume_token(OPERATOR_LRBRACKETS);
                                                                          a.image = "[]";
            break;
          case NEW:
            jj_consume_token(NEW);
                                                                                          a.image = "new";
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          ;
        }
        break;
      case OPERATOR_ID:
        jj_consume_token(OPERATOR_ID);
        cs = StringConstExpression();
                          a = new ASTOperatorAlias(); a.setName(cs);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case OPERATOR_ID:
      jj_consume_token(OPERATOR_ID);
      cs = StringConstExpression();
                  a = new ASTOperatorAlias(); a.setName(cs);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public ENode MaybeSkipBlock() throws ParseException {
  boolean old_declMode; ENode bl = null;
    if (interface_only) {
      jj_consume_token(LBRACE);
                        Token tk = getToken(0);
                        PrescannedBody pbody = new PrescannedBody((ASTNode)presc, tk.beginLine, tk.beginColumn);
                        curFileUnit.addPrescannedBody(pbody);
                        int depth = 1;
                        do {
                                tk = getNextToken();
                                if( tk.kind == LBRACE ) depth++;
                                else if( tk.kind == RBRACE ) depth--;
                        } while( depth > 0 );
                        if (presc instanceof RuleMethod)
                                pbody.mode = PrescannedBody.RuleBlockMode;
                        else if (presc instanceof Method && ((Method)presc).isMacro())
                                pbody.mode = PrescannedBody.RewriteMatchMode;
                        else
                                pbody.mode = PrescannedBody.BlockMode;
                        bl = pbody;
    } else if (presc instanceof RuleMethod) {
      bl = RuleBlock();
    } else if (presc instanceof Method && ((Method)presc).isMacro()) {
      bl = RewriteMatch();
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        bl = Block();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public Method MethodDeclaration(ASTModifiers modifiers) throws ParseException {
  Token t; Method m, oldMethod; TypeRef ret; Symbol id; ConstStringExpr cor; MetaThrows thr; TypeConstr[] args;
    args = ClazzArguments();
    ret = Type();
    id = Name();
          m = mkMethod(id,modifiers,ret); m.targs.addAll(args); oldMethod = curMethod; curMethod = m;
    try {
      jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case VARARGS:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_ACCESS1:
      case META_PUBLIC:
      case PUBLIC:
      case META_PROTECTED:
      case PROTECTED:
      case META_PRIVATE:
      case PRIVATE:
      case IDENTIFIER:
      case LPAREN:
      case OPERATOR_AT:
        if (jj_2_20(2147483647)) {
          modifiers = Modifiers();
          m.params += MethodVarargsParameter(modifiers);
                          m.setVarArgs(true);
        } else {
          switch (jj_nt.kind) {
          case ABSTRACT:
          case FINAL:
          case NATIVE:
          case STATIC:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOLATILE:
          case META_SINGLETON:
          case META_MIXIN:
          case META_FORWARD:
          case META_UNERASABLE:
          case META_VIRTUAL:
          case META_PACKED:
          case META_MACRO:
          case META_STATIC:
          case META_ABSTRACT:
          case META_FINAL:
          case META_NATIVE:
          case META_SYNCHRONIZED:
          case META_TRANSIENT:
          case META_VOLATILE:
          case META_THROWS:
          case META_UUID:
          case META_ACCESS1:
          case META_PUBLIC:
          case PUBLIC:
          case META_PROTECTED:
          case PROTECTED:
          case META_PRIVATE:
          case PRIVATE:
          case IDENTIFIER:
          case LPAREN:
          case OPERATOR_AT:
            modifiers = Modifiers();
            m.params += MethodFormalParameter(modifiers);
            label_31:
            while (true) {
              if (jj_2_18(1) && (!m.isVarArgs())) {
                ;
              } else {
                break label_31;
              }
              jj_consume_token(COMMA);
              modifiers = Modifiers();
              if (jj_2_19(2147483647)) {
                m.params += MethodVarargsParameter(modifiers);
                                          m.setVarArgs(true);
              } else {
                switch (jj_nt.kind) {
                case IDENTIFIER:
                case LPAREN:
                  m.params += MethodFormalParameter(modifiers);
                  break;
                default:
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        ;
      }
      jj_consume_token(RPAREN);
      label_32:
      while (true) {
        switch (jj_nt.kind) {
        case ALIAS:
        case OPERATOR_ID:
          ;
          break;
        default:
          break label_32;
        }
        m.aliases += Alias();
      }
      switch (jj_nt.kind) {
      case THROWS:
        thr = Throws();
                                  m.setMeta(thr);
        break;
      default:
        ;
      }
      label_33:
      while (true) {
        switch (jj_nt.kind) {
        case REQUIRE:
        case ENSURE:
          ;
          break;
        default:
          break label_33;
        }
        switch (jj_nt.kind) {
        case REQUIRE:
          m.conditions += RequareDeclaration();
          break;
        case ENSURE:
          m.conditions += EnsureDeclaration();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_21(2147483647)) {
                  presc = m;
        m.body = MaybeSkipBlock();
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case _DEFAULT:
          jj_consume_token(_DEFAULT);
          m.body = AnnotationValueAny(new SymbolRef(getToken(0).getPos(),m));
          jj_consume_token(SEMICOLON);
          break;
        case CONTINUE:
          jj_consume_token(CONTINUE);
          cor = StringConstExpression();
                                                           m.body = CoreExpr.makeInstance(cor.pos, cor.value);
          jj_consume_token(SEMICOLON);
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
                    curMethod = oldMethod;
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Constructor ConstructorDeclaration(ASTModifiers modifiers) throws ParseException {
  Token t; Constructor m; Symbol id; MetaThrows thr; Method oldMethod;
    id = Name();
                if( !id.sname.equals(curClazz.sname) )
                        Kiev.reportError(id,"Return type missed or bad constructor name "+id);
                m = mkConstructor(id,modifiers);
                oldMethod = curMethod;
                curMethod = m;
    try {
      jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case VARARGS:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_ACCESS1:
      case META_PUBLIC:
      case PUBLIC:
      case META_PROTECTED:
      case PROTECTED:
      case META_PRIVATE:
      case PRIVATE:
      case IDENTIFIER:
      case LPAREN:
      case OPERATOR_AT:
        if (jj_2_24(2147483647)) {
          modifiers = Modifiers();
          m.params += MethodVarargsParameter(modifiers);
                          m.setVarArgs(true);
        } else {
          switch (jj_nt.kind) {
          case ABSTRACT:
          case FINAL:
          case NATIVE:
          case STATIC:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOLATILE:
          case META_SINGLETON:
          case META_MIXIN:
          case META_FORWARD:
          case META_UNERASABLE:
          case META_VIRTUAL:
          case META_PACKED:
          case META_MACRO:
          case META_STATIC:
          case META_ABSTRACT:
          case META_FINAL:
          case META_NATIVE:
          case META_SYNCHRONIZED:
          case META_TRANSIENT:
          case META_VOLATILE:
          case META_THROWS:
          case META_UUID:
          case META_ACCESS1:
          case META_PUBLIC:
          case PUBLIC:
          case META_PROTECTED:
          case PROTECTED:
          case META_PRIVATE:
          case PRIVATE:
          case IDENTIFIER:
          case LPAREN:
          case OPERATOR_AT:
            modifiers = Modifiers();
            m.params += MethodFormalParameter(modifiers);
            label_34:
            while (true) {
              if (jj_2_22(1) && (!m.isVarArgs())) {
                ;
              } else {
                break label_34;
              }
              jj_consume_token(COMMA);
              modifiers = Modifiers();
              if (jj_2_23(2147483647)) {
                m.params += MethodVarargsParameter(modifiers);
                                          m.setVarArgs(true);
              } else {
                switch (jj_nt.kind) {
                case IDENTIFIER:
                case LPAREN:
                  m.params += MethodFormalParameter(modifiers);
                  break;
                default:
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        ;
      }
      jj_consume_token(RPAREN);
      label_35:
      while (true) {
        switch (jj_nt.kind) {
        case ALIAS:
        case OPERATOR_ID:
          ;
          break;
        default:
          break label_35;
        }
        m.aliases += Alias();
      }
      switch (jj_nt.kind) {
      case THROWS:
        thr = Throws();
                                  m.setMeta(thr);
        break;
      default:
        ;
      }
      label_36:
      while (true) {
        switch (jj_nt.kind) {
        case REQUIRE:
        case ENSURE:
          ;
          break;
        default:
          break label_36;
        }
        switch (jj_nt.kind) {
        case REQUIRE:
          m.conditions += RequareDeclaration();
          break;
        case ENSURE:
          m.conditions += EnsureDeclaration();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_25(2147483647)) {
                  presc = m;
        m.body = MaybeSkipBlock();
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
                    curMethod = oldMethod;
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public WBCCondition RequareDeclaration() throws ParseException {
  Symbol id;
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondRequire;
    jj_consume_token(REQUIRE);
    if (jj_2_26(2147483647)) {
      jj_consume_token(LBRACKET);
      id = Name();
                                  n.sname = id.sname;
      jj_consume_token(RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_27(2147483647)) {
      id     = Name();
                                  n.sname = id.sname;
      n.body = CondBlock();
    } else {
      n.body = CondBlock();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public WBCCondition EnsureDeclaration() throws ParseException {
  Symbol id;
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondEnsure;
    jj_consume_token(ENSURE);
    if (jj_2_28(2147483647)) {
      jj_consume_token(LBRACKET);
      id = Name();
                                  n.sname = id.sname;
      jj_consume_token(RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_29(2147483647)) {
      id     = Name();
                                  n.sname = id.sname;
      n.body = CondBlock();
    } else {
      n.body = CondBlock();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public WBCCondition InvariantDeclaration(ASTModifiers modifiers) throws ParseException {
  Symbol id;
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondInvariant;
    jj_consume_token(INVARIANT);
    if (jj_2_30(2147483647)) {
      jj_consume_token(LBRACKET);
      id = Name();
                                  n.sname = id.sname;
      jj_consume_token(RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_31(2147483647)) {
      id     = Name();
                                  n.sname = id.sname;
      n.body = CondBlock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public RuleMethod RuleDeclaration(ASTModifiers modifiers) throws ParseException {
  RuleBlock bl; RuleMethod m; Symbol id; Method oldMethod;
    jj_consume_token(IDENTIFIER);
    // "rule"
            id = Name();
          m = mkRuleMethod(id, modifiers, new TypeRef(Type.tpRule)); oldMethod = curMethod; curMethod = m;
    try {
      jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_ACCESS1:
      case META_PUBLIC:
      case PUBLIC:
      case META_PROTECTED:
      case PROTECTED:
      case META_PRIVATE:
      case PRIVATE:
      case IDENTIFIER:
      case LPAREN:
      case OPERATOR_AT:
        modifiers = Modifiers();
        m.params += FormalParameter(modifiers);
        label_37:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_37;
          }
          jj_consume_token(COMMA);
          modifiers = Modifiers();
          m.params += FormalParameter(modifiers);
        }
        break;
      default:
        ;
      }
      jj_consume_token(RPAREN);
      label_38:
      while (true) {
        switch (jj_nt.kind) {
        case ALIAS:
        case OPERATOR_ID:
          ;
          break;
        default:
          break label_38;
        }
        m.aliases += Alias();
      }
      label_39:
      while (true) {
        switch (jj_nt.kind) {
        case ABSTRACT:
        case FINAL:
        case NATIVE:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case META_SINGLETON:
        case META_MIXIN:
        case META_FORWARD:
        case META_UNERASABLE:
        case META_VIRTUAL:
        case META_PACKED:
        case META_MACRO:
        case META_STATIC:
        case META_ABSTRACT:
        case META_FINAL:
        case META_NATIVE:
        case META_SYNCHRONIZED:
        case META_TRANSIENT:
        case META_VOLATILE:
        case META_THROWS:
        case META_UUID:
        case META_ACCESS1:
        case META_PUBLIC:
        case PUBLIC:
        case META_PROTECTED:
        case PROTECTED:
        case META_PRIVATE:
        case PRIVATE:
        case IDENTIFIER:
        case LPAREN:
        case OPERATOR_AT:
          ;
          break;
        default:
          break label_39;
        }
        modifiers = Modifiers();
        LocalVarDecls(modifiers,m);
      }
      label_40:
      while (true) {
        switch (jj_nt.kind) {
        case REQUIRE:
        case ENSURE:
          ;
          break;
        default:
          break label_40;
        }
        switch (jj_nt.kind) {
        case REQUIRE:
          m.conditions += RequareDeclaration();
          break;
        case ENSURE:
          m.conditions += EnsureDeclaration();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_32(2147483647)) {
                  presc = m;
        m.body = MaybeSkipBlock();
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
                    curMethod = oldMethod;
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer(ASTModifiers modifiers) throws ParseException {
        Initializer n = mkInitializer(getToken(0).getPos(),modifiers);
          presc = n;
    n.body = MaybeSkipBlock();
    switch (jj_nt.kind) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      ;
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  final public TypeRef Type() throws ParseException {
  TypeRef res;
    switch (jj_nt.kind) {
    case IDENTIFIER:
      res = TypeExpr();
      break;
    case LPAREN:
      res = ClosureType();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef TypeExpr() throws ParseException {
  TypeRef res; Token t;
    res = TypeWithArgs();
    label_41:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR:
        ;
        break;
      default:
        break label_41;
      }
      switch (jj_nt.kind) {
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR:
        t = TypeOperatorChar();
        break;
      case OPERATOR_LRBRACKETS:
        t = jj_consume_token(OPERATOR_LRBRACKETS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  res = new TypeExpr(res,t);
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeNameRef TypeQName() throws ParseException {
  SymbolRef id; TypeNameRef res;
    id = NameRef();
                         res = new TypeNameRef(id.name); res.pos = id.pos;
    label_42:
    while (true) {
      if (jj_2_33(2147483647)) {
        ;
      } else {
        break label_42;
      }
      jj_consume_token(DOT);
      id = NameRef();
                                  res.ident = res.ident + '\u001f' + id.name; res.qualified = true;
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeNameRef TypeWithArgs() throws ParseException {
  TypeNameRef res, sub;
    res = TypeQName();
    if (getToken(1).kind == LT || getToken(1).kind == LANGLE) {
      switch (jj_nt.kind) {
      case LT:
        jj_consume_token(LT);
        break;
      case LANGLE:
        jj_consume_token(LANGLE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      res.args += Type();
      label_43:
      while (true) {
        if (getToken(1).kind == COMMA) {
          ;
        } else {
          break label_43;
        }
        jj_consume_token(COMMA);
        res.args += Type();
      }
      switch (jj_nt.kind) {
      case GT:
        jj_consume_token(GT);
        break;
      case RANGLE:
        jj_consume_token(RANGLE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_34(2147483647)) {
        jj_consume_token(DOT);
        sub = TypeWithArgs();
                                               sub.outer = res; res = sub;
      } else {
        ;
      }
    } else {
      ;
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef NArrType() throws ParseException {
  TypeRef res; Token t;
    res = TypeWithArgs();
    label_44:
    while (true) {
      if (jj_2_35(2)) {
        ;
      } else {
        break label_44;
      }
      switch (jj_nt.kind) {
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR:
        t = TypeOperatorChar();
                                                                  res = new TypeExpr(res,t);
        break;
      case OPERATOR_LRBRACKETS:
        t = jj_consume_token(OPERATOR_LRBRACKETS);
                                                                  res = new TypeExpr(res,t);
        t = TypeOperatorChar();
                                                                  res = new TypeExpr(res,t);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  res = new TypeExpr(res,t);
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef ClosureType() throws ParseException {
  Token t; TypeClosureRef n = new TypeClosureRef();
    t= jj_consume_token(LPAREN);
                n.pos = t.getPos();
    switch (jj_nt.kind) {
    case IDENTIFIER:
    case LPAREN:
      n.args += Type();
      label_45:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_45;
        }
        jj_consume_token(COMMA);
        n.args += Type();
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(ARROW);
    n.ret = Type();
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public LVarExpr Var() throws ParseException {
  Token t;
    t= jj_consume_token(IDENTIFIER);
                LVarExpr id = new LVarExpr();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol Name() throws ParseException {
  Token t;
    t= jj_consume_token(IDENTIFIER);
                Symbol id = new Symbol();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public SymbolRef NameRef() throws ParseException {
  Token t;
    t= jj_consume_token(IDENTIFIER);
                SymbolRef id = new SymbolRef();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public SymbolRef QName() throws ParseException {
  SymbolRef id; SymbolRef id2;
    id = NameRef();
    label_46:
    while (true) {
      if (jj_2_36(2)) {
        ;
      } else {
        break label_46;
      }
      jj_consume_token(DOT);
      id2 = NameRef();
                  id.name = id.name+'\u001f'+id2.name;
    }
                id.qualified = true;
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public EToken Identifier() throws ParseException {
  Token t;
    t= jj_consume_token(IDENTIFIER);
                {if (true) return new EToken(t,ETokenKind.IDENTIFIER);}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public ENode CommaExpression() throws ParseException {
  ENode e; CommaExpr ce = null;
    e = Expression();
    label_47:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_47;
      }
      jj_consume_token(COMMA);
                  if (ce==null) ce = new CommaExpr(e);
      ce.exprs += Expression();
    }
          {if (true) return ce == null ? e : ce;}
    throw new Error("Missing return statement in function");
  }

  final public ASTRuleNode RuleOrExpression() throws ParseException {
  ASTRuleNode e; RuleOrExpr r = null;
    e = RuleAndExpression();
    label_48:
    while (true) {
      switch (jj_nt.kind) {
      case SEMICOLON:
        ;
        break;
      default:
        break label_48;
      }
      jj_consume_token(SEMICOLON);
                  if (r==null) { r = new RuleOrExpr(e); r.pos = getToken(0).getPos();}
      r.rules += RuleAndExpression();
    }
          {if (true) return r == null ? e : r;}
    throw new Error("Missing return statement in function");
  }

  final public ASTRuleNode RuleAndExpression() throws ParseException {
  ASTRuleNode e; RuleAndExpr r = null;
    e = RuleExpression();
    label_49:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_49;
      }
      jj_consume_token(COMMA);
                  if (r==null) { r = new RuleAndExpr(e); r.pos = getToken(0).getPos();}
      r.rules += RuleExpression();
    }
          {if (true) return r == null ? e : r;}
    throw new Error("Missing return statement in function");
  }

  final public ASTRuleNode RuleExpression() throws ParseException {
  ASTRuleNode r;
    if (getToken(1).kind == IDENTIFIER
                     && getToken(2).kind == IS_THE) {
      r = RuleIstheExpression();
    } else if (getToken(1).kind == IDENTIFIER
                     && getToken(2).kind == IS_ONE_OF) {
      r = RuleIsoneofExpression();
    } else if (getToken(1).kind == PCUT) {
      r = RuleCutExpression();
    } else if (getToken(1).kind == LBRACE) {
      jj_consume_token(LBRACE);
      r = RuleOrExpression();
      jj_consume_token(RBRACE);
    } else if (getToken(1).kind == WHILE) {
      jj_consume_token(WHILE);
                  r = new RuleWhileExpr();
      r.expr = Expression();
      switch (jj_nt.kind) {
      case COLON:
        jj_consume_token(COLON);
        r.bt_expr = Expression();
        break;
      default:
        ;
      }
    } else {
                  r = new RuleExpr();
      r.expr = Expression();
      switch (jj_nt.kind) {
      case COLON:
        jj_consume_token(COLON);
        r.bt_expr = Expression();
        break;
      default:
        ;
      }
    }
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public RuleIstheExpr RuleIstheExpression() throws ParseException {
  Token t; RuleIstheExpr r = new RuleIstheExpr();
    r.var = Var();
    t = jj_consume_token(IS_THE);
                   r.pos = t.getPos();
    r.expr = Expression();
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public RuleIsoneofExpr RuleIsoneofExpression() throws ParseException {
  Token t; RuleIsoneofExpr r = new RuleIsoneofExpr();
    r.var = Var();
    t = jj_consume_token(IS_ONE_OF);
                   r.pos = t.getPos();
    r.expr = Expression();
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public RuleCutExpr RuleCutExpression() throws ParseException {
  RuleCutExpr r = new RuleCutExpr();
    jj_consume_token(PCUT);
                r.pos = getToken(0).getPos();
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Token TypeOperatorChar() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case OPERATOR_AT:
      t= jj_consume_token(OPERATOR_AT);
      break;
    case OPERATOR_SHARP:
      t= jj_consume_token(OPERATOR_SHARP);
      break;
    case OPERATOR:
      t= jj_consume_token(OPERATOR);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token OperatorChar() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case ASSIGN:
      t= jj_consume_token(ASSIGN);
      break;
    case LT:
      t= jj_consume_token(LT);
      break;
    case GT:
      t= jj_consume_token(GT);
      break;
    case OPERATOR_AT:
      t= jj_consume_token(OPERATOR_AT);
      break;
    case OPERATOR_SHARP:
      t= jj_consume_token(OPERATOR_SHARP);
      break;
    case OPERATOR_UPPER_BOUND:
      t= jj_consume_token(OPERATOR_UPPER_BOUND);
      break;
    case OPERATOR_LOWER_BOUND:
      t= jj_consume_token(OPERATOR_LOWER_BOUND);
      break;
    case OPERATOR:
      t= jj_consume_token(OPERATOR);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public EToken Operator() throws ParseException {
  Token t; String image; int pos;
    switch (jj_nt.kind) {
    case LT:
    case GT:
    case ASSIGN:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      t= OperatorChar();
                  image = t.image; pos = t.getPos();
      label_50:
      while (true) {
        if (operatorLA()) {
          ;
        } else {
          break label_50;
        }
        t= OperatorChar();
                          image = image+t.image;
      }
      break;
    case ASSIGN2:
      t= jj_consume_token(ASSIGN2);
                         image = t.image; pos = t.getPos();
      break;
    case ARROW:
      t= jj_consume_token(ARROW);
                         image = t.image; pos = t.getPos();
      break;
    case IS_THE:
      t= jj_consume_token(IS_THE);
                         image = t.image; pos = t.getPos();
      break;
    case IS_ONE_OF:
      t= jj_consume_token(IS_ONE_OF);
                         image = t.image; pos = t.getPos();
      break;
    case OPERATOR_ID:
      jj_consume_token(OPERATOR_ID);
      t= jj_consume_token(IDENTIFIER);
                        pos = t.getPos();
                        if (t.image.startsWith("#id\""))
                                image = ConstExpr.source2ascii(t.image.substring(4,t.image.length()-2));
                        else
                                image = t.image;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return new EToken(pos, image, ETokenKind.OPERATOR, true);}
    throw new Error("Missing return statement in function");
  }

  final public ENode ExpressionColonComma() throws ParseException {
  ASTExpression e = new ASTExpression(); Token t;
    label_51:
    while (true) {
      switch (jj_nt.kind) {
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case DOT:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        ExpressionNoNo(e);
        break;
      case COLON:
        t= jj_consume_token(COLON);
                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
        break;
      case COMMA:
        t= jj_consume_token(COMMA);
                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case COLON:
      case DOT:
      case COMMA:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        ;
        break;
      default:
        break label_51;
      }
    }
                if (e.nodes.length == 1)
                        {if (true) return ~e.nodes[0];}
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ExpressionColon() throws ParseException {
  ASTExpression e = new ASTExpression(); Token t;
    label_52:
    while (true) {
      switch (jj_nt.kind) {
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case DOT:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        ExpressionNoNo(e);
        break;
      case COLON:
        t= jj_consume_token(COLON);
                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case COLON:
      case DOT:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        ;
        break;
      default:
        break label_52;
      }
    }
                if (e.nodes.length == 1)
                        {if (true) return ~e.nodes[0];}
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ExpressionComma() throws ParseException {
  ASTExpression e = new ASTExpression(); Token t;
    label_53:
    while (true) {
      switch (jj_nt.kind) {
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case DOT:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        ExpressionNoNo(e);
        break;
      case COMMA:
        t= jj_consume_token(COMMA);
                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case DOT:
      case COMMA:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        ;
        break;
      default:
        break label_53;
      }
    }
                if (e.nodes.length == 1)
                        {if (true) return ~e.nodes[0];}
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode Expression() throws ParseException {
  ASTExpression e = new ASTExpression();
    label_54:
    while (true) {
      ExpressionNoNo(e);
      switch (jj_nt.kind) {
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case DOT:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        ;
        break;
      default:
        break label_54;
      }
    }
                if (e.nodes.length == 1)
                        {if (true) return ~e.nodes[0];}
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public void ExpressionNoNo(ASTExpression e) throws ParseException {
  Token t; ENode n;
    switch (jj_nt.kind) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      e.nodes += ConstExpression();
      break;
    case IDENTIFIER:
      e.nodes += Identifier();
      break;
    case LPAREN:
      t= jj_consume_token(LPAREN);
                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
      switch (jj_nt.kind) {
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case COLON:
      case DOT:
      case COMMA:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        n = ExpressionColonComma();
                                                     expandExpr(e,n);
        break;
      default:
        ;
      }
      t= jj_consume_token(RPAREN);
                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
      break;
    case LBRACKET:
      t= jj_consume_token(LBRACKET);
                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
      e.nodes += ExpressionColonComma();
      t= jj_consume_token(RBRACKET);
                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
      break;
    case LANGLE:
      t= jj_consume_token(LANGLE);
                                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
      e.nodes += Type();
      label_55:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_55;
        }
        t= jj_consume_token(COMMA);
                                  e.nodes += new EToken(t, ETokenKind.OPERATOR);
        e.nodes += Type();
      }
      t= jj_consume_token(RANGLE);
                                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
      break;
    case OPERATOR_LRBRACKETS:
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                          e.nodes += new EToken(t.getPos(), "[]", ETokenKind.OPERATOR, true);
      break;
    case DOT:
      t= jj_consume_token(DOT);
                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
      switch (jj_nt.kind) {
      case CLASS:
        t= jj_consume_token(CLASS);
                                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
        break;
      case NEW:
        t= jj_consume_token(NEW);
                                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
        e.nodes += Type();
        break;
      case LT:
        t= jj_consume_token(LT);
                                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
        e.nodes += Type();
        label_56:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_56;
          }
          t= jj_consume_token(COMMA);
                                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
          e.nodes += Type();
        }
        t= jj_consume_token(GT);
                                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
        break;
      case LANGLE:
        t= jj_consume_token(LANGLE);
                                                  e.nodes += new EToken(t, ETokenKind.OPERATOR);
        e.nodes += Type();
        label_57:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_57;
          }
          t= jj_consume_token(COMMA);
                                          e.nodes += new EToken(t, ETokenKind.OPERATOR);
          e.nodes += Type();
        }
        t= jj_consume_token(RANGLE);
                                                  e.nodes += new EToken(t, ETokenKind.OPERATOR);
        break;
      default:

      }
      break;
    case FUNCTION:
      e.nodes += AnonymouseClosure();
      break;
    case NEW:
      e.nodes += NewAny();
      break;
    case OPERATOR_ID:
    case LT:
    case GT:
    case ASSIGN:
    case ASSIGN2:
    case IS_THE:
    case IS_ONE_OF:
    case ARROW:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      e.nodes += Operator();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ENode NewAny() throws ParseException {
  ENode n; TypeRef tp; Token t;
    t= jj_consume_token(NEW);
    switch (jj_nt.kind) {
    case OPERATOR_SHARP:
      //LOOKAHEAD("#")
                      n = RewriteFactoryCall();
      break;
    case IDENTIFIER:
      tp = NArrType();
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        //LOOKAHEAD((<OPERATOR_LRBRACKETS>)+ "{" )
                                n = NewInitializedArrayExpression(tp);
        break;
      case LBRACKET:
        //LOOKAHEAD("[" )
                                n = NewArrayExpression(tp);
        break;
      case LPAREN:
        //LOOKAHEAD("(" )
                                n = NewExpression(tp);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                n.pos = t.getPos();
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public NewClosure AnonymouseClosure() throws ParseException {
  ASTModifiers modifiers; NewClosure nc = new NewClosure(getToken(1).getPos());
    jj_consume_token(FUNCTION);
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case META_SINGLETON:
    case META_MIXIN:
    case META_FORWARD:
    case META_UNERASABLE:
    case META_VIRTUAL:
    case META_PACKED:
    case META_MACRO:
    case META_STATIC:
    case META_ABSTRACT:
    case META_FINAL:
    case META_NATIVE:
    case META_SYNCHRONIZED:
    case META_TRANSIENT:
    case META_VOLATILE:
    case META_THROWS:
    case META_UUID:
    case META_ACCESS1:
    case META_PUBLIC:
    case PUBLIC:
    case META_PROTECTED:
    case PROTECTED:
    case META_PRIVATE:
    case PRIVATE:
    case IDENTIFIER:
    case LPAREN:
    case OPERATOR_AT:
      modifiers = Modifiers();
      nc.params += FormalParameter(modifiers);
      label_58:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_58;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        nc.params += FormalParameter(modifiers);
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(ARROW);
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("rule")) {
      nc.type_ret = Type();
      nc.body = RuleBlock();
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER:
      case LPAREN:
        nc.type_ret = Type();
        nc.body = Block();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return nc;}
    throw new Error("Missing return statement in function");
  }

  final public ConstExpr ConstExpression() throws ParseException {
  ConstExpr ce;
    switch (jj_nt.kind) {
    case FALSE:
    case TRUE:
      ce = BooleanConstExpression();
      break;
    case INTEGER_LITERAL:
      ce = IntConstExpression();
      break;
    case LONG_INTEGER_LITERAL:
      ce = LongConstExpression();
      break;
    case FLOATING_POINT_LITERAL:
      ce = FloatConstExpression();
      break;
    case DOUBLE_POINT_LITERAL:
      ce = DoubleConstExpression();
      break;
    case CHARACTER_LITERAL:
      ce = CharConstExpression();
      break;
    case NULL:
      ce = NullConstExpression();
      break;
    case STRING_LITERAL:
      ce = StringConstExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ce;}
    throw new Error("Missing return statement in function");
  }

  final public ConstBoolExpr BooleanConstExpression() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case TRUE:
      t= jj_consume_token(TRUE);
      break;
    case FALSE:
      t= jj_consume_token(FALSE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return (ConstBoolExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstIntExpr IntConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(INTEGER_LITERAL);
          {if (true) return (ConstIntExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstLongExpr LongConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(LONG_INTEGER_LITERAL);
          {if (true) return (ConstLongExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstFloatExpr FloatConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(FLOATING_POINT_LITERAL);
          {if (true) return (ConstFloatExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstDoubleExpr DoubleConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(DOUBLE_POINT_LITERAL);
          {if (true) return (ConstDoubleExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstCharExpr CharConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(CHARACTER_LITERAL);
          {if (true) return (ConstCharExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstNullExpr NullConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(NULL);
          {if (true) return (ConstNullExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstStringExpr StringConstExpression() throws ParseException {
  Token t, t1;
    t= jj_consume_token(STRING_LITERAL);
          {if (true) return (ConstStringExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public NewExpr NewExpression(TypeRef tp) throws ParseException {
        boolean old_mode;
        Struct clazz;
        TypeDecl oldClazz;
        NewExpr ne = new NewExpr();
        ne.pos = tp.pos;
        ne.type = tp;
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case FUNCTION:
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case OPERATOR_ID:
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
    case COLON:
    case DOT:
    case LT:
    case GT:
    case LANGLE:
    case ASSIGN:
    case ASSIGN2:
    case IS_THE:
    case IS_ONE_OF:
    case ARROW:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_LRBRACKETS:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      ne.args += ExpressionColon();
      label_59:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_59;
        }
        jj_consume_token(COMMA);
        ne.args += ExpressionColon();
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
    if (jj_2_37(2147483647)) {
                        old_mode = interface_only;
                        interface_only = false;
                        ne.clazz = clazz = mkStruct(null, new JavaAnonymouseClass(), ACC_FINAL, new ASTModifiers(), ne);
                        oldClazz = curClazz;
                        curClazz = clazz;
      try {
        TypeBodyDeclaration(clazz);
      } finally {
                        interface_only = old_mode;
                        curClazz = oldClazz;
      }
    } else {
      ;
    }
          {if (true) return ne;}
    throw new Error("Missing return statement in function");
  }

  final public NewArrayExpr NewArrayExpression(TypeRef tp) throws ParseException {
  NewArrayExpr ne;
                NewArrayExpr ne = new NewArrayExpr();
                ne.pos = tp.pos;
                ne.type = tp;
    label_60:
    while (true) {
      jj_consume_token(LBRACKET);
      ne.args += Expression();
      jj_consume_token(RBRACKET);
      if (jj_2_38(2)) {
        ;
      } else {
        break label_60;
      }
    }
    label_61:
    while (true) {
      if (getToken(1).kind == OPERATOR_LRBRACKETS) {
        ;
      } else {
        break label_61;
      }
      jj_consume_token(OPERATOR_LRBRACKETS);
                  ne.args += new NopExpr();
    }
                {if (true) return ne;}
    throw new Error("Missing return statement in function");
  }

  final public NewInitializedArrayExpr NewInitializedArrayExpression(TypeRef tp) throws ParseException {
  int dim=0; NewInitializedArrayExpr ne; Token t;
    label_62:
    while (true) {
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                  dim += 1; tp = new TypeExpr(tp,t);
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_62;
      }
    }
          ne = new NewInitializedArrayExpr(tp.pos, (TypeExpr)tp, dim, null);
    jj_consume_token(LBRACE);
    switch (jj_nt.kind) {
    case FUNCTION:
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case OPERATOR_ID:
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case COLON:
    case DOT:
    case LT:
    case GT:
    case LANGLE:
    case ASSIGN:
    case ASSIGN2:
    case IS_THE:
    case IS_ONE_OF:
    case ARROW:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_LRBRACKETS:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      ne.args += VariableInitializer();
      label_63:
      while (true) {
        if (jj_2_39(2)) {
          ;
        } else {
          break label_63;
        }
        jj_consume_token(COMMA);
        ne.args += VariableInitializer();
      }
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
                ne.dims[0] = ne.args.length;
                {if (true) return ne;}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  final public ENode Statement() throws ParseException {
  ENode st;
    if (jj_2_40(2)) {
      st = LabeledStatement();
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        st = Block();
        break;
      case SWITCH:
        st = SwitchStatement();
        break;
      case IF:
        st = IfStatement();
        break;
      case WHILE:
        st = WhileStatement();
        break;
      case DO:
        st = DoStatement();
        break;
      case FOR:
        st = ForStatement();
        break;
      case FOREACH:
        st = ForEachStatement();
        break;
      case BREAK:
        st = BreakStatement();
        break;
      case CONTINUE:
        st = ContinueStatement();
        break;
      case RETURN:
        st = ReturnStatement();
        break;
      case THROW:
        st = ThrowStatement();
        break;
      case SYNCHRONIZED:
        st = SynchronizedStatement();
        break;
      case WITH:
        st = WithStatement();
        break;
      case TRY:
        st = TryStatement();
        break;
      case GOTO:
        st = GotoStatement();
        break;
      case IF_REWR:
        st = IfRewr();
        break;
      default:
        st = StatementExpression();
      }
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ENode LabeledStatement() throws ParseException {
  LabeledStat st = new LabeledStat(); Symbol id;
    id = Name();
                      st.lbl.sname = id.sname; st.pos = id.pos;
    jj_consume_token(COLON);
    st.stat = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ENode PrescannedBlock(PrescannedBody b) throws ParseException {
        Token t;
        // Skip to the start of prescanned body
        Token tk;
        for(;;) {
                tk = getToken(1);
                if( tk.beginLine==b.lineno && tk.beginColumn==b.columnno )
                        break;
                if( tk.kind == EOF ) {
                        throw new CompilerException(b,
                                "Expected to find start of block after scanning. Have you changed the file?"
                        );
                }
                getNextToken();
        }
        ENode bl = null;
    if (b.mode == PrescannedBody.BlockMode) {
      bl= Block();
    } else if (b.mode == PrescannedBody.RuleBlockMode) {
      bl= RuleBlock();
    } else if (b.mode == PrescannedBody.CondBlockMode) {
      bl= CondBlock();
    } else if (b.mode == PrescannedBody.RewriteMatchMode) {
      bl= RewriteMatch();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
  boolean old_declMode;
    jj_consume_token(LBRACE);
                Block bl = new Block();
                bl.pos = getToken(1).getPos();
                old_declMode = declMode;
                declMode = false;
    try {
      label_64:
      while (true) {
        switch (jj_nt.kind) {
        case ABSTRACT:
        case BREAK:
        case CLASS:
        case CONTINUE:
        case DO:
        case FINAL:
        case FOR:
        case FOREACH:
        case GOTO:
        case IF:
        case IF_REWR:
        case INTERFACE:
        case NATIVE:
        case RETURN:
        case STATIC:
        case SWITCH:
        case SYNCHRONIZED:
        case WITH:
        case THROW:
        case TRANSIENT:
        case TRY:
        case VOLATILE:
        case VIEW:
        case WHILE:
        case ENUM:
        case META_INTERFACE:
        case META_SINGLETON:
        case META_MIXIN:
        case META_FORWARD:
        case META_UNERASABLE:
        case META_VIRTUAL:
        case META_PACKED:
        case META_MACRO:
        case META_STATIC:
        case META_ABSTRACT:
        case META_FINAL:
        case META_NATIVE:
        case META_SYNCHRONIZED:
        case META_TRANSIENT:
        case META_VOLATILE:
        case META_THROWS:
        case META_UUID:
        case META_ACCESS1:
        case META_PUBLIC:
        case PUBLIC:
        case META_PROTECTED:
        case PROTECTED:
        case META_PRIVATE:
        case PRIVATE:
        case FUNCTION:
        case FALSE:
        case NEW:
        case NULL:
        case TRUE:
        case OPERATOR_ID:
        case INTEGER_LITERAL:
        case LONG_INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case SEMICOLON:
        case COLON:
        case DOT:
        case COMMA:
        case LT:
        case GT:
        case LANGLE:
        case ASSIGN:
        case ASSIGN2:
        case IS_THE:
        case IS_ONE_OF:
        case ARROW:
        case OPERATOR_AT:
        case OPERATOR_SHARP:
        case OPERATOR_LRBRACKETS:
        case OPERATOR_UPPER_BOUND:
        case OPERATOR_LOWER_BOUND:
        case OPERATOR:
          ;
          break;
        default:
          break label_64;
        }
        BlockStatement(bl.getSpacePtr("stats"));
      }
    } finally {
                    declMode = old_declMode;
    }
    jj_consume_token(RBRACE);
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public RuleBlock RuleBlock() throws ParseException {
  boolean old_declMode;
    jj_consume_token(LBRACE);
                RuleBlock bl = new RuleBlock();
                bl.pos = getToken(1).getPos();
                old_declMode = declMode;
                declMode = false;
    try {
      bl.rnode = RuleOrExpression();
    } finally {
                    declMode = old_declMode;
    }
    jj_consume_token(RBRACE);
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public Block CondBlock() throws ParseException {
                Block bl = new Block();
                bl.pos = getToken(1).getPos();
    switch (jj_nt.kind) {
    case LBRACE:
      jj_consume_token(LBRACE);
      label_65:
      while (true) {
        bl.stats += CondStatement();
        switch (jj_nt.kind) {
        case FUNCTION:
        case FALSE:
        case NEW:
        case NULL:
        case TRUE:
        case OPERATOR_ID:
        case INTEGER_LITERAL:
        case LONG_INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACKET:
        case DOT:
        case LT:
        case GT:
        case LANGLE:
        case ASSIGN:
        case ASSIGN2:
        case IS_THE:
        case IS_ONE_OF:
        case ARROW:
        case OPERATOR_AT:
        case OPERATOR_SHARP:
        case OPERATOR_LRBRACKETS:
        case OPERATOR_UPPER_BOUND:
        case OPERATOR_LOWER_BOUND:
        case OPERATOR:
          ;
          break;
        default:
          break label_65;
        }
      }
      jj_consume_token(RBRACE);
      break;
    case FUNCTION:
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case OPERATOR_ID:
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
    case DOT:
    case LT:
    case GT:
    case LANGLE:
    case ASSIGN:
    case ASSIGN2:
    case IS_THE:
    case IS_ONE_OF:
    case ARROW:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_LRBRACKETS:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      bl.stats += CondStatement();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public void BlockStatement(SpacePtr stats) throws ParseException {
  boolean old_declMode; ASTModifiers modifiers; TypeRef tp; Struct clazz; Var var;
          comments_alone(stats);
    if (jj_2_41(2147483647)) {
                        old_declMode = declMode;
                        declMode = true;
      try {
        modifiers = Modifiers();
        clazz = TypeDeclaration(modifiers, (ASTNode)stats.node);
                          stats += clazz;
      } finally {
                        declMode = old_declMode;
      }
    } else if (jj_2_42(2147483647)) {
      modifiers = Modifiers();
      stats += VarDecls(modifiers);
      jj_consume_token(SEMICOLON);
    } else {
      stats += Statement();
    }
  }

  final public CondStat CondStatement() throws ParseException {
  Token t = getToken(1); CondStat st = new CondStat();
    st.cond = Expression();
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
                  t = null;
      st.message = Expression();
      break;
    default:
      ;
    }
                if( t != null ) {
                        int pos = t.getPos();
                        StringBuffer sb = new StringBuffer();
                        while( t != null && t != getToken(1) ) {
                                sb.append(t.image).append(' ');
                                t = t.next;
                        }
                        ConstStringExpr e = new ConstStringExpr(sb.toString());
                        e.pos = pos;
                        st.message = e;
                }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ENode StatementExpression() throws ParseException {
  ENode st;
    switch (jj_nt.kind) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                      st = new ExprStat(getToken(0).getPos(), null);
      break;
    case FUNCTION:
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case OPERATOR_ID:
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
    case COLON:
    case DOT:
    case COMMA:
    case LT:
    case GT:
    case LANGLE:
    case ASSIGN:
    case ASSIGN2:
    case IS_THE:
    case IS_ONE_OF:
    case ARROW:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_LRBRACKETS:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      st = ExpressionColonComma();
      if (getToken(1).kind == SEMICOLON) {
        jj_consume_token(SEMICOLON);
                              st = new ExprStat(st.pos, st);
      } else {
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStat SwitchStatement() throws ParseException {
  SwitchStat st = new SwitchStat();
    jj_consume_token(SWITCH);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    st.sel = ExpressionColonComma();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_66:
    while (true) {
      st.cases += CaseStatements(st);
      switch (jj_nt.kind) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        break label_66;
      }
    }
    jj_consume_token(RBRACE);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public CaseLabel CaseStatements(SwitchStat sw) throws ParseException {
  CaseLabel st;
    if (jj_2_43(2147483647)) {
      st = PizzaCase(sw);
    } else {
      switch (jj_nt.kind) {
      case CASE:
      case _DEFAULT:
        st = NormalCase(sw);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public CaseLabel NormalCase(SwitchStat sw) throws ParseException {
  CaseLabel c = new CaseLabel(); sw.stats += c;
    switch (jj_nt.kind) {
    case CASE:
      jj_consume_token(CASE);
                          c.pos = getToken(0).getPos();
      c.val = Expression();
      jj_consume_token(COLON);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
                                  c.pos = getToken(0).getPos();
      jj_consume_token(COLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_67:
    while (true) {
      switch (jj_nt.kind) {
      case ABSTRACT:
      case BREAK:
      case CLASS:
      case CONTINUE:
      case DO:
      case FINAL:
      case FOR:
      case FOREACH:
      case GOTO:
      case IF:
      case IF_REWR:
      case INTERFACE:
      case NATIVE:
      case RETURN:
      case STATIC:
      case SWITCH:
      case SYNCHRONIZED:
      case WITH:
      case THROW:
      case TRANSIENT:
      case TRY:
      case VOLATILE:
      case VIEW:
      case WHILE:
      case ENUM:
      case META_INTERFACE:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_ACCESS1:
      case META_PUBLIC:
      case PUBLIC:
      case META_PROTECTED:
      case PROTECTED:
      case META_PRIVATE:
      case PRIVATE:
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case COLON:
      case DOT:
      case COMMA:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        ;
        break;
      default:
        break label_67;
      }
      BlockStatement(sw.getSpacePtr("stats"));
    }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CaseLabel PizzaCase(SwitchStat sw) throws ParseException {
  Token t; ASTModifiers modifiers; CaseLabel c = new CaseLabel(); sw.stats += c;
    jj_consume_token(CASE);
                          c.pos = getToken(0).getPos();
    c.val = TypeWithArgs();
    jj_consume_token(LPAREN);
    if (jj_2_44(1)) {
      modifiers = Modifiers();
      c.pattern += PizzaCaseFormalParameter(modifiers);
      label_68:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_68;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        c.pattern += PizzaCaseFormalParameter(modifiers);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(COLON);
    label_69:
    while (true) {
      switch (jj_nt.kind) {
      case ABSTRACT:
      case BREAK:
      case CLASS:
      case CONTINUE:
      case DO:
      case FINAL:
      case FOR:
      case FOREACH:
      case GOTO:
      case IF:
      case IF_REWR:
      case INTERFACE:
      case NATIVE:
      case RETURN:
      case STATIC:
      case SWITCH:
      case SYNCHRONIZED:
      case WITH:
      case THROW:
      case TRANSIENT:
      case TRY:
      case VOLATILE:
      case VIEW:
      case WHILE:
      case ENUM:
      case META_INTERFACE:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_ACCESS1:
      case META_PUBLIC:
      case PUBLIC:
      case META_PROTECTED:
      case PROTECTED:
      case META_PRIVATE:
      case PRIVATE:
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case COLON:
      case DOT:
      case COMMA:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        ;
        break;
      default:
        break label_69;
      }
      BlockStatement(sw.getSpacePtr("stats"));
    }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public IfElseStat IfStatement() throws ParseException {
  IfElseStat st = new IfElseStat(); EToken not = null;
    jj_consume_token(IF);
          st.pos = getToken(0).getPos();
    if (jj_2_45(2147483647) && (getToken(1).image.equals("!"))) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(LPAREN);
    st.cond = ExpressionColonComma();
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(RPAREN);
    st.thenSt = Statement();
    switch (jj_nt.kind) {
    case ELSE:
      jj_consume_token(ELSE);
      st.elseSt = Statement();
      break;
    default:
      ;
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public WhileStat WhileStatement() throws ParseException {
  WhileStat st = new WhileStat(); EToken not = null;
    jj_consume_token(WHILE);
          st.pos = getToken(0).getPos();
    if (jj_2_46(2147483647) && (getToken(1).image.equals("!"))) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(LPAREN);
    st.cond = ExpressionColonComma();
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public DoWhileStat DoStatement() throws ParseException {
  DoWhileStat st = new DoWhileStat(); EToken not = null;
    jj_consume_token(DO);
          st.pos = getToken(0).getPos();
    st.body = Statement();
    jj_consume_token(WHILE);
    if (jj_2_47(2147483647) && (getToken(1).image.equals("!"))) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(LPAREN);
    st.cond = ExpressionColonComma();
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ForStat ForStatement() throws ParseException {
  ForStat st = new ForStat();
    jj_consume_token(FOR);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    st.init = ForInitDecl();
    switch (jj_nt.kind) {
    case FUNCTION:
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case OPERATOR_ID:
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
    case DOT:
    case LT:
    case GT:
    case LANGLE:
    case ASSIGN:
    case ASSIGN2:
    case IS_THE:
    case IS_ONE_OF:
    case ARROW:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_LRBRACKETS:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      st.cond = Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
    switch (jj_nt.kind) {
    case FUNCTION:
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case OPERATOR_ID:
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
    case DOT:
    case LT:
    case GT:
    case LANGLE:
    case ASSIGN:
    case ASSIGN2:
    case IS_THE:
    case IS_ONE_OF:
    case ARROW:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_LRBRACKETS:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      st.iter = CommaExpression();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ForEachStat ForEachStatement() throws ParseException {
  ASTModifiers modifiers; ForEachStat st = new ForEachStat();
    jj_consume_token(FOREACH);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    if (jj_2_48(2147483647)) {
      modifiers = Modifiers();
      st.var = PizzaCaseFormalParameter(modifiers);
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
    st.container = Expression();
    switch (jj_nt.kind) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      switch (jj_nt.kind) {
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case DOT:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        st.cond = Expression();
        break;
      default:
        ;
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode ForInitDecl() throws ParseException {
  ASTModifiers modifiers; ASTNode n; ASTModifiers modifiers; TypeRef tp;
    if (jj_2_49(2147483647)) {
      modifiers = Modifiers();
      n = VarDecls(modifiers);
      jj_consume_token(SEMICOLON);
    } else {
      switch (jj_nt.kind) {
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case DOT:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        n = CommaExpression();
        jj_consume_token(SEMICOLON);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
                      n = null;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public ENode GotoStatement() throws ParseException {
  ENode st; ENode expr; SymbolRef id;
    jj_consume_token(GOTO);
    switch (jj_nt.kind) {
    case CASE:
      jj_consume_token(CASE);
                        st = new GotoCaseStat();
                        st.pos = getToken(0).getPos();
      expr = Expression();
                  ((GotoCaseStat)st).expr = expr;
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
                        st = new GotoCaseStat();
                        st.pos = getToken(0).getPos();
      break;
    case IDENTIFIER:
                        st = new GotoStat();
                        st.pos = getToken(0).getPos();
      id = NameRef();
                  ((GotoStat)st).ident = id.name;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public BreakStat BreakStatement() throws ParseException {
  SymbolRef id; BreakStat st = new BreakStat();
    jj_consume_token(BREAK);
          st.pos = getToken(0).getPos();
    switch (jj_nt.kind) {
    case IDENTIFIER:
      id = NameRef();
                       st.ident = id.name;
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStat ContinueStatement() throws ParseException {
  SymbolRef id; ContinueStat st = new ContinueStat();
    jj_consume_token(CONTINUE);
          st.pos = getToken(0).getPos();
    switch (jj_nt.kind) {
    case IDENTIFIER:
      id = NameRef();
                       st.ident = id.name;
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStat ReturnStatement() throws ParseException {
  ReturnStat st = new ReturnStat();
    jj_consume_token(RETURN);
          st.pos = getToken(0).getPos();
    switch (jj_nt.kind) {
    case FUNCTION:
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case OPERATOR_ID:
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
    case COLON:
    case DOT:
    case COMMA:
    case LT:
    case GT:
    case LANGLE:
    case ASSIGN:
    case ASSIGN2:
    case IS_THE:
    case IS_ONE_OF:
    case ARROW:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_LRBRACKETS:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      st.expr = ExpressionColonComma();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStat ThrowStatement() throws ParseException {
  ThrowStat st = new ThrowStat();
    jj_consume_token(THROW);
          st.pos = getToken(0).getPos();
    st.expr = ExpressionColonComma();
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStat SynchronizedStatement() throws ParseException {
  SynchronizedStat st = new SynchronizedStat();
    jj_consume_token(SYNCHRONIZED);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    st.expr = ExpressionColonComma();
    jj_consume_token(RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public WithStat WithStatement() throws ParseException {
  WithStat st = new WithStat();
    jj_consume_token(WITH);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    st.expr = ExpressionColonComma();
    jj_consume_token(RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public TryStat TryStatement() throws ParseException {
  ASTModifiers modifiers; TryStat st = new TryStat();
    jj_consume_token(TRY);
          st.pos = getToken(0).getPos();
    st.body = Block();
    label_70:
    while (true) {
      switch (jj_nt.kind) {
      case CATCH:
        ;
        break;
      default:
        break label_70;
      }
      st.catchers += CatchInfo();
    }
    switch (jj_nt.kind) {
    case FINALLY:
      st.finally_catcher = FinallyInfo();
      break;
    default:
      ;
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public CatchInfo CatchInfo() throws ParseException {
  ASTModifiers modifiers; CatchInfo st = new CatchInfo();
    jj_consume_token(CATCH);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    modifiers = Modifiers();
    st.arg = PizzaCaseFormalParameter(modifiers);
    jj_consume_token(RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public FinallyInfo FinallyInfo() throws ParseException {
  Token t; FinallyInfo st = new FinallyInfo();
    jj_consume_token(FINALLY);
          st.pos = getToken(0).getPos();
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public RewriteMatch RewriteMatch() throws ParseException {
  TypeRef tp; Symbol id; RewriteMatch rm = new RewriteMatch();
    jj_consume_token(LBRACE);
    label_71:
    while (true) {
      rm.cases += RewriteCase();
      switch (jj_nt.kind) {
      case CASE:
        ;
        break;
      default:
        break label_71;
      }
    }
    jj_consume_token(RBRACE);
          {if (true) return rm;}
    throw new Error("Missing return statement in function");
  }

  final public RewriteCase RewriteCase() throws ParseException {
  RewriteCase c = new RewriteCase();
    jj_consume_token(CASE);
                          c.pos = getToken(0).getPos();
    c.var = RewriteCasePattern();
    jj_consume_token(COLON);
    label_72:
    while (true) {
      BlockStatement(c.getSpacePtr("stats"));
      switch (jj_nt.kind) {
      case ABSTRACT:
      case BREAK:
      case CLASS:
      case CONTINUE:
      case DO:
      case FINAL:
      case FOR:
      case FOREACH:
      case GOTO:
      case IF:
      case IF_REWR:
      case INTERFACE:
      case NATIVE:
      case RETURN:
      case STATIC:
      case SWITCH:
      case SYNCHRONIZED:
      case WITH:
      case THROW:
      case TRANSIENT:
      case TRY:
      case VOLATILE:
      case VIEW:
      case WHILE:
      case ENUM:
      case META_INTERFACE:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_ACCESS1:
      case META_PUBLIC:
      case PUBLIC:
      case META_PROTECTED:
      case PROTECTED:
      case META_PRIVATE:
      case PRIVATE:
      case FUNCTION:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case OPERATOR_ID:
      case INTEGER_LITERAL:
      case LONG_INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case COLON:
      case DOT:
      case COMMA:
      case LT:
      case GT:
      case LANGLE:
      case ASSIGN:
      case ASSIGN2:
      case IS_THE:
      case IS_ONE_OF:
      case ARROW:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR_UPPER_BOUND:
      case OPERATOR_LOWER_BOUND:
      case OPERATOR:
        ;
        break;
      default:
        break label_72;
      }
    }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public RewritePattern RewriteCasePattern() throws ParseException {
  ASTModifiers modifiers; TypeRef tp; Symbol id; RewritePattern p;
    modifiers = Modifiers();
    tp = Type();
    id = Name();
          p = mkRewritePattern(id, modifiers, tp);
    switch (jj_nt.kind) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case META_SINGLETON:
      case META_MIXIN:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_MACRO:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
      case META_UUID:
      case META_ACCESS1:
      case META_PUBLIC:
      case PUBLIC:
      case META_PROTECTED:
      case PROTECTED:
      case META_PRIVATE:
      case PRIVATE:
      case IDENTIFIER:
      case LPAREN:
      case OPERATOR_AT:
        p.vars += RewriteCasePattern();
        label_73:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_73;
          }
          jj_consume_token(COMMA);
          p.vars += RewriteCasePattern();
        }
        break;
      default:
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      ;
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public RewriteNodeFactory RewriteFactoryCall() throws ParseException {
  RewriteNodeFactory rn; SymbolRef id;
    jj_consume_token(OPERATOR_SHARP);
    id = QName();
          rn = new RewriteNodeFactory(id.name);
    RewriteNodeArgs(rn);
          {if (true) return rn;}
    throw new Error("Missing return statement in function");
  }

  final public void RewriteNodeArgs(RewriteNodeFactory nf) throws ParseException {
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case IDENTIFIER:
      nf.args += RewriteNodeArg();
      label_74:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_74;
        }
        jj_consume_token(COMMA);
        nf.args += RewriteNodeArg();
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public RewriteNodeArg RewriteNodeArg() throws ParseException {
  Token t; ENode rn;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    switch (jj_nt.kind) {
    case LBRACE:
      rn = RewriteNodeArgArrayInit();
      break;
    case FUNCTION:
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case OPERATOR_ID:
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
    case DOT:
    case LT:
    case GT:
    case LANGLE:
    case ASSIGN:
    case ASSIGN2:
    case IS_THE:
    case IS_ONE_OF:
    case ARROW:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_LRBRACKETS:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      rn = Expression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new RewriteNodeArg(t.image, rn);}
    throw new Error("Missing return statement in function");
  }

  final public RewriteNodeArgArray RewriteNodeArgArrayInit() throws ParseException {
  RewriteNodeArgArray rn = new RewriteNodeArgArray();
    jj_consume_token(LBRACE);
              rn.pos = getToken(0).getPos();
    if (jj_2_51(2)) {
      rn.args += Expression();
      label_75:
      while (true) {
        if (jj_2_50(2)) {
          ;
        } else {
          break label_75;
        }
        jj_consume_token(COMMA);
        rn.args += VariableInitializer();
      }
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
          {if (true) return rn;}
    throw new Error("Missing return statement in function");
  }

  final public IfElseRewr IfRewr() throws ParseException {
  IfElseRewr st = new IfElseRewr(); EToken not = null;
    jj_consume_token(IF_REWR);
          st.pos = getToken(0).getPos();
    if (jj_2_52(2147483647) && (getToken(1).image.equals("!"))) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(LPAREN);
    st.cond = ExpressionColonComma();
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(RPAREN);
    st.thenSt = Statement();
    jj_consume_token(ELSE);
    st.elseSt = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_3R_418() {
    if (jj_scan_token(_DEFAULT)) return true;
    return false;
  }

  final private boolean jj_3R_417() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_3R_79()) return true;
    if (jj_3R_90()) return true;
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_287()) return true;
    return false;
  }

  final private boolean jj_3R_452() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_389() {
    if (jj_scan_token(GOTO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) {
    jj_scanpos = xsp;
    if (jj_3R_418()) {
    jj_scanpos = xsp;
    if (jj_3R_419()) return true;
    }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_451() {
    if (jj_3R_453()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_90()) return true;
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_446()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_447()) {
    jj_scanpos = xsp;
    if (jj_3R_448()) return true;
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_450() {
    if (jj_3R_79()) return true;
    if (jj_3R_331()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_3R_287()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_288()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_454() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_scan_token(PCUT)) return true;
    return false;
  }

  final private boolean jj_3R_407() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_450()) {
    jj_scanpos = xsp;
    if (jj_3R_451()) {
    jj_scanpos = xsp;
    if (jj_3R_452()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_3R_79()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_411() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_454()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_3R_365()) return true;
    if (jj_scan_token(IS_ONE_OF)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_410() {
    if (jj_3R_79()) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_3R_365()) return true;
    if (jj_scan_token(IS_THE)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) return true;
    }
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3R_381() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_410()) jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    xsp = jj_scanpos;
    if (jj_3R_411()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_330() {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_409() {
    if (jj_3R_453()) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_408() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_301()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_327() {
    if (jj_3R_338()) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_272()) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_3R_272()) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_3R_271()) return true;
    return false;
  }

  final private boolean jj_3R_380() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_407()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_408()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_409()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_3R_337()) return true;
    return false;
  }

  final private boolean jj_3R_406() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_3R_336()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_3R_98()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_272()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_279()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    }
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_316() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER
                 && getToken(2).kind == IS_THE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_325()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER
                 && getToken(2).kind == IS_ONE_OF;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_326()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == PCUT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_327()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == LBRACE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_328()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == WHILE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_3R_330()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_379() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_332()) return true;
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_406()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_212()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_316()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_221()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_405() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_3R_316()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_317()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_307()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_378() {
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_405()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_212()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_404() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_3R_307()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_308()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_479() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_403() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_398() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  final private boolean jj_3R_453() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_479()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_526() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_519() {
    if (jj_3R_309()) return true;
    return false;
  }

  final private boolean jj_3R_377() {
    if (jj_scan_token(IF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_403()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_212()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_332()) return true;
    xsp = jj_scanpos;
    if (jj_3R_404()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) jj_scanpos = xsp;
    if (jj_3R_196()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_254()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(121)) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_3R_79()) return true;
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_526()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_196()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(META_UUID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_228()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_522() {
    if (jj_3R_309()) return true;
    return false;
  }

  final private boolean jj_3R_498() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_150()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(COLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_519()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_250()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_521() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(META_THROWS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    return false;
  }

  final private boolean jj_3R_520() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_250()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_499() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_520()) {
    jj_scanpos = xsp;
    if (jj_3R_521()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_522()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_478() {
    if (jj_3R_499()) return true;
    return false;
  }

  final private boolean jj_3R_477() {
    if (jj_3R_498()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(META_PACKED)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(META_VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_449() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_477()) {
    jj_scanpos = xsp;
    if (jj_3R_478()) return true;
    }
    return false;
  }

  final private boolean jj_3R_402() {
    if (jj_3R_449()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(META_TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(META_SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_457() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_365() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(META_NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(META_FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_376() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_212()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3R_402()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_402()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(META_ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_422() {
    if (jj_3R_212()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_457()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_421() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(META_STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(META_MACRO)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(META_VIRTUAL)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(META_UNERASABLE)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(META_FORWARD)) return true;
    return false;
  }

  final private boolean jj_3R_391() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_421()) {
    jj_scanpos = xsp;
    if (jj_3R_422()) return true;
    }
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(META_MIXIN)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(META_SINGLETON)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_scan_token(NO_READ_WRITE)) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_scan_token(READ_WRITE)) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_3R_150()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_scan_token(WRITE_ONLY)) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_scan_token(READ_ONLY)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_255()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_255()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_278()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_524() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(OPEN_ACCESS)) return true;
    if (jj_3R_255()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_ACCESS)) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_255()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_255()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) return true;
    }
    if (jj_3R_90()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_219()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_79()) return true;
    if (jj_3R_90()) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(COLON1)) return true;
    if (jj_3R_255()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_502() {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_524()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(META_PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_196()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_3R_79()) return true;
    if (jj_3R_331()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(META_PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(META_PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(META_ACCESS1)) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) return true;
    }
    return false;
  }

  final private boolean jj_3R_501() {
    if (jj_3R_502()) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_3R_79()) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_195()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_150()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_483() {
    if (jj_scan_token(OPERATOR_LOWER_BOUND)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_482() {
    if (jj_scan_token(OPERATOR_UPPER_BOUND)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_481() {
    if (jj_3R_502()) return true;
    return false;
  }

  final private boolean jj_3R_460() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_482()) {
    jj_scanpos = xsp;
    if (jj_3R_483()) return true;
    }
    return false;
  }

  final private boolean jj_3R_309() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_480() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3R_501()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_501()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    return false;
  }

  final private boolean jj_3R_427() {
    Token xsp;
    if (jj_3R_460()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_460()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_79()) return true;
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_426() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_459() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_480()) {
    jj_scanpos = xsp;
    if (jj_3R_481()) return true;
    }
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_3R_309()) return true;
    return false;
  }

  final private boolean jj_3R_433() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_462() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_466() {
    if (jj_3R_491()) return true;
    return false;
  }

  final private boolean jj_3R_465() {
    if (jj_3R_490()) return true;
    return false;
  }

  final private boolean jj_3R_432() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_465()) {
    jj_scanpos = xsp;
    if (jj_3R_466()) return true;
    }
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(TYPEDEF)) return true;
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_426()) {
    jj_scanpos = xsp;
    if (jj_3R_427()) return true;
    }
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_301()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_431() {
    if (jj_3R_79()) return true;
    if (jj_3R_464()) return true;
    return false;
  }

  final private boolean jj_3R_430() {
    if (jj_3R_463()) return true;
    return false;
  }

  final private boolean jj_3R_485() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_484()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) return true;
    }
    if (jj_3R_135()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_136()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) return true;
    }
    return false;
  }

  final private boolean jj_3R_429() {
    if (jj_3R_79()) return true;
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_462()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_461() {
    if (jj_3R_79()) return true;
    if (jj_3R_484()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_485()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_302()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_458() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_429()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_430()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_431()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_432()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_433()) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    return false;
  }

  final private boolean jj_3R_425() {
    if (jj_3R_100()) return true;
    if (jj_3R_459()) return true;
    return false;
  }

  final private boolean jj_3R_428() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_461()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_424() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_459()) return true;
    return false;
  }

  final private boolean jj_3R_423() {
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_458()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_394() {
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_100()) return true;
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_428()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(INVARIANT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_424()) {
    jj_scanpos = xsp;
    if (jj_3R_425()) return true;
    }
    return false;
  }

  final private boolean jj_3R_511() {
    if (jj_3R_459()) return true;
    return false;
  }

  final private boolean jj_3R_510() {
    if (jj_3R_100()) return true;
    if (jj_3R_459()) return true;
    return false;
  }

  final private boolean jj_3R_393() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_423()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_89()) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_392() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_509() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_459()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_375() {
    if (jj_3R_100()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) {
    jj_scanpos = xsp;
    if (jj_3R_393()) {
    jj_scanpos = xsp;
    if (jj_3R_394()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_361() {
    if (jj_3R_391()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_3R_390()) return true;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_3R_389()) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_3R_388()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_491() {
    if (jj_scan_token(ENSURE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_509()) {
    jj_scanpos = xsp;
    if (jj_3R_510()) {
    jj_scanpos = xsp;
    if (jj_3R_511()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_3R_387()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_3R_386()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_508() {
    if (jj_3R_459()) return true;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_3R_385()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_3R_384()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_3R_383()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_107()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_3R_382()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_106()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_507() {
    if (jj_3R_100()) return true;
    if (jj_3R_459()) return true;
    return false;
  }

  final private boolean jj_3R_351() {
    if (jj_3R_381()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_3R_380()) return true;
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_3R_379()) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_3R_378()) return true;
    return false;
  }

  final private boolean jj_3R_506() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_459()) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_3R_377()) return true;
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_3R_376()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_3R_375()) return true;
    return false;
  }

  final private boolean jj_3R_364() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_363()) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) {
    jj_scanpos = xsp;
    if (jj_3R_361()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).image.equals("rule");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_516() {
    if (jj_3R_493()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_515() {
    if (jj_3R_492()) return true;
    return false;
  }

  final private boolean jj_3R_490() {
    if (jj_scan_token(REQUIRE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_506()) {
    jj_scanpos = xsp;
    if (jj_3R_507()) {
    jj_scanpos = xsp;
    if (jj_3R_508()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_438() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_3R_79()) return true;
    if (jj_3R_363()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_364()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(127)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_471() {
    if (jj_3R_491()) return true;
    return false;
  }

  final private boolean jj_3R_470() {
    if (jj_3R_490()) return true;
    return false;
  }

  final private boolean jj_3R_437() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_470()) {
    jj_scanpos = xsp;
    if (jj_3R_471()) return true;
    }
    return false;
  }

  final private boolean jj_3R_400() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_494() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_515()) {
    jj_scanpos = xsp;
    if (jj_3R_516()) return true;
    }
    return false;
  }

  final private boolean jj_3R_436() {
    if (jj_3R_469()) return true;
    return false;
  }

  final private boolean jj_3R_435() {
    if (jj_3R_463()) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_373() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_400()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_399() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  final private boolean jj_3R_372() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_399()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_468() {
    if (jj_3R_79()) return true;
    if (jj_3R_493()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_494()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_304() {
    Token xsp;
    if (jj_3R_311()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_311()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_312()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_467() {
    if (jj_3R_79()) return true;
    if (jj_3R_492()) return true;
    return false;
  }

  final private boolean jj_3R_434() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_467()) {
    jj_scanpos = xsp;
    if (jj_3R_468()) return true;
    }
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_371() {
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(VIEW)) return true;
    if (jj_3R_100()) return true;
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("of");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_371()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_269()) return true;
    xsp = jj_scanpos;
    if (jj_3R_372()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_373()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_370() {
    if (jj_3R_398()) return true;
    return false;
  }

  final private boolean jj_3R_369() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_397() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_368() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_397()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_305() {
    Token xsp;
    if (jj_3_38()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_313()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_518() {
    if (jj_3R_493()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(META_INTERFACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_369()) {
    jj_scanpos = xsp;
    if (jj_3R_370()) return true;
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_517() {
    if (jj_3R_492()) return true;
    return false;
  }

  final private boolean jj_3R_396() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_100()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_434()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_435()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_436()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_437()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_438()) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    return false;
  }

  final private boolean jj_3R_445() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_3R_228()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_444() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_272()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_367() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_396()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_395() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_443() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_3R_100()) return true;
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_368()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_475() {
    if (jj_3R_491()) return true;
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_395()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_3R_324()) return true;
    return false;
  }

  final private boolean jj_3R_474() {
    if (jj_3R_490()) return true;
    return false;
  }

  final private boolean jj_3R_442() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_474()) {
    jj_scanpos = xsp;
    if (jj_3R_475()) return true;
    }
    return false;
  }

  final private boolean jj_3R_496() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_517()) {
    jj_scanpos = xsp;
    if (jj_3R_518()) return true;
    }
    return false;
  }

  final private boolean jj_3R_441() {
    if (jj_3R_469()) return true;
    return false;
  }

  final private boolean jj_3R_440() {
    if (jj_3R_463()) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_323()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  final private boolean jj_3R_473() {
    if (jj_3R_79()) return true;
    if (jj_3R_493()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_496()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_100()) return true;
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_366()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_472() {
    if (jj_3R_79()) return true;
    if (jj_3R_492()) return true;
    return false;
  }

  final private boolean jj_3R_439() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_472()) {
    jj_scanpos = xsp;
    if (jj_3R_473()) return true;
    }
    return false;
  }

  final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    }
    }
    if (jj_3R_324()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_89()) return true;
    if (jj_3R_90()) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_439()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_440()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_441()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_442()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_443()) {
    jj_scanpos = xsp;
    if (jj_3R_444()) {
    jj_scanpos = xsp;
    if (jj_3R_445()) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(DOUBLE_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_532() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  final private boolean jj_3R_531() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_530() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(LONG_INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_529() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_504() {
    if (jj_scan_token(OPERATOR_ID)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_525() {
    if (jj_scan_token(OPERATOR_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_529()) {
    jj_scanpos = xsp;
    if (jj_3R_530()) {
    jj_scanpos = xsp;
    if (jj_3R_531()) {
    jj_scanpos = xsp;
    if (jj_3R_532()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = interface_only;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_131()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = presc instanceof RuleMethod;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_132()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = presc instanceof Method && ((Method)presc).isMacro();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_487() {
    if (jj_scan_token(OPERATOR_ID)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_263()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_3R_262()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_503() {
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_525()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_420() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_486() {
    if (jj_scan_token(ALIAS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_503()) {
    jj_scanpos = xsp;
    if (jj_3R_504()) return true;
    }
    return false;
  }

  final private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_390() {
    if (jj_scan_token(IF_REWR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_420()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_212()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_332()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_3R_90()) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_3R_90()) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_463() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_486()) {
    jj_scanpos = xsp;
    if (jj_3R_487()) return true;
    }
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_50()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(127)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_495() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_3R_79()) return true;
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_297()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_3R_362()) return true;
    return false;
  }

  final private boolean jj_3R_469() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_196()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_495()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_3R_306()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_3R_305()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("rule");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) return true;
    }
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_3R_304()) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_90()) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) {
    jj_scanpos = xsp;
    if (jj_3R_334()) return true;
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_3R_321()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_322()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(2).image.equals("*");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_3R_269()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_535() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_527()) return true;
    return false;
  }

  final private boolean jj_3R_513() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_512() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_492() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_512()) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    xsp = jj_scanpos;
    if (jj_3R_513()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_217() {
    return false;
  }

  final private boolean jj_3R_514() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) return true;
    }
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_scan_token(OPERATOR_SHARP)) return true;
    if (jj_3R_101()) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_534() {
    if (jj_3R_527()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_535()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(LANGLE)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_293()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RANGLE)) return true;
    return false;
  }

  final private boolean jj_3R_493() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_514()) jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_90()) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_292()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_533() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_534()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).image.equals("_");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  final private boolean jj_3R_528() {
    if (jj_3R_309()) return true;
    return false;
  }

  final private boolean jj_3R_527() {
    if (jj_3R_79()) return true;
    if (jj_3R_90()) return true;
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_533()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_144()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_484() {
    if (jj_3R_90()) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_523() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_527()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    if (jj_3R_528()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_528()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_500() {
    if (jj_3R_523()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(127)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(LANGLE)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_291()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RANGLE)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_212()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_212()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3R_500()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_500()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_401() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_207()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_206()) return true;
    return false;
  }

  final private boolean jj_3R_343() {
    return false;
  }

  final private boolean jj_3R_456() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    return false;
  }

  final private boolean jj_3R_374() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_401()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_455() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_416() {
    if (jj_3R_456()) return true;
    return false;
  }

  final private boolean jj_3R_415() {
    if (jj_3R_455()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    if (jj_3R_120()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_342() {
    Token xsp;
    if (jj_3R_374()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_374()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_388() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_147()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_415()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_416()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) return true;
    }
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_387() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_212()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    Token xsp;
    if (jj_3R_153()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_153()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_386() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_212()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_3R_90()) return true;
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) return true;
    }
    return false;
  }

  final private boolean jj_3R_505() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_385() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_212()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_488() {
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_505()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_212() {
    Token xsp;
    if (jj_3R_245()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_245()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_497() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_489() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_488()) return true;
    return false;
  }

  final private boolean jj_3R_414() {
    if (jj_3R_212()) return true;
    return false;
  }

  final private boolean jj_3R_384() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_414()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(OPERATOR_ID)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_448() {
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(IS_ONE_OF)) return true;
    return false;
  }

  final private boolean jj_3R_476() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_497()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_464() {
    if (jj_3R_90()) return true;
    if (jj_3R_488()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_489()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(IS_THE)) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_3R_264()) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  final private boolean jj_3R_413() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_383() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(ASSIGN2)) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_264()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_412() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_382() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_412()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_447() {
    Token xsp;
    if (jj_3R_476()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_476()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_419() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_446() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  public kiev040TokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;

  public kiev040(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new kiev040TokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public kiev040(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new kiev040TokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public kiev040(kiev040TokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(kiev040TokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}

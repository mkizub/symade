/* Generated By:JavaCC: Do not edit this line. kiev040.java */
package kiev.parser;

import kiev.Kiev;
import kiev.Kiev.Ext;
import kiev.vlang.*;

/*{

import static kiev.vlang.AccessFlags.*;

typedef NArr<TypeWithArgsRef> NArrTypeWithArgsRefs;
typedef NArr<ENode> NArrENodes;

}*/

public class kiev040 implements kiev040Constants {

        public static boolean   interface_only = false;
        public static boolean   reparse_body = false;
        public static int               reparse_pos = 0;
        public static PreScanneable             presc = null;

        public static boolean   declMode = true;

    /** Report Parser Error (Exception) */
        public static void rpe(String msg, ParseError e) {
                int pos;
                if( token==null ) pos = 0;
                else if( token.next==null ) pos = token.getPos();
                else pos = token.next.getPos();
                if( kiev.Kiev.debug ) {
                        kiev.Kiev.reportParserError(pos, msg, e);
                } else {
                        kiev.Kiev.reportParserError(pos, msg);
                }
        }

    /** Report other Error (Exception) */
        public static void rperr(Throwable e) throws Throwable {
                int pos;
                if( token==null ) pos = 0;
                else if( token.next==null ) pos = token.getPos();
                else pos = token.next.getPos();
                if( kiev.Kiev.debug ) {
                        kiev.Kiev.reportParserError(pos, "Internal error:\n"+e);
                } else {
                        kiev.Kiev.reportParserError(pos, "Internal error");
                }
                throw e;
        }

        private static boolean checkNoSpace(Token t1, Token t2) {
                return t1.endLine == t2.beginLine && t1.endColumn+1 == t2.beginColumn;
        }

        public static final int[] noColonTokenSet = new int[]{COLON};

        public static int[] no_tokens;

        private static boolean notAToken(Token t) {
                if( no_tokens == null ) return true;
                for(int i=0; i < no_tokens.length; i++) {
                        if( t.kind == no_tokens[i] ) return false;
                }
                return true;
        }

        private static boolean labledStatementLA() {
                for(int idx=1; ;idx+=2) {
                        if (getToken(idx).kind != IDENTIFIER || getToken(idx+1).kind != COLON)
                                return false;
                        switch(getToken(idx+2).kind) {
                        case LBRACE:
                        case SEMICOLON:
                        case SWITCH:
                        case IF:
                        case WHILE:
                        case DO:
                        case FOR:
                        case FOREACH:
                        case BREAK:
                        case CONTINUE:
                        case RETURN:
                        case THROW:
                        case SYNCHRONIZED:
                        case WITH:
                        case TRY:
                        case GOTO:
                        case REPARSE_STATEMENT:
                                return true;
                        }
                }
        }

        private static boolean operatorLA(int tk) {
                switch( getToken(tk).kind ) {
                case ASSIGN:
                case ASSIGN2:
                case LT:
                case GT:
                case COLON:
                case QUESTION:
                case ARROW:
                case BANG:
                case TILDE:
                case EQ:
                case LE:
                case GE:
                case NE:
                case SC_OR:
                case SC_AND:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                case STAR:
                case SLASH:
                case BIT_AND:
                case BIT_OR:
                case XOR:
                case REM:
                case LSHIFT:
                case PLUSASSIGN:
                case MINUSASSIGN:
                case STARASSIGN:
                case SLASHASSIGN:
                case ANDASSIGN:
                case ORASSIGN:
                case XORASSIGN:
                case REMASSIGN:
                case LSHIFTASSIGN:
                case RSIGNEDSHIFTASSIGN:
                case RUNSIGNEDSHIFTASSIGN:
                case OPERATOR_AT:
                case OPERATOR_SHARP:
                case OPERATOR:
                        return notAToken(getToken(tk));
                case OPERATOR_ID:
                        return true;
                }
                return false;
        }

        private static boolean castLA_Start() {
                int i = 1;
                Token t = getToken(i);
                if (t.kind == IDENTIFIER) {
                        String qname = t.image;
                        while( getToken(i+1).kind == DOT && getToken(i+2).kind == IDENTIFIER) {
                                i += 2;
                                qname = qname + "." + getToken(i).image;
                        }
                        switch (getToken(i+1).kind) {
                        case RPAREN:
                        case LT:
                        case OPERATOR_LRBRACKETS:
                                break;
                        default:
                                return false;
                        }
                        try {
                                if( PassInfo.checkClassName(KString.from(qname)) ) {
                                        return true;
                                }
                        } catch( Exception e ) {}
                }
                return false;
        }

        private static boolean castLA() {
                if( getToken(1).kind != LPAREN ) return false;
                if( getToken(2).kind == CAST ) return true;
                if( getToken(2).kind == REINTERP ) return true;
                return castLA(1,LPAREN,RPAREN);
        }

        private static boolean castLA(int offs, int exp_kind1, int exp_kind2) {
                if( getToken(offs).kind != exp_kind1 ) return false;
                switch( getToken(offs+1).kind ) {
                case BOOLEAN: case CHAR: case BYTE:
                case SHORT: case INT: case LONG: case FLOAT:
                case DOUBLE: case VOID:
                        return true;
                case IDENTIFIER:
                        break;
                case LPAREN:
                        // Skip until matched ')' and check for "->"
                        {
                                int i = offs+2;
                                int depth = 1;
                                while( depth != 0 ) {
                                        switch(getToken(i++).kind) {
                                        case LPAREN: depth++; break;
                                        case RPAREN: depth--; break;
                                        }
                                }
                                if( getToken(i).kind==ARROW ) {
                                        return true;
                                } else {
                                        return false;
                                }
                        }
                default:
                        // TODO closure type
                        return false;
                }
                // Qualified name resolving to be a class name
                String qname = getToken(offs+1).image;
        scan_qname:
                for(int i=offs+2; ; i+=2) {
                        if( getToken(i).kind == DOT && getToken(i+1).kind == IDENTIFIER )
                                qname = qname+"."+getToken(i+1).image;
                        else {
                                switch( getToken(i).kind ) {
                                case RPAREN:
                                        if( exp_kind2 == RPAREN )  break scan_qname;
                                        else return false;
                                case GT:
                                        if( exp_kind2 == GT ) break scan_qname;
                                        else return false;
                                case LT:
                                        if( castLA(i,LT,GT) ) break scan_qname;
                                        else return false;
                                case OPERATOR_LRBRACKETS:
                                        return true;
                                case COMMA:
                                        if( exp_kind1 == LT ) break scan_qname;
                                        else return false;
                                default:
                                        return false;
                                }
                        }
                }
                try {
                        if( PassInfo.checkClassName(KString.from(qname)) ) {
                                return true;
                        }
                } catch( Exception e ) {}
                return false;
        }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  static final public FileUnit FileUnit(String filename) throws ParseException {
  FileUnit old_fu;
                old_fu = Kiev.curFileUnit;
                FileUnit fu = new FileUnit();
                Kiev.curFileUnit = fu;
                fu.filename = KString.from(filename);
                fu.setPos(0);
                declMode = true;
                ASTModifiers modifiers;
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case PRAGMA:
        ;
        break;
      default:
        break label_1;
      }
      Pragma(fu);
    }
    switch (jj_nt.kind) {
    case PACKAGE:
      fu.pkg = Package();
      break;
    default:
      ;
    }
          PassInfo.push(fu.pkg.clazz);
    try {
      label_2:
      while (true) {
        switch (jj_nt.kind) {
        case PRAGMA:
          ;
          break;
        default:
          break label_2;
        }
        Pragma(fu);
      }
      label_3:
      while (true) {
        switch (jj_nt.kind) {
        case IMPORT:
        case OPERATOR_ID:
        case TYPEDEF:
          ;
          break;
        default:
          break label_3;
        }
        switch (jj_nt.kind) {
        case IMPORT:
          fu.syntax += Import();
          break;
        case TYPEDEF:
          fu.syntax += Typedef();
          break;
        case OPERATOR_ID:
          fu.syntax += Opdef();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_4:
      while (true) {
        if (jj_2_1(1)) {
          ;
        } else {
          break label_4;
        }
        modifiers = Modifiers();
        switch (jj_nt.kind) {
        case CLASS:
        case INTERFACE:
        case ENUM:
        case OPERATOR_AT:
          fu.members += TypeDeclaration(modifiers, fu);
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
          break;
        default:
          if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {
            fu.members += SyntaxDeclaration(modifiers, fu);
            switch (jj_nt.kind) {
            case SEMICOLON:
              jj_consume_token(SEMICOLON);
              break;
            default:
              ;
            }
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(0);
    } catch (ParseError e) {
                              rpe("Bad modifiers",e);
    } catch (Throwable e) {
                             rperr(e);
    } finally {
                PassInfo.pop(fu.pkg.clazz);
                declMode = true;
                Kiev.curFileUnit = old_fu;
                {if (true) return fu;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTModifiers Modifiers() throws ParseException {
  int modifier;
          ASTModifiers n = new ASTModifiers();
    label_5:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_AT:
        ;
        break;
      default:
        break label_5;
      }
      n.annotations   += Annotation();
    }
    label_6:
    while (true) {
      if (jj_2_2(1)) {
        ;
      } else {
        break label_6;
      }
      switch (jj_nt.kind) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case VIRTUAL:
      case FORWARD:
      case WRAPPER:
        modifier                 = Modifier();
                                                       n.modifier |= modifier;
        break;
      case PACKED:
        n.annotations   += Pack();
        break;
      default:
        if (jj_2_3(1)) {
          n.acc                    = Access();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeNameRef Package() throws ParseException {
  ASTIdentifier qn;
    jj_consume_token(PACKAGE);
    qn = QName();
    jj_consume_token(SEMICOLON);
                TypeNameRef tr = new TypeNameRef(qn);
                Struct pkg = Env.newPackage(qn.toKString());
                pkg.type = Type.Type.newRefType(pkg);
                tr.lnk = pkg.type;
                {if (true) return tr;}
    throw new Error("Missing return statement in function");
  }

  static final public void Pragma(FileUnit fu) throws ParseException {
  ASTPragma p = new ASTPragma();
    jj_consume_token(PRAGMA);
    switch (jj_nt.kind) {
    case PRAGMA_ENABLE:
      jj_consume_token(PRAGMA_ENABLE);
                                          p.enable = true;
      break;
    case PRAGMA_DISABLE:
      jj_consume_token(PRAGMA_DISABLE);
                                          p.enable = false;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      p.options += StringConstExpression();
      switch (jj_nt.kind) {
      case STRING_LITERAL:
        ;
        break;
      default:
        break label_7;
      }
    }
    jj_consume_token(SEMICOLON);
          fu.setPragma(p);
  }

  static final public Import Import() throws ParseException {
  Import imp = new Import();
    jj_consume_token(IMPORT);
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {
      jj_consume_token(IDENTIFIER);
                              imp.mode = Import.ImportMode.IMPORT_SYNTAX;
      imp.name = QName();
    } else {
      switch (jj_nt.kind) {
      case PACKAGE:
        jj_consume_token(PACKAGE);
                                  imp.mode = Import.ImportMode.IMPORT_PACKAGE;
        imp.name = QName();
        break;
      case STATIC:
        jj_consume_token(STATIC);
                                  imp.mode = Import.ImportMode.IMPORT_STATIC;
        imp.name = QName();
        switch (jj_nt.kind) {
        case LPAREN:
        case DOT:
          switch (jj_nt.kind) {
          case DOT:
            jj_consume_token(DOT);
            jj_consume_token(STAR);
                                  imp.star = true;
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
                                          imp.of_method = true;
            imp.args += Type();
            label_8:
            while (true) {
              switch (jj_nt.kind) {
              case COMMA:
                ;
                break;
              default:
                break label_8;
              }
              jj_consume_token(COMMA);
              imp.args += Type();
            }
            jj_consume_token(RPAREN);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          ;
        }
        break;
      case IDENTIFIER:
        imp.name = QName();
        switch (jj_nt.kind) {
        case LPAREN:
        case DOT:
          switch (jj_nt.kind) {
          case DOT:
            jj_consume_token(DOT);
            jj_consume_token(STAR);
                                  imp.star = true;
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
                                          imp.of_method = true;
            imp.args += Type();
            label_9:
            while (true) {
              switch (jj_nt.kind) {
              case COMMA:
                ;
                break;
              default:
                break label_9;
              }
              jj_consume_token(COMMA);
              imp.args += Type();
            }
            jj_consume_token(RPAREN);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
          {if (true) return imp;}
    throw new Error("Missing return statement in function");
  }

  static final public Typedef Typedef() throws ParseException {
  ASTIdentifier id; ASTOperator op; TypeRef tp; Typedef n = new Typedef();
    jj_consume_token(TYPEDEF);
    if (jj_2_4(3) && (checkNoSpace(getToken(1),getToken(2)))) {
      id = Name();
      op = Operator();
      tp = Type();
                  n.set(id, op, tp);
    } else if (jj_2_5(1)) {
      tp = Type();
      id = Name();
                  n.set(tp, id);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Opdef Opdef() throws ParseException {
  ASTIdentifier id; ASTOperator op; ConstIntExpr ce; Opdef opd = new Opdef();
    jj_consume_token(OPERATOR_ID);
    if (jj_2_6(1)) {
      op = Operator();
                                             opd.setImage(op);
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER:
        id = Name();
                                             opd.setImage(id);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(COMMA);
    // FX,FY,XF,YF,XFX,YFX,XFY,YFY
            id = Name();
                                         opd.setMode(id);
    jj_consume_token(COMMA);
    ce = IntConstExpression();
                                                  opd.setPriority(ce);
    jj_consume_token(SEMICOLON);
          {if (true) return opd;}
    throw new Error("Missing return statement in function");
  }

  static final public Struct SyntaxDeclaration(ASTModifiers modifiers, ASTNode parent) throws ParseException {
  Struct clazz; ASTIdentifier name;
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    // "syntax"
            name = Name();
                clazz = mkStruct(name, ACC_SYNTAX|ACC_PRIVATE|ACC_ABSTRACT, modifiers, parent);
          PassInfo.push(clazz);
    jj_consume_token(LBRACE);
    label_10:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_ID:
      case TYPEDEF:
        ;
        break;
      default:
        break label_10;
      }
      switch (jj_nt.kind) {
      case TYPEDEF:
        clazz.members += Typedef();
        break;
      case OPERATOR_ID:
        clazz.members += Opdef();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACE);
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  static final public Struct TypeDeclaration(ASTModifiers modifiers, ASTNode parent) throws ParseException {
  Struct clazz; ASTIdentifier name;
    switch (jj_nt.kind) {
    case CLASS:
      jj_consume_token(CLASS);
      name = Name();
                        clazz = mkStruct(name, 0, modifiers, parent);
      ClazzArguments(clazz);
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        if (jj_2_7(2147483647)) {
          clazz.super_bound = PrimitiveType();
        } else {
          switch (jj_nt.kind) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case VOID:
          case RULE:
          case REPARSE_TYPE:
          case IDENTIFIER:
            clazz.super_bound = NArrType();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        clazz.interfaces += NArrType();
        label_11:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_11;
          }
          jj_consume_token(COMMA);
          clazz.interfaces += NArrType();
        }
        break;
      default:
        ;
      }
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
      name = Name();
                        clazz = mkStruct(name, ACC_INTERFACE, modifiers, parent);
      ClazzArguments(clazz);
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        clazz.interfaces += NArrType();
        label_12:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_12;
          }
          jj_consume_token(COMMA);
          clazz.interfaces += NArrType();
        }
        break;
      default:
        ;
      }
      break;
    case OPERATOR_AT:
      jj_consume_token(OPERATOR_AT);
      jj_consume_token(INTERFACE);
      switch (jj_nt.kind) {
      case IDENTIFIER:
        name = Name();
        break;
      case THROWS:
      case VIRTUAL:
      case ALIAS:
      case PACKED:
        name = KeywordAsName();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                        clazz = mkStruct(name, ACC_INTERFACE|ACC_ANNOTATION, modifiers, parent);
      break;
    case ENUM:
      jj_consume_token(ENUM);
      name = Name();
                        clazz = mkStruct(name, ACC_ENUM|ACC_STATIC, modifiers, parent);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          PassInfo.push(clazz);
    try {
      TypeBodyDeclaration(clazz);
    } finally {
                    PassInfo.pop(clazz);
    }
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  static final public void TypeBodyDeclaration(Struct clazz) throws ParseException {
  ASTModifiers modifiers;
    jj_consume_token(LBRACE);
    if (clazz.isEnum()) {
      modifiers = Modifiers();
      clazz.members += EnumFieldDeclaration(modifiers);
      label_13:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_13;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        clazz.members += EnumFieldDeclaration(modifiers);
      }
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    label_14:
    while (true) {
      if (jj_2_8(1)) {
        ;
      } else {
        break label_14;
      }
      modifiers = Modifiers();
      if (jj_2_9(1)) {
        clazz.members += Initializer(modifiers);
      } else {
        switch (jj_nt.kind) {
        case INVARIANT:
          clazz.members += InvariantDeclaration(modifiers);
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
          break;
        case CLASS:
        case INTERFACE:
        case ENUM:
        case OPERATOR_AT:
          clazz.members += TypeDeclaration(modifiers, clazz);
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
          break;
        case CASE:
          clazz.members += CaseTypeDeclaration(modifiers, clazz);
          jj_consume_token(SEMICOLON);
          break;
        default:
          if (jj_2_10(2147483647)) {
            clazz.members += RuleDeclaration(modifiers);
          } else if (jj_2_11(2147483647)) {
            clazz.members += ConstructorDeclaration(modifiers);
          } else if (jj_2_12(2147483647)) {
            clazz.members += MethodDeclaration(modifiers);
          } else if (jj_2_13(2147483647)) {
            FieldDecls(modifiers, clazz);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    jj_consume_token(RBRACE);
  }

  static final public Field EnumFieldDeclaration(ASTModifiers modifiers) throws ParseException {
  ASTIdentifier id; Field f; ConstStringExpr text;
    id = Name();
                f = mkEnumField(id, modifiers);
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
      text = StringConstExpression();
                        text.value = KString.from("\""+text.value+"\"");
                        f.meta.set(new MetaAlias(text));
      break;
    default:
      ;
    }
          {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public Struct CaseTypeDeclaration(ASTModifiers modifiers, Struct parent) throws ParseException {
  ASTIdentifier name; Struct clazz;
    jj_consume_token(CASE);
    name = Name();
                clazz = mkStruct(name, ACC_PIZZACASE|ACC_STATIC, modifiers, parent);
                clazz.super_type = parent.type;
    ClazzArguments(clazz);
    switch (jj_nt.kind) {
    case LPAREN:
      jj_consume_token(LPAREN);
      if (jj_2_14(1)) {
        modifiers = Modifiers();
        clazz.members += CaseTypeField(modifiers);
        label_15:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_15;
          }
          jj_consume_token(COMMA);
          modifiers = Modifiers();
          clazz.members += CaseTypeField(modifiers);
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      ;
    }
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  static final public void ClazzArguments(ASTNode parent) throws ParseException {
    switch (jj_nt.kind) {
    case LT:
      jj_consume_token(LT);
      ArgumentDeclaration(parent);
      label_16:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_16;
        }
        jj_consume_token(COMMA);
        ArgumentDeclaration(parent);
      }
      jj_consume_token(GT);
      break;
    default:
      ;
    }
  }

  static final public void ArgumentDeclaration(ASTNode parent) throws ParseException {
  ASTIdentifier name; TypeArgRef arg;
    name      = Name();
          arg = mkTypeArgRef(name,parent);
    switch (jj_nt.kind) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      arg.super_bound = NArrType();
      break;
    default:
      ;
    }
  }

  static final public int Modifier() throws ParseException {
    switch (jj_nt.kind) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
                                          {if (true) return AccessFlags.ACC_PUBLIC;}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
                                  {if (true) return AccessFlags.ACC_PROTECTED;}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                                          {if (true) return AccessFlags.ACC_PRIVATE;}
      break;
    case STATIC:
      jj_consume_token(STATIC);
                                          {if (true) return AccessFlags.ACC_STATIC;}
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                                  {if (true) return AccessFlags.ACC_ABSTRACT;}
      break;
    case FINAL:
      jj_consume_token(FINAL);
                                          {if (true) return AccessFlags.ACC_FINAL;}
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
                                          {if (true) return AccessFlags.ACC_NATIVE;}
      break;
    case SYNCHRONIZED:
      jj_consume_token(SYNCHRONIZED);
                                  {if (true) return AccessFlags.ACC_SYNCHRONIZED;}
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
                                  {if (true) return AccessFlags.ACC_TRANSIENT;}
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
                                  {if (true) return AccessFlags.ACC_VOLATILE;}
      break;
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
                                          {if (true) return AccessFlags.ACC_VIRTUAL;}
      break;
    case FORWARD:
      jj_consume_token(FORWARD);
                                          {if (true) return AccessFlags.ACC_FORWARD;}
      break;
    case WRAPPER:
      jj_consume_token(WRAPPER);
                                  {if (true) return AccessFlags.ACC_WRAPPER;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Meta Pack() throws ParseException {
  Token t; int size=-1; int offset=-1; String packer=null;
    jj_consume_token(PACKED);
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
      t= jj_consume_token(INTEGER_LITERAL);
                                      size = Integer.parseInt(t.image); t = null;
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        t= jj_consume_token(IDENTIFIER);
                                 packer = t.image; t = null;
        jj_consume_token(COMMA);
        t= jj_consume_token(INTEGER_LITERAL);
                                      offset = Integer.parseInt(t.image); t = null;
        break;
      default:
        ;
      }
      break;
    default:
      ;
    }
                MetaPacked mp = new MetaPacked();
                mp.size       = size;
                mp.offset     = offset;
                mp.fld        = KString.from(packer);
                {if (true) return mp;}
    throw new Error("Missing return statement in function");
  }

  static final public Access Access() throws ParseException {
  int acc;      int accflags = 0; int offset = 6;
    if (Kiev.enabled(Ext.Access)) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ACCESS);
    acc = AccessSpec();
                                        for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
    switch (jj_nt.kind) {
    case COMMA1:
      jj_consume_token(COMMA1);
      acc = AccessSpec();
                                        for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
      switch (jj_nt.kind) {
      case COMMA1:
        jj_consume_token(COMMA1);
        acc = AccessSpec();
                                        for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
        switch (jj_nt.kind) {
        case COMMA1:
          jj_consume_token(COMMA1);
          acc = AccessSpec();
                                        for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
          break;
        default:
          ;
        }
        break;
      default:
        ;
      }
      break;
    default:
      ;
    }
          {if (true) return new Access(accflags);}
    throw new Error("Missing return statement in function");
  }

  static final public int AccessSpec() throws ParseException {
    switch (jj_nt.kind) {
    case READ_ONLY:
      jj_consume_token(READ_ONLY);
                                  {if (true) return 2;}
      break;
    case WRITE_ONLY:
      jj_consume_token(WRITE_ONLY);
                          {if (true) return 1;}
      break;
    case READ_WRITE:
      jj_consume_token(READ_WRITE);
                          {if (true) return 3;}
      break;
    case NO_READ_WRITE:
      jj_consume_token(NO_READ_WRITE);
                          {if (true) return 0;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTIdentifier KeywordAsName() throws ParseException {
  Token t; ASTIdentifier id;
    switch (jj_nt.kind) {
    case VIRTUAL:
      t= jj_consume_token(VIRTUAL);
      break;
    case ALIAS:
      t= jj_consume_token(ALIAS);
      break;
    case PACKED:
      t= jj_consume_token(PACKED);
      break;
    case THROWS:
      t= jj_consume_token(THROWS);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                id = new ASTIdentifier();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  static final public Meta Annotation() throws ParseException {
  ASTIdentifier id; MetaValue v;
          Meta n = new Meta();
    jj_consume_token(OPERATOR_AT);
    switch (jj_nt.kind) {
    case IDENTIFIER:
      id = Name();
      break;
    case THROWS:
    case VIRTUAL:
    case ALIAS:
    case PACKED:
      id = KeywordAsName();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                n.pos = id.pos; n.type = new TypeNameRef(id);
    switch (jj_nt.kind) {
    case LPAREN:
      jj_consume_token(LPAREN);
      if (jj_2_17(1)) {
        if (jj_2_15(2147483647)) {
          AnnotationValues(n);
        } else if (jj_2_16(1)) {
          v = AnnotationValueAny();
                                                   n.set(v);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      ;
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public void AnnotationValues(Meta m) throws ParseException {
  ASTIdentifier id; MetaValue v;
    id = Name();
    jj_consume_token(ASSIGN);
    v = AnnotationValueAny();
          v.type = new MetaValueType(id.name); m.set(v);
    label_17:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_17;
      }
      jj_consume_token(COMMA);
      id = Name();
      jj_consume_token(ASSIGN);
      v = AnnotationValueAny();
                  v.type = new MetaValueType(id.name); m.set(v);
    }
  }

  static final public MetaValue AnnotationValueAny() throws ParseException {
  ENode n; MetaValue v;
    if (jj_2_18(2147483647)) {
      n = Annotation();
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = n;
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        v = AnnotationValueValueArrayInitializer();
        break;
      default:
        if (jj_2_19(1)) {
          n = ExpressionNT(null);
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = n;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public MetaValueScalar AnnotationValueScalar() throws ParseException {
  ENode n; MetaValueScalar v;
    if (jj_2_20(2147483647)) {
      n = Annotation();
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = n;
    } else if (jj_2_21(1)) {
      n = ExpressionNT(null);
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = n;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public MetaValueArray AnnotationValueValueArrayInitializer() throws ParseException {
  MetaValueScalar n; MetaValueArray v;
          v = new MetaValueArray();
    jj_consume_token(LBRACE);
    if (jj_2_22(1)) {
      n = AnnotationValueScalar();
                                              v.values.add(n.value);
      label_18:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_18;
        }
        jj_consume_token(COMMA);
        n = AnnotationValueScalar();
                                                      v.values.add(n.value);
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public void FieldDecls(ASTModifiers modifiers, Struct clazz) throws ParseException {
  boolean old_declMode; TypeRef type;
          old_declMode = declMode; declMode = false;
    try {
      type = Type();
      clazz.members += FieldDecl(modifiers, type, true);
      label_19:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_19;
        }
        jj_consume_token(COMMA);
        clazz.members += FieldDecl(modifiers, type, false);
      }
    } finally {
                    declMode = old_declMode;
    }
    jj_consume_token(SEMICOLON);
  }

  static final public Field FieldDecl(ASTModifiers modifiers, TypeRef type, boolean first) throws ParseException {
  Token t; ASTIdentifier id; Field f;
    id = Name();
          f = mkField(id, modifiers, type, first);
    label_20:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_20;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                    f.ftype = new TypeExpr(f.ftype,t);
    }
    switch (jj_nt.kind) {
    case ASSIGN:
    case ASSIGN2:
      switch (jj_nt.kind) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      case ASSIGN2:
        jj_consume_token(ASSIGN2);
                               f.setInitWrapper(true);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      f.init = VariableInitializer();
      break;
    default:
      ;
    }
          {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public void LocalVarDecls(ASTModifiers modifiers, RuleMethod meth) throws ParseException {
  TypeRef type;
    type = Type();
    meth.localvars += VarDecl(modifiers, type, true);
    label_21:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_21;
      }
      jj_consume_token(COMMA);
      meth.localvars += VarDecl(modifiers, type, false);
    }
    jj_consume_token(SEMICOLON);
  }

  static final public Var VarDecl(ASTModifiers modifiers, TypeRef type, boolean first) throws ParseException {
  Token t; ASTIdentifier id; Var lv;
    id = Name();
          lv = mkVar(id, modifiers, type, first);
    label_22:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_22;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                    lv.vtype = new TypeExpr(lv.vtype,t);
    }
    switch (jj_nt.kind) {
    case ASSIGN:
    case ASSIGN2:
      switch (jj_nt.kind) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      case ASSIGN2:
        jj_consume_token(ASSIGN2);
                               lv.setInitWrapper(true);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      lv.init = VariableInitializer();
      break;
    default:
      ;
    }
          {if (true) return lv;}
    throw new Error("Missing return statement in function");
  }

  static final public ENode VariableInitializer() throws ParseException {
  ENode e;
    switch (jj_nt.kind) {
    case LBRACE:
      e = ArrayInitializer();
      break;
    default:
      if (jj_2_23(1)) {
        e = Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ENode ArrayInitializer() throws ParseException {
  Token t; ASTNewInitializedArrayExpression e = new ASTNewInitializedArrayExpression();
    t= jj_consume_token(LBRACE);
    if (jj_2_25(2)) {
      e.args += VariableInitializer();
      label_23:
      while (true) {
        if (jj_2_24(2)) {
          ;
        } else {
          break label_23;
        }
        jj_consume_token(COMMA);
        e.args += VariableInitializer();
      }
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Field CaseTypeField(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; ASTIdentifier id;
    tp = Type();
    id = Name();
    label_24:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_24;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                    tp = new TypeExpr(tp,t);
    }
                {if (true) return mkCaseField(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
  }

  static final public Var PizzaCaseFormalParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; ASTIdentifier id;
    if (!Kiev.javaMode && (getToken(1).image.equals("_"))) {
      id = Name();
                              tp = null;
    } else if (jj_2_26(1)) {
      tp = Type();
      id = Name();
      label_25:
      while (true) {
        switch (jj_nt.kind) {
        case OPERATOR_LRBRACKETS:
          ;
          break;
        default:
          break label_25;
        }
        t= jj_consume_token(OPERATOR_LRBRACKETS);
                                            tp = new TypeExpr(tp,t);
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return mkVar(id, modifiers, tp, true);}
    throw new Error("Missing return statement in function");
  }

  static final public FormPar MethodFormalParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; TypeRef st=null; ASTIdentifier id;
    tp = Type();
    if (!Kiev.javaMode && (getToken(1).image.equals(":"))) {
      jj_consume_token(COLON);
      st = Type();
    } else {
      ;
    }
    id = Name();
    label_26:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_26;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                    tp = new TypeExpr(tp,t); if (st!= null) st = new TypeExpr(st,t);
    }
          {if (true) return mkFormPar(id, modifiers, tp, st);}
    throw new Error("Missing return statement in function");
  }

  static final public FormPar FormalParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; ASTIdentifier id;
    tp = Type();
    id = Name();
    label_27:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_27;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                    tp = new TypeExpr(tp,t);
    }
          {if (true) return mkFormPar(id, modifiers, tp, null);}
    throw new Error("Missing return statement in function");
  }

  static final public MetaThrows Throws() throws ParseException {
  MetaThrows n = new MetaThrows(); ASTIdentifier id;
    jj_consume_token(THROWS);
    id = QName();
                       n.add(id);
    label_28:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_28;
      }
      jj_consume_token(COMMA);
      id = QName();
                               n.add(id);
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTAlias Alias() throws ParseException {
  Token t; ASTAlias a;
    jj_consume_token(ALIAS);
    if (jj_2_27(2)) {
      a = OperatorAlias();
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER:
        a = IdentifierAlias();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTIdentifierAlias IdentifierAlias() throws ParseException {
  ASTIdentifierAlias a = new ASTIdentifierAlias();
    a.name = Name();
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTOperatorAlias OperatorAlias() throws ParseException {
  Token t = null; ASTIdentifier id; ASTOperator op; ConstIntExpr ce; ASTOperatorAlias a = new ASTOperatorAlias();
    switch (jj_nt.kind) {
    case OPERATOR_ID:
      jj_consume_token(OPERATOR_ID);
      jj_consume_token(LPAREN);
      ce = IntConstExpression();
                                                          a.setPriority(ce);
      jj_consume_token(COMMA);
      id = Name();
                                                                          a.setMode(id);
      jj_consume_token(COMMA);
      if (jj_2_28(1)) {
        op = Operator();
                                                                  a.setImage(op);
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          id = Name();
                                                                          a.setImage(id);
          break;
        case OPERATOR_LRBRACKETS:
          jj_consume_token(OPERATOR_LRBRACKETS);
                                                          a.image = kiev.vlang.Constants.nameArrayOp;
          break;
        case NEW:
          jj_consume_token(NEW);
                                                                          a.image = kiev.vlang.Constants.nameNewOp;
          break;
        case CAST:
          jj_consume_token(CAST);
                                                                          a.image = kiev.vlang.Constants.nameCastOp;
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      break;
    case IDENTIFIER:
      id = Name();
                                                                          a.setMode(id);
      jj_consume_token(OPERATOR_ID);
      if (jj_2_29(1)) {
        op = Operator();
                                                                  a.setImage(op);
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          id = Name();
                                                                          a.setImage(id);
          break;
        case OPERATOR_LRBRACKETS:
          jj_consume_token(OPERATOR_LRBRACKETS);
                                                          a.image = kiev.vlang.Constants.nameArrayOp;
          break;
        case NEW:
          jj_consume_token(NEW);
                                                                          a.image = kiev.vlang.Constants.nameNewOp;
          break;
        case CAST:
          jj_consume_token(CAST);
                                                                          a.image = kiev.vlang.Constants.nameCastOp;
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockStat MaybeSkipBlock() throws ParseException {
  boolean old_declMode; BlockStat bl = null;
    if (interface_only) {
      jj_consume_token(LBRACE);
                        Token tk = getToken(0);
                        PrescannedBody pbody = new PrescannedBody(tk.beginLine,tk.beginColumn);
                        Kiev.curFileUnit.addPrescannedBody(pbody);
                        int depth = 1;
                        do {
                                tk = getNextToken();
                                if( tk.kind == LBRACE ) depth++;
                                else if( tk.kind == RBRACE ) depth--;
                        } while( depth > 0 );
                        presc.pbody = pbody;
                        if( presc instanceof RuleMethod )
                                pbody.mode = PrescannedBody.RuleBlockMode;
                        else
                                pbody.mode = PrescannedBody.BlockMode;
    } else if (presc instanceof RuleMethod) {
      bl = RuleBlock();
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        bl = Block();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  static final public Method MethodDeclaration(ASTModifiers modifiers) throws ParseException {
  Token t; Method m; TypeRef ret; ASTIdentifier id; MetaThrows thr;
    ClazzArguments(null);
    ret = Type();
    id = Name();
          m = mkMethod(id,modifiers,ret);
    jj_consume_token(LPAREN);
    if (jj_2_32(1)) {
      modifiers = Modifiers();
      m.params += MethodFormalParameter(modifiers);
      label_29:
      while (true) {
        if (jj_2_30(2)) {
          ;
        } else {
          break label_29;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        m.params += MethodFormalParameter(modifiers);
      }
      if (jj_2_31(2)) {
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          ;
        }
        jj_consume_token(VARARGS);
                                  m.setVarArgs(true);
      } else {
        ;
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    label_30:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_30;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                          m.type_ref.ret = new TypeExpr(m.type_ref.ret,t);
    }
    label_31:
    while (true) {
      switch (jj_nt.kind) {
      case ALIAS:
        ;
        break;
      default:
        break label_31;
      }
      m.aliases += Alias();
    }
    switch (jj_nt.kind) {
    case THROWS:
      thr = Throws();
                                 m.meta.set(thr);
      break;
    default:
      ;
    }
    label_32:
    while (true) {
      switch (jj_nt.kind) {
      case REQUIRE:
      case ENSURE:
        ;
        break;
      default:
        break label_32;
      }
      switch (jj_nt.kind) {
      case REQUIRE:
        m.conditions += RequareDeclaration();
        break;
      case ENSURE:
        m.conditions += EnsureDeclaration();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_33(2147483647)) {
                  presc = m;
      m.body = MaybeSkipBlock();
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case _DEFAULT:
      case SEMICOLON:
        switch (jj_nt.kind) {
        case _DEFAULT:
          jj_consume_token(_DEFAULT);
          m.annotation_default = AnnotationValueAny();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Constructor ConstructorDeclaration(ASTModifiers modifiers) throws ParseException {
  Token t; Constructor m; ASTIdentifier id; MetaThrows thr;
    id = Name();
                if( !id.name.equals(PassInfo.clazz.name.short_name) )
                        Kiev.reportError(id.pos,"Return type missed or bad constructor name "+id);
                else
                        id.name = Constants.nameInit;
                m = mkConstructor(id,modifiers);
    jj_consume_token(LPAREN);
    if (jj_2_36(1)) {
      modifiers = Modifiers();
      m.params += FormalParameter(modifiers);
      label_33:
      while (true) {
        if (jj_2_34(2)) {
          ;
        } else {
          break label_33;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        m.params += FormalParameter(modifiers);
      }
      if (jj_2_35(2)) {
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          ;
        }
        jj_consume_token(VARARGS);
                                  m.setVarArgs(true);
      } else {
        ;
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    label_34:
    while (true) {
      switch (jj_nt.kind) {
      case ALIAS:
        ;
        break;
      default:
        break label_34;
      }
      m.aliases += Alias();
    }
    switch (jj_nt.kind) {
    case THROWS:
      thr = Throws();
                                 m.meta.set(thr);
      break;
    default:
      ;
    }
    label_35:
    while (true) {
      switch (jj_nt.kind) {
      case REQUIRE:
      case ENSURE:
        ;
        break;
      default:
        break label_35;
      }
      switch (jj_nt.kind) {
      case REQUIRE:
        m.conditions += RequareDeclaration();
        break;
      case ENSURE:
        m.conditions += EnsureDeclaration();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_37(2147483647)) {
                  presc = m;
      m.body = MaybeSkipBlock();
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public WBCCondition RequareDeclaration() throws ParseException {
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondRequire;
    jj_consume_token(REQUIRE);
    if (jj_2_38(2147483647)) {
      jj_consume_token(LBRACKET);
      n.name = Name();
      jj_consume_token(RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_39(2147483647)) {
      n.name = Name();
      n.body = CondBlock();
    } else if (jj_2_40(1)) {
      n.body = CondBlock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public WBCCondition EnsureDeclaration() throws ParseException {
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondEnsure;
    jj_consume_token(ENSURE);
    if (jj_2_41(2147483647)) {
      jj_consume_token(LBRACKET);
      n.name = Name();
      jj_consume_token(RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_42(2147483647)) {
      n.name = Name();
      n.body = CondBlock();
    } else if (jj_2_43(1)) {
      n.body = CondBlock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public WBCCondition InvariantDeclaration(ASTModifiers modifiers) throws ParseException {
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondInvariant;
    jj_consume_token(INVARIANT);
    if (jj_2_44(2147483647)) {
      jj_consume_token(LBRACKET);
      n.name = Name();
      jj_consume_token(RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_45(2147483647)) {
      n.name = Name();
      n.body = CondBlock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public RuleMethod RuleDeclaration(ASTModifiers modifiers) throws ParseException {
  RuleBlock bl; RuleMethod m; ASTIdentifier id;
    jj_consume_token(RULE);
    id = Name();
          m = mkRuleMethod(id, modifiers, new TypeRef(Type.tpRule));
    jj_consume_token(LPAREN);
    if (jj_2_46(1)) {
      modifiers = Modifiers();
      m.params += FormalParameter(modifiers);
      label_36:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_36;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        m.params += FormalParameter(modifiers);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    label_37:
    while (true) {
      switch (jj_nt.kind) {
      case ALIAS:
        ;
        break;
      default:
        break label_37;
      }
      m.aliases += Alias();
    }
    label_38:
    while (true) {
      if (jj_2_47(1)) {
        ;
      } else {
        break label_38;
      }
      modifiers = Modifiers();
      LocalVarDecls(modifiers,m);
    }
    label_39:
    while (true) {
      switch (jj_nt.kind) {
      case REQUIRE:
      case ENSURE:
        ;
        break;
      default:
        break label_39;
      }
      switch (jj_nt.kind) {
      case REQUIRE:
        m.conditions += RequareDeclaration();
        break;
      case ENSURE:
        m.conditions += EnsureDeclaration();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_48(2147483647)) {
                  presc = m;
      m.body = MaybeSkipBlock();
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Initializer Initializer(ASTModifiers modifiers) throws ParseException {
  Initializer n = new Initializer(); BlockStat bl;
                n.setFlags(modifiers.getFlags());
                /*{
		foreach (Meta m; modifiers.annotations)
			n.meta.set(m);
		}*/

          presc = n;
    bl = MaybeSkipBlock();
                if (bl != null) n.body = bl;
    switch (jj_nt.kind) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      ;
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  static final public TypeRef Type() throws ParseException {
  TypeRef res;
    switch (jj_nt.kind) {
    case REPARSE_TYPE:
      res = ReparseType();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
    case IDENTIFIER:
      res = TypeExpr();
      break;
    default:
      if (Kiev.enabled(Ext.With)) {
        res = ClosureType();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeRef TypeExpr() throws ParseException {
  TypeRef res; Token t;
    switch (jj_nt.kind) {
    case REPARSE_TYPE:
      res = ReparseType();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
      res = PrimitiveType();
      break;
    case IDENTIFIER:
      res = TypeWithArgs();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_40:
    while (true) {
      switch (jj_nt.kind) {
      case QUESTION:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case REM:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR:
        ;
        break;
      default:
        break label_40;
      }
      switch (jj_nt.kind) {
      case QUESTION:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case REM:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR:
        t = TypeOperatorChar();
        break;
      case OPERATOR_LRBRACKETS:
        t = jj_consume_token(OPERATOR_LRBRACKETS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  res = new TypeExpr(res,t);
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeRef TypeWithArgs() throws ParseException {
  ASTIdentifier id; TypeRef res; TypeRef arg; TypeWithArgsRef tra;
    id = QName();
                       res = new TypeNameRef(id);
    switch (jj_nt.kind) {
    case LT:
      jj_consume_token(LT);
                          res = tra = new TypeWithArgsRef(res);
      tra.args += Type();
      label_41:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_41;
        }
        jj_consume_token(COMMA);
        tra.args += Type();
      }
      jj_consume_token(GT);
      break;
    default:
      ;
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeRef NArrType() throws ParseException {
  TypeRef res; Token t;
    switch (jj_nt.kind) {
    case REPARSE_TYPE:
      res = ReparseType();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
      res = PrimitiveType();
      break;
    case IDENTIFIER:
      res = TypeWithArgs();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_42:
    while (true) {
      if (jj_2_49(2)) {
        ;
      } else {
        break label_42;
      }
      switch (jj_nt.kind) {
      case QUESTION:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case REM:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR:
        t = TypeOperatorChar();
                                                                  res = new TypeExpr(res,t);
        break;
      case OPERATOR_LRBRACKETS:
        t = jj_consume_token(OPERATOR_LRBRACKETS);
                                                                  res = new TypeExpr(res,t);
        t = TypeOperatorChar();
                                                                  res = new TypeExpr(res,t);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  res = new TypeExpr(res,t);
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeRef ClosureType() throws ParseException {
  Token t; TypeClosureRef n = new TypeClosureRef();
    t= jj_consume_token(LPAREN);
                n.setPos(t.getPos());
    if (jj_2_50(1)) {
      n.types += Type();
      label_43:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_43;
        }
        jj_consume_token(COMMA);
        n.types += Type();
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(ARROW);
    n.types += Type();
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeRef PrimitiveType() throws ParseException {
  Token t; TypeRef tp = new TypeRef();
    switch (jj_nt.kind) {
    case BOOLEAN:
      t= jj_consume_token(BOOLEAN);
                          tp.lnk = Type.tpBoolean;
      break;
    case CHAR:
      t= jj_consume_token(CHAR);
                                  tp.lnk = Type.tpChar;
      break;
    case BYTE:
      t= jj_consume_token(BYTE);
                                  tp.lnk = Type.tpByte;
      break;
    case SHORT:
      t= jj_consume_token(SHORT);
                                  tp.lnk = Type.tpShort;
      break;
    case INT:
      t= jj_consume_token(INT);
                                  tp.lnk = Type.tpInt;
      break;
    case LONG:
      t= jj_consume_token(LONG);
                                  tp.lnk = Type.tpLong;
      break;
    case FLOAT:
      t= jj_consume_token(FLOAT);
                                  tp.lnk = Type.tpFloat;
      break;
    case DOUBLE:
      t= jj_consume_token(DOUBLE);
                          tp.lnk = Type.tpDouble;
      break;
    case VOID:
      t= jj_consume_token(VOID);
                                  tp.lnk = Type.tpVoid;
      break;
    case RULE:
      t= jj_consume_token(RULE);
                                  tp.lnk = Type.tpRule;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          tp.pos = t.getPos(); {if (true) return tp;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeRef ReparseType() throws ParseException {
  Token t;
    t= jj_consume_token(REPARSE_TYPE);
                Type tp = (Type)Kiev.parserAddresses.get(t.image.substring(2));
                {if (true) return new TypeRef(tp);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTIdentifier Name() throws ParseException {
  Token t;
    t= jj_consume_token(IDENTIFIER);
                ASTIdentifier id = new ASTIdentifier();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTIdentifier QName() throws ParseException {
  ASTIdentifier id; ASTIdentifier id2;
    id = Name();
    label_44:
    while (true) {
      if (jj_2_51(2)) {
        ;
      } else {
        break label_44;
      }
      jj_consume_token(DOT);
      id2 = Name();
                        id.name = new KStringBuffer(id.name.len+1+id2.name.len)
                                .append_fast(id.name)
                                .append_fast((byte)'.')
                                .append_fast(id2.name)
                                .toKString();
    }
          {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  static final public ENode CommaExpression() throws ParseException {
  ENode e; CommaExpr ce = null;
    e = Expression();
    label_45:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_45;
      }
      jj_consume_token(COMMA);
                  if (ce==null) ce = new CommaExpr(e);
      ce.exprs += Expression();
    }
          {if (true) return ce == null ? e : ce;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTRuleNode RuleOrExpression() throws ParseException {
  ASTRuleNode e; RuleOrExpr r = null;
    e = RuleAndExpression();
    label_46:
    while (true) {
      switch (jj_nt.kind) {
      case SEMICOLON:
        ;
        break;
      default:
        break label_46;
      }
      jj_consume_token(SEMICOLON);
                  if (r==null) { r = new RuleOrExpr(e); r.pos = getToken(0).getPos();}
      r.rules += RuleAndExpression();
    }
          {if (true) return r == null ? e : r;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTRuleNode RuleAndExpression() throws ParseException {
  ASTRuleNode e; RuleAndExpr r = null;
    e = RuleExpression();
    label_47:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_47;
      }
      jj_consume_token(COMMA);
                  if (r==null) { r = new RuleAndExpr(e); r.pos = getToken(0).getPos();}
      r.rules += RuleExpression();
    }
          {if (true) return r == null ? e : r;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTRuleNode RuleExpression() throws ParseException {
  ASTRuleNode r;
    if (getToken(1).kind == IDENTIFIER
                     && getToken(2).kind == IS_THE) {
      r = RuleIstheExpression();
    } else if (getToken(1).kind == IDENTIFIER
                     && getToken(2).kind == IS_ONE_OF) {
      r = RuleIsoneofExpression();
    } else if (getToken(1).kind == PCUT) {
      r = RuleCutExpression();
    } else if (getToken(1).kind == LBRACE) {
      jj_consume_token(LBRACE);
      r = RuleOrExpression();
      jj_consume_token(RBRACE);
    } else if (getToken(1).kind == WHILE) {
      jj_consume_token(WHILE);
                  r = new ASTRuleExpression(); r.while_mode = true;
      r.expr = Expression();
      switch (jj_nt.kind) {
      case COLON:
        jj_consume_token(COLON);
        r.bt_expr = ExpressionNT(noColonTokenSet);
        break;
      default:
        ;
      }
    } else {
                  r = new ASTRuleExpression();
      r.expr = ExpressionNT(noColonTokenSet);
      switch (jj_nt.kind) {
      case COLON:
        jj_consume_token(COLON);
        r.bt_expr = ExpressionNT(noColonTokenSet);
        break;
      default:
        ;
      }
    }
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTRuleIstheExpression RuleIstheExpression() throws ParseException {
  ASTRuleIstheExpression r = new ASTRuleIstheExpression();
    r.name = Name();
    jj_consume_token(IS_THE);
    r.expr = AccessExpression();
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTRuleIsoneofExpression RuleIsoneofExpression() throws ParseException {
  ASTRuleIsoneofExpression r = new ASTRuleIsoneofExpression();
    r.names += Name();
    jj_consume_token(IS_ONE_OF);
    r.exprs += AccessExpression();
    label_48:
    while (true) {
      if (getToken(1).image.equals("&")
                       && getToken(2).kind == IDENTIFIER
                       && getToken(3).kind == IS_ONE_OF) {
        ;
      } else {
        break label_48;
      }
      jj_consume_token(BIT_AND);
      r.names += Name();
      jj_consume_token(IS_ONE_OF);
      r.exprs += AccessExpression();
    }
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public RuleCutExpr RuleCutExpression() throws ParseException {
  RuleCutExpr r = new RuleCutExpr();
    jj_consume_token(PCUT);
                r.pos = getToken(0).getPos();
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public Token TypeOperatorChar() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case QUESTION:
      t= jj_consume_token(QUESTION);
      break;
    case BANG:
      t= jj_consume_token(BANG);
      break;
    case TILDE:
      t= jj_consume_token(TILDE);
      break;
    case PLUS:
      t= jj_consume_token(PLUS);
      break;
    case MINUS:
      t= jj_consume_token(MINUS);
      break;
    case STAR:
      t= jj_consume_token(STAR);
      break;
    case SLASH:
      t= jj_consume_token(SLASH);
      break;
    case BIT_AND:
      t= jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      t= jj_consume_token(BIT_OR);
      break;
    case XOR:
      t= jj_consume_token(XOR);
      break;
    case REM:
      t= jj_consume_token(REM);
      break;
    case OPERATOR_AT:
      t= jj_consume_token(OPERATOR_AT);
      break;
    case OPERATOR_SHARP:
      t= jj_consume_token(OPERATOR_SHARP);
      break;
    case OPERATOR:
      t= jj_consume_token(OPERATOR);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Token OperatorChar() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case ASSIGN:
      t= jj_consume_token(ASSIGN);
      break;
    case ASSIGN2:
      t= jj_consume_token(ASSIGN2);
      break;
    case LT:
      t= jj_consume_token(LT);
      break;
    case GT:
      t= jj_consume_token(GT);
      break;
    case COLON:
      t= jj_consume_token(COLON);
      break;
    case QUESTION:
      t= jj_consume_token(QUESTION);
      break;
    case ARROW:
      t= jj_consume_token(ARROW);
      break;
    case BANG:
      t= jj_consume_token(BANG);
      break;
    case TILDE:
      t= jj_consume_token(TILDE);
      break;
    case EQ:
      t= jj_consume_token(EQ);
      break;
    case LE:
      t= jj_consume_token(LE);
      break;
    case GE:
      t= jj_consume_token(GE);
      break;
    case NE:
      t= jj_consume_token(NE);
      break;
    case SC_OR:
      t= jj_consume_token(SC_OR);
      break;
    case SC_AND:
      t= jj_consume_token(SC_AND);
      break;
    case INCR:
      t= jj_consume_token(INCR);
      break;
    case DECR:
      t= jj_consume_token(DECR);
      break;
    case PLUS:
      t= jj_consume_token(PLUS);
      break;
    case MINUS:
      t= jj_consume_token(MINUS);
      break;
    case STAR:
      t= jj_consume_token(STAR);
      break;
    case SLASH:
      t= jj_consume_token(SLASH);
      break;
    case BIT_AND:
      t= jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      t= jj_consume_token(BIT_OR);
      break;
    case XOR:
      t= jj_consume_token(XOR);
      break;
    case REM:
      t= jj_consume_token(REM);
      break;
    case LSHIFT:
      t= jj_consume_token(LSHIFT);
      break;
    case PLUSASSIGN:
      t= jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      t= jj_consume_token(MINUSASSIGN);
      break;
    case STARASSIGN:
      t= jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      t= jj_consume_token(SLASHASSIGN);
      break;
    case ANDASSIGN:
      t= jj_consume_token(ANDASSIGN);
      break;
    case ORASSIGN:
      t= jj_consume_token(ORASSIGN);
      break;
    case XORASSIGN:
      t= jj_consume_token(XORASSIGN);
      break;
    case REMASSIGN:
      t= jj_consume_token(REMASSIGN);
      break;
    case LSHIFTASSIGN:
      t= jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      t= jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      t= jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case OPERATOR_AT:
      t= jj_consume_token(OPERATOR_AT);
      break;
    case OPERATOR_SHARP:
      t= jj_consume_token(OPERATOR_SHARP);
      break;
    case OPERATOR:
      t= jj_consume_token(OPERATOR);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTOperator Operator() throws ParseException {
  Token t; String image; ASTOperator op = new ASTOperator();
    switch (jj_nt.kind) {
    case ARROW:
    case COLON:
    case QUESTION:
    case LT:
    case GT:
    case ASSIGN:
    case ASSIGN2:
    case BANG:
    case TILDE:
    case EQ:
    case LE:
    case GE:
    case NE:
    case SC_OR:
    case SC_AND:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
    case SLASH:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case REM:
    case LSHIFT:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR:
      t= OperatorChar();
                  image = t.image;
      label_49:
      while (true) {
        if (jj_2_52(1)) {
          ;
        } else {
          break label_49;
        }
        if (!Kiev.javaMode && operatorLA(1) && checkNoSpace(getToken(0),getToken(1))) {
          t= OperatorChar();
                          image = image+t.image;
        } else if (Kiev.javaMode && getToken(1).kind==GT && checkNoSpace(getToken(0),getToken(1))) {
          t= jj_consume_token(GT);
                          image = image+t.image;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      if (!Kiev.javaMode) {
        jj_consume_token(OPERATOR_ID);
        t= jj_consume_token(IDENTIFIER);
                  image = t.image;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                op.setPos(t.getPos());
                op.image = KString.from(image);
                {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  static final public void CastOperatorLA() throws ParseException {
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case CAST:
      jj_consume_token(CAST);
      break;
    case REINTERP:
      jj_consume_token(REINTERP);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
      PrimitiveType();
      break;
    default:
      if (castLA_Start()) {
        Type();
        jj_consume_token(RPAREN);
        switch (jj_nt.kind) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case LONG_INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          ConstExpression();
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        default:
          if (jj_2_53(1)) {
            Operator();
          } else {
            switch (jj_nt.kind) {
            case REPARSE_EXPRESSION:
              ReparseExpression();
              break;
            case FUNCTION:
              jj_consume_token(FUNCTION);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public ENode CastOperator() throws ParseException {
  Token t; ASTCastOperator op = new ASTCastOperator();
    t= jj_consume_token(LPAREN);
          op.setPos(t.getPos());
    switch (jj_nt.kind) {
    case CAST:
    case REINTERP:
      switch (jj_nt.kind) {
      case CAST:
        jj_consume_token(CAST);
        break;
      case REINTERP:
        jj_consume_token(REINTERP);
                               op.reinterp=true;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
    op.type = Type();
    jj_consume_token(RPAREN);
          {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  static final public ENode ExpressionNT(int[] nt_new) throws ParseException {
  int[] nt_old = no_tokens; no_tokens = nt_new; ENode e;
    try {
      e = Expression();
    } finally {
                    no_tokens = nt_old;
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ENode Expression() throws ParseException {
  ASTExpression e = new ASTExpression();
    label_50:
    while (true) {
      if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("instanceof")) {
        e.nodes += Name();
        e.nodes += Type();
      } else if (operatorLA(1)) {
        e.nodes += Operator();
      } else if (jj_2_54(2147483647)) {
        e.nodes += CastOperator();
      } else if (jj_2_55(2)) {
        e.nodes += AccessExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_56(1)) {
        ;
      } else {
        break label_50;
      }
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ENode ReparseExpression() throws ParseException {
  Token t; ASTReparseExpression e = new ASTReparseExpression();
    t= jj_consume_token(REPARSE_EXPRESSION);
                e.set(t);
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ENode CallExpression() throws ParseException {
  ASTCallExpression e = new ASTCallExpression();
    e.func = Name();
    jj_consume_token(LPAREN);
    if (jj_2_57(1)) {
      e.args += ExpressionNT(null);
      label_51:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_51;
        }
        jj_consume_token(COMMA);
        e.args += ExpressionNT(null);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ENode CallAccessExpression(ENode obj) throws ParseException {
  ASTCallAccessExpression e = new ASTCallAccessExpression(); e.obj = obj;
    e.func = Name();
    jj_consume_token(LPAREN);
    if (jj_2_58(1)) {
      e.args += ExpressionNT(null);
      label_52:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_52;
        }
        jj_consume_token(COMMA);
        e.args += ExpressionNT(null);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ENode TypeClassExpression() throws ParseException {
  TypeClassExpr e = new TypeClassExpr();
    e.type = Type();
    jj_consume_token(DOT);
    jj_consume_token(CLASS);
                e.pos = getToken(0).getPos();
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ENode AccessExpression() throws ParseException {
  Token t; ENode e = null;
    if (jj_2_59(2147483647)) {
      e = TypeClassExpression();
    } else if (jj_2_60(2)) {
      e = ConstExpression();
    } else if (jj_2_61(2)) {
      e = CallExpression();
    } else if (jj_2_62(2)) {
      e = Name();
    } else if (jj_2_63(2147483647)) {
      e = NewInitializedArrayExpression();
    } else if (jj_2_64(2147483647)) {
      e = NewArrayExpression();
    } else if (jj_2_65(2147483647)) {
      e = NewExpression();
    } else {
      switch (jj_nt.kind) {
      case REPARSE_EXPRESSION:
        e = ReparseExpression();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        e = ExpressionNT(null);
        jj_consume_token(RPAREN);
                  e.setPrimaryExpr(true);
        break;
      default:
        if (jj_2_66(2147483647)) {
          e = AnonymouseClosure();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    label_53:
    while (true) {
      switch (jj_nt.kind) {
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        break label_53;
      }
      if (jj_2_67(3)) {
        jj_consume_token(DOT);
        e = CallAccessExpression(e);
      } else if (jj_2_68(3)) {
        t= jj_consume_token(DOT);
                  ASTAccessExpression ae = new ASTAccessExpression(); ae.obj = e; ae.setPos(t.getPos());
        ae.ident = Name();
          e = ae;
      } else if (jj_2_69(2)) {
        t= jj_consume_token(LBRACKET);
                  ContainerAccessExpr ae = new ContainerAccessExpr(); ae.obj = e; ae.setPos(t.getPos());
        ae.index = ExpressionNT(null);
        jj_consume_token(RBRACKET);
          e = ae;
      } else if (jj_2_70(2147483647)) {
        t= jj_consume_token(DOT);
                  ASTNewAccessExpression ae = new ASTNewAccessExpression(); ae.obj = e; ae.setPos(t.getPos());
        e = NewExpression();
                        ae.type = ((ASTNewExpression)e).type;
                        /*{ foreach (ENode a; ((ASTNewExpression)e).args) ae.args += a; }*/
                        if (((ASTNewExpression)e).clazz != null)
                                {if (true) throw new ParseException();}
                        e = ae;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTAnonymouseClosure AnonymouseClosure() throws ParseException {
  Token t; ASTModifiers modifiers; ASTAnonymouseClosure ac = new ASTAnonymouseClosure();
    t= jj_consume_token(FUNCTION);
    jj_consume_token(LPAREN);
    if (jj_2_71(1)) {
      modifiers = Modifiers();
      ac.params += FormalParameter(modifiers);
      label_54:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_54;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        ac.params += FormalParameter(modifiers);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(ARROW);
      ac.setPos(t.getPos());
    if (getToken(1).kind == RULE) {
      ac.rettype = Type();
      ac.body = RuleBlock();
    } else if (jj_2_72(1)) {
      ac.rettype = Type();
      ac.body = Block();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ac;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstExpr ConstExpression() throws ParseException {
  ConstExpr ce;
    switch (jj_nt.kind) {
    case FALSE:
    case TRUE:
      ce = BooleanConstExpression();
      break;
    case INTEGER_LITERAL:
      ce = IntConstExpression();
      break;
    case LONG_INTEGER_LITERAL:
      ce = LongConstExpression();
      break;
    case FLOATING_POINT_LITERAL:
      ce = FloatConstExpression();
      break;
    case DOUBLE_POINT_LITERAL:
      ce = DoubleConstExpression();
      break;
    case CHARACTER_LITERAL:
      ce = CharConstExpression();
      break;
    case NULL:
      ce = NullConstExpression();
      break;
    case STRING_LITERAL:
      ce = StringConstExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ce;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstBoolExpr BooleanConstExpression() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case TRUE:
      t= jj_consume_token(TRUE);
      break;
    case FALSE:
      t= jj_consume_token(FALSE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return (ConstBoolExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstIntExpr IntConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(INTEGER_LITERAL);
          {if (true) return (ConstIntExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstLongExpr LongConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(LONG_INTEGER_LITERAL);
          {if (true) return (ConstLongExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstFloatExpr FloatConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(FLOATING_POINT_LITERAL);
          {if (true) return (ConstFloatExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstDoubleExpr DoubleConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(DOUBLE_POINT_LITERAL);
          {if (true) return (ConstDoubleExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstCharExpr CharConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(CHARACTER_LITERAL);
          {if (true) return (ConstCharExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstNullExpr NullConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(NULL);
          {if (true) return (ConstNullExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstStringExpr StringConstExpression() throws ParseException {
  Token t, t1;
    t= jj_consume_token(STRING_LITERAL);
    label_55:
    while (true) {
      if (getToken(1).kind==PLUS
                       && getToken(2).kind==STRING_LITERAL) {
        ;
      } else {
        break label_55;
      }
      jj_consume_token(PLUS);
      t1= jj_consume_token(STRING_LITERAL);
                        t.image = t.image.substring(0,t.image.length()-1)+t1.image.substring(1);
                        t.endLine = t1.endLine;
                        t.endColumn = t1.endColumn;
    }
          {if (true) return (ConstStringExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNewExpression NewExpression() throws ParseException {
        Token t;
        boolean old_mode;
        Struct clazz;
        ASTNewExpression ne = new ASTNewExpression();
    t= jj_consume_token(NEW);
                  ne.setPos(t.getPos());
    ne.type = NArrType();
    jj_consume_token(LPAREN);
    if (jj_2_73(1)) {
      ne.args += ExpressionNT(null);
      label_56:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_56;
        }
        jj_consume_token(COMMA);
        ne.args += ExpressionNT(null);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    if (jj_2_74(2147483647)) {
                        old_mode = interface_only;
                        interface_only = false;
                        ne.clazz = clazz = mkStruct(null, 0, new ASTModifiers(), ne);
                        PassInfo.push(clazz);
      try {
        TypeBodyDeclaration(clazz);
      } finally {
                        interface_only = old_mode; PassInfo.pop(clazz);
      }
    } else {
      ;
    }
          {if (true) return ne;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNewArrayExpression NewArrayExpression() throws ParseException {
  Token t; int dim=0; ASTNewArrayExpression ne = new ASTNewArrayExpression();
    t= jj_consume_token(NEW);
                ne.setPos(t.getPos());
                t = null;
    ne.type = NArrType();
    label_57:
    while (true) {
      jj_consume_token(LBRACKET);
      ne.args += ExpressionNT(null);
      jj_consume_token(RBRACKET);
                  dim += 1;
      if (jj_2_75(2)) {
        ;
      } else {
        break label_57;
      }
    }
    label_58:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_58;
      }
      jj_consume_token(OPERATOR_LRBRACKETS);
                  dim += 1;
    }
                ne.dim = dim;
                {if (true) return ne;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNewInitializedArrayExpression NewInitializedArrayExpression() throws ParseException {
  Token t; int dim=0; ASTNewInitializedArrayExpression ne = new ASTNewInitializedArrayExpression();
    t= jj_consume_token(NEW);
                ne.setPos(t.getPos());
                t = null;
    ne.type = NArrType();
    label_59:
    while (true) {
      jj_consume_token(OPERATOR_LRBRACKETS);
                  dim += 1;
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_59;
      }
    }
    jj_consume_token(LBRACE);
    if (jj_2_77(1)) {
      ne.args += VariableInitializer();
      label_60:
      while (true) {
        if (jj_2_76(2)) {
          ;
        } else {
          break label_60;
        }
        jj_consume_token(COMMA);
        ne.args += VariableInitializer();
      }
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
                ne.dim = dim;
                {if (true) return ne;}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  static final public Statement Statement() throws ParseException {
  Statement st;
    if (labledStatementLA()) {
      st = LabeledStatement();
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        st = Block();
        break;
      case SEMICOLON:
        st = EmptyStatement();
        break;
      case SWITCH:
        st = SwitchStatement();
        break;
      case IF:
        st = IfStatement();
        break;
      case WHILE:
        st = WhileStatement();
        break;
      case DO:
        st = DoStatement();
        break;
      case FOR:
        st = ForStatement();
        break;
      case FOREACH:
        st = ForEachStatement();
        break;
      case BREAK:
        st = BreakStatement();
        break;
      case CONTINUE:
        st = ContinueStatement();
        break;
      case RETURN:
        st = ReturnStatement();
        break;
      case THROW:
        st = ThrowStatement();
        break;
      case SYNCHRONIZED:
        st = SynchronizedStatement();
        break;
      case WITH:
        st = WithStatement();
        break;
      case TRY:
        st = TryStatement();
        break;
      case GOTO:
        st = GotoStatement();
        break;
      case REPARSE_STATEMENT:
        st = ReparseStatement();
        break;
      default:
        if (jj_2_78(1)) {
          st = StatementExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement ReparseStatement() throws ParseException {
  Token t;
    t= jj_consume_token(REPARSE_STATEMENT);
                ASTReparseStatement st = new ASTReparseStatement();
                st.set(t);
                {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement LabeledStatement() throws ParseException {
  LabeledStat st = new LabeledStat();
    st.ident = Name();
    jj_consume_token(COLON);
          st.pos = getToken(0).getPos();
    st.stat = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockStat PrescannedBlock(PrescannedBody b) throws ParseException {
        Token t;
        // Skip to the start of prescanned body
        Token tk;
        for(;;) {
                tk = getToken(1);
                if( tk.beginLine==b.lineno && tk.beginColumn==b.columnno )
                        break;
                if( tk.kind == EOF ) {
                        throw new CompilerException(
                                (b.lineno <<11) | (b.columnno & 0x3FF),
                                "Expected to find start of block after scanning. Have you changed the file?"
                        );
                }
                getNextToken();
        }
        BlockStat bl;
    bl= Block();
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockStat Block() throws ParseException {
  boolean old_declMode;
    jj_consume_token(LBRACE);
                BlockStat bl = new BlockStat();
                bl.setPos(getToken(1).getPos());
                PassInfo.push(bl);
                old_declMode = declMode;
                declMode = false;
    try {
      label_61:
      while (true) {
        if (jj_2_79(1)) {
          ;
        } else {
          break label_61;
        }
        BlockStatement(bl.stats);
      }
    } finally {
                    declMode = old_declMode; PassInfo.pop(bl);
    }
    jj_consume_token(RBRACE);
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  static final public RuleBlock PrescannedRuleBlock(PrescannedBody b) throws ParseException {
        Token t;
        // Skip to the start of prescanned body
        Token tk;
        for(;;) {
                tk = getToken(1);
                if( tk.beginLine==b.lineno && tk.beginColumn==b.columnno )
                        break;
                if( tk.kind == EOF ) {
                        throw new CompilerException(
                                (b.lineno <<11) | (b.columnno & 0x3FF),
                                "Expected to find start of block after scanning. Have you changed the file?"
                        );
                }
                getNextToken();
        }
        RuleBlock bl;
    bl= RuleBlock();
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  static final public RuleBlock RuleBlock() throws ParseException {
  boolean old_declMode;
    jj_consume_token(LBRACE);
                RuleBlock bl = new RuleBlock();
                bl.setPos(getToken(1).getPos());
                PassInfo.push(bl);
                old_declMode = declMode;
                declMode = false;
    try {
      bl.node = RuleOrExpression();
    } finally {
                declMode = old_declMode;
                PassInfo.pop(bl);
    }
    jj_consume_token(RBRACE);
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockStat CondBlock() throws ParseException {
                BlockStat bl = new BlockStat();
                bl.setPos(getToken(1).getPos());
                PassInfo.push(bl);
    try {
      switch (jj_nt.kind) {
      case LBRACE:
        jj_consume_token(LBRACE);
        label_62:
        while (true) {
          bl.stats += CondStatement();
          if (jj_2_80(1)) {
            ;
          } else {
            break label_62;
          }
        }
        jj_consume_token(RBRACE);
        break;
      default:
        if (jj_2_81(1)) {
          bl.stats += CondStatement();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
                    {PassInfo.pop(bl); }
    }
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  static final public void BlockStatement(NArrENodes stats) throws ParseException {
  boolean old_declMode; ASTModifiers modifiers; TypeRef tp; Struct clazz; Var var;
    if (jj_2_82(2147483647)) {
                        old_declMode = declMode;
                        declMode = true;
      try {
        modifiers = Modifiers();
        clazz = TypeDeclaration(modifiers, stats.getParent());
                          stats += new LocalStructDecl(clazz);
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
      } finally {
                        declMode = old_declMode;
      }
    } else if (jj_2_83(2147483647)) {
      modifiers = Modifiers();
      tp = Type();
      var = VarDecl(modifiers, tp, true);
                  stats += new VarDecl(var);
      label_63:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_63;
        }
        jj_consume_token(COMMA);
        var = VarDecl(modifiers, tp, false);
                          stats += new VarDecl(var);
      }
      jj_consume_token(SEMICOLON);
    } else {
      stats += Statement();
    }
  }

  static final public CondStat CondStatement() throws ParseException {
  Token t = getToken(1); CondStat st = new CondStat();
    st.cond = ExpressionNT(noColonTokenSet);
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
                  t = null;
      st.message = Expression();
      break;
    default:
      ;
    }
                if( t != null ) {
                        int pos = t.getPos();
                        StringBuffer sb = new StringBuffer();
                        while( t != null && t != getToken(1) ) {
                                sb.append(t.image).append(' ');
                                t = t.next;
                        }
                        ConstStringExpr e = new ConstStringExpr(KString.from(sb.toString()));
                        e.pos = pos;
                        st.message = e;
                }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement EmptyStatement() throws ParseException {
  Token t; EmptyStat st = new EmptyStat();
    t= jj_consume_token(SEMICOLON);
                st.setPos(t.getPos());
                {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement StatementExpression() throws ParseException {
  ExprStat st = new ExprStat();
    st.expr = ExpressionNT(null);
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchStat SwitchStatement() throws ParseException {
  SwitchStat st = new SwitchStat();
    jj_consume_token(SWITCH);
          st.setPos(getToken(0).getPos());
    jj_consume_token(LPAREN);
    st.sel = ExpressionNT(null);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_64:
    while (true) {
      st.cases += CaseStatements();
      switch (jj_nt.kind) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        break label_64;
      }
    }
    jj_consume_token(RBRACE);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseLabel CaseStatements() throws ParseException {
  CaseLabel st;
    if (jj_2_84(2147483647)) {
      st = PizzaCase();
    } else {
      switch (jj_nt.kind) {
      case CASE:
      case _DEFAULT:
        st = NormalCase();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseLabel NormalCase() throws ParseException {
  CaseLabel c = new CaseLabel();
    switch (jj_nt.kind) {
    case CASE:
      jj_consume_token(CASE);
                          c.pos = getToken(0).getPos();
      c.val = ExpressionNT(noColonTokenSet);
      jj_consume_token(COLON);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
                                  c.pos = getToken(0).getPos();
      jj_consume_token(COLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_65:
    while (true) {
      if (jj_2_85(1)) {
        ;
      } else {
        break label_65;
      }
      BlockStatement(c.stats);
    }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseLabel PizzaCase() throws ParseException {
  Token t; ASTModifiers modifiers; CaseLabel c = new CaseLabel();
    jj_consume_token(CASE);
                          c.pos = getToken(0).getPos();
    c.val = QName();
    jj_consume_token(LPAREN);
    if (jj_2_86(1)) {
      modifiers = Modifiers();
      c.pattern += PizzaCaseFormalParameter(modifiers);
      label_66:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_66;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        c.pattern += PizzaCaseFormalParameter(modifiers);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(COLON);
    label_67:
    while (true) {
      if (jj_2_87(1)) {
        ;
      } else {
        break label_67;
      }
      BlockStatement(c.stats);
    }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public IfElseStat IfStatement() throws ParseException {
  IfElseStat st = new IfElseStat(); ASTOperator not = null;
    jj_consume_token(IF);
          st.setPos(getToken(0).getPos());
    if (jj_2_88(2147483647)) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(LPAREN);
    st.cond = ExpressionNT(null);
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(RPAREN);
    st.thenSt = Statement();
    switch (jj_nt.kind) {
    case ELSE:
      jj_consume_token(ELSE);
      st.elseSt = Statement();
      break;
    default:
      ;
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStat WhileStatement() throws ParseException {
  WhileStat st = new WhileStat(); ASTOperator not = null;
    jj_consume_token(WHILE);
          st.setPos(getToken(0).getPos());
    if (jj_2_89(2147483647)) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(LPAREN);
    st.cond = ExpressionNT(null);
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public DoWhileStat DoStatement() throws ParseException {
  DoWhileStat st = new DoWhileStat(); ASTOperator not = null;
    jj_consume_token(DO);
          st.setPos(getToken(0).getPos());
    st.body = Statement();
    jj_consume_token(WHILE);
    if (jj_2_90(2147483647)) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(LPAREN);
    st.cond = ExpressionNT(null);
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public ForStat ForStatement() throws ParseException {
  ForStat st = new ForStat();
    jj_consume_token(FOR);
          st.setPos(getToken(0).getPos());
    jj_consume_token(LPAREN);
    st.init = ForInit();
    if (jj_2_91(1)) {
      st.cond = ExpressionNT(null);
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
    if (jj_2_92(1)) {
      st.iter = CommaExpression();
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public ForEachStat ForEachStatement() throws ParseException {
  ASTModifiers modifiers; ForEachStat st = new ForEachStat();
    jj_consume_token(FOREACH);
          st.setPos(getToken(0).getPos());
    jj_consume_token(LPAREN);
    if (jj_2_93(2147483647)) {
      modifiers = Modifiers();
      st.var = PizzaCaseFormalParameter(modifiers);
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
    st.container = ExpressionNT(null);
    switch (jj_nt.kind) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      if (jj_2_94(1)) {
        st.cond = ExpressionNT(null);
      } else {
        ;
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public ENode ForInit() throws ParseException {
  ASTModifiers modifiers; ENode n; ASTModifiers modifiers; TypeRef tp; ForInit fi;
    if (jj_2_95(2147483647)) {
      modifiers = Modifiers();
                  fi = new ForInit();
      tp = Type();
      fi.decls += VarDecl(modifiers, tp, true);
      label_68:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_68;
        }
        jj_consume_token(COMMA);
        fi.decls += VarDecl(modifiers, tp, false);
      }
      jj_consume_token(SEMICOLON);
                  n = fi;
    } else if (jj_2_96(1)) {
      n = CommaExpression();
      jj_consume_token(SEMICOLON);
    } else {
      switch (jj_nt.kind) {
      case SEMICOLON:
        n = EmptyStatement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement GotoStatement() throws ParseException {
  Statement st; ENode expr; ASTIdentifier id;
    jj_consume_token(GOTO);
    switch (jj_nt.kind) {
    case CASE:
      jj_consume_token(CASE);
                        st = new GotoCaseStat();
                        st.setPos(getToken(0).getPos());
      expr = ExpressionNT(null);
                  ((GotoCaseStat)st).expr = expr;
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
                        st = new GotoCaseStat();
                        st.setPos(getToken(0).getPos());
      break;
    case IDENTIFIER:
                        st = new GotoStat();
                        st.setPos(getToken(0).getPos());
      id = Name();
                  ((GotoStat)st).ident = id;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public BreakStat BreakStatement() throws ParseException {
  BreakStat st = new BreakStat();
    jj_consume_token(BREAK);
          st.setPos(getToken(0).getPos());
    switch (jj_nt.kind) {
    case IDENTIFIER:
      st.ident = Name();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public ContinueStat ContinueStatement() throws ParseException {
  ContinueStat st = new ContinueStat();
    jj_consume_token(CONTINUE);
          st.setPos(getToken(0).getPos());
    switch (jj_nt.kind) {
    case IDENTIFIER:
      st.ident = Name();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStat ReturnStatement() throws ParseException {
  ReturnStat st = new ReturnStat();
    jj_consume_token(RETURN);
          st.setPos(getToken(0).getPos());
    if (jj_2_97(1)) {
      st.expr = ExpressionNT(null);
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public ThrowStat ThrowStatement() throws ParseException {
  ThrowStat st = new ThrowStat();
    jj_consume_token(THROW);
          st.setPos(getToken(0).getPos());
    st.expr = ExpressionNT(null);
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public SynchronizedStat SynchronizedStatement() throws ParseException {
  SynchronizedStat st = new SynchronizedStat();
    jj_consume_token(SYNCHRONIZED);
          st.setPos(getToken(0).getPos());
    jj_consume_token(LPAREN);
    st.expr = ExpressionNT(null);
    jj_consume_token(RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public WithStat WithStatement() throws ParseException {
  WithStat st = new WithStat();
    jj_consume_token(WITH);
          st.setPos(getToken(0).getPos());
    jj_consume_token(LPAREN);
    st.expr = ExpressionNT(null);
    jj_consume_token(RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public TryStat TryStatement() throws ParseException {
  ASTModifiers modifiers; TryStat st = new TryStat();
    jj_consume_token(TRY);
          st.setPos(getToken(0).getPos());
    st.body = Block();
    label_69:
    while (true) {
      switch (jj_nt.kind) {
      case CATCH:
        ;
        break;
      default:
        break label_69;
      }
      st.catchers += CatchInfo();
    }
    switch (jj_nt.kind) {
    case FINALLY:
      st.finally_catcher = FinallyInfo();
      break;
    default:
      ;
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public CatchInfo CatchInfo() throws ParseException {
  ASTModifiers modifiers; CatchInfo st = new CatchInfo();
    jj_consume_token(CATCH);
          st.setPos(getToken(0).getPos());
    jj_consume_token(LPAREN);
    modifiers = Modifiers();
    st.arg = PizzaCaseFormalParameter(modifiers);
    jj_consume_token(RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public FinallyInfo FinallyInfo() throws ParseException {
  Token t; FinallyInfo st = new FinallyInfo();
    jj_consume_token(FINALLY);
          st.setPos(getToken(0).getPos());
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  static final private boolean jj_3R_145() {
    if (jj_scan_token(OPERATOR_ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_216()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_412()) {
    jj_scanpos = xsp;
    if (jj_3R_413()) {
    jj_scanpos = xsp;
    if (jj_3R_414()) {
    jj_scanpos = xsp;
    if (jj_3R_415()) return true;
    }
    }
    }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_69() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_411() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  static final private boolean jj_3_68() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    return false;
  }

  static final private boolean jj_3_66() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_67() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  static final private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_65() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_386() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_375() {
    if (jj_3R_386()) return true;
    return false;
  }

  static final private boolean jj_3_64() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_27() {
    if (jj_3R_95()) return true;
    return false;
  }

  static final private boolean jj_3R_410() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_119()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  static final private boolean jj_3R_402() {
    if (jj_3R_411()) return true;
    return false;
  }

  static final private boolean jj_3R_156() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_157() {
    if (jj_3R_213()) return true;
    return false;
  }

  static final private boolean jj_3_63() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_112()) return true;
    Token xsp;
    if (jj_scan_token(161)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(161)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_155() {
    if (jj_3R_212()) return true;
    return false;
  }

  static final private boolean jj_3R_401() {
    if (jj_3R_410()) return true;
    return false;
  }

  static final private boolean jj_3R_154() {
    if (jj_3R_211()) return true;
    return false;
  }

  static final private boolean jj_3R_153() {
    if (jj_3R_210()) return true;
    return false;
  }

  static final private boolean jj_3R_350() {
    if (jj_scan_token(ALIAS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_375()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_379() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static final private boolean jj_3R_152() {
    if (jj_3R_209()) return true;
    return false;
  }

  static final private boolean jj_3_59() {
    if (jj_3R_77()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  static final private boolean jj_3_62() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_282() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_229()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_401()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_402()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_61() {
    if (jj_3R_111()) return true;
    return false;
  }

  static final private boolean jj_3_60() {
    if (jj_3R_110()) return true;
    return false;
  }

  static final private boolean jj_3R_354() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_118()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_379()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_151() {
    if (jj_3R_208()) return true;
    return false;
  }

  static final private boolean jj_3R_281() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  static final private boolean jj_3R_175() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3R_97() {
    if (jj_3R_77()) return true;
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_158()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_380() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  static final private boolean jj_3R_310() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_280() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  static final private boolean jj_3R_381() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3R_426() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3R_208() {
    if (jj_3R_77()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  static final private boolean jj_3R_279() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_96() {
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_380()) jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_381()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_58() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_310()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_26() {
    if (jj_3R_77()) return true;
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_426()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_304() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_174() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_278() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_97()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_97() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_113() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_57() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_304()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = !Kiev.javaMode && (getToken(1).image.equals("_"));
    lookingAhead = false;
    if (!jj_semLA || jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_400() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_277() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_400()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_385() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3_24() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  static final private boolean jj_3R_111() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_54() {
    if (jj_3R_105()) return true;
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_3R_77()) return true;
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_385()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_399() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_276() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_399()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_25() {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(119)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_212() {
    if (jj_scan_token(REPARSE_EXPRESSION)) return true;
    return false;
  }

  static final private boolean jj_3R_405() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3_55() {
    if (jj_3R_106()) return true;
    return false;
  }

  static final private boolean jj_3R_109() {
    if (jj_3R_159()) return true;
    return false;
  }

  static final private boolean jj_3R_108() {
    if (jj_3R_78()) return true;
    return false;
  }

  static final private boolean jj_3R_404() {
    if (jj_scan_token(_DEFAULT)) return true;
    return false;
  }

  static final private boolean jj_3R_107() {
    if (jj_3R_102()) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  static final private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("instanceof");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_107()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = operatorLA(1);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3_55()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_23() {
    if (jj_3R_93()) return true;
    return false;
  }

  static final private boolean jj_3R_204() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_144() {
    if (jj_3R_204()) return true;
    return false;
  }

  static final private boolean jj_3R_384() {
    if (jj_scan_token(ASSIGN2)) return true;
    return false;
  }

  static final private boolean jj_3R_403() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_93() {
    Token xsp;
    if (jj_3_56()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_297() {
    if (jj_scan_token(REINTERP)) return true;
    return false;
  }

  static final private boolean jj_3R_422() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_342()) return true;
    return false;
  }

  static final private boolean jj_3R_409() {
    if (jj_3R_269()) return true;
    return false;
  }

  static final private boolean jj_3R_369() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_3R_384()) return true;
    }
    if (jj_3R_94()) return true;
    return false;
  }

  static final private boolean jj_3R_283() {
    if (jj_scan_token(GOTO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) {
    jj_scanpos = xsp;
    if (jj_3R_405()) return true;
    }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_3R_93()) return true;
    return false;
  }

  static final private boolean jj_3_96() {
    if (jj_3R_120()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_95() {
    if (jj_3R_70()) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_118()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(161)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_207() {
    if (jj_3R_212()) return true;
    return false;
  }

  static final private boolean jj_3_53() {
    if (jj_3R_78()) return true;
    return false;
  }

  static final private boolean jj_3R_368() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3R_295() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_3R_297()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_206() {
    if (jj_3R_110()) return true;
    return false;
  }

  static final private boolean jj_3R_342() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_368()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_369()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_159() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_376() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_342()) return true;
    return false;
  }

  static final private boolean jj_3R_408() {
    if (jj_3R_70()) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_342()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_422()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_382() {
    if (jj_scan_token(ASSIGN2)) return true;
    return false;
  }

  static final private boolean jj_3_94() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_150() {
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_149() {
    if (jj_3R_205()) return true;
    return false;
  }

  static final private boolean jj_3R_396() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_408()) {
    jj_scanpos = xsp;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3R_409()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_99() {
    if (jj_3R_77()) return true;
    if (jj_3R_342()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_376()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_93() {
    if (jj_3R_70()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  static final private boolean jj_3R_362() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_3R_382()) return true;
    }
    if (jj_3R_94()) return true;
    return false;
  }

  static final private boolean jj_3R_398() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_335() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_334()) return true;
    return false;
  }

  static final private boolean jj_3R_105() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = castLA_Start();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_150()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_397() {
    if (jj_3R_70()) return true;
    if (jj_3R_119()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_361() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3R_104() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static final private boolean jj_3R_334() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_361()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_362()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_3R_148()) return true;
    return false;
  }

  static final private boolean jj_3_52() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = !Kiev.javaMode && operatorLA(1) && checkNoSpace(getToken(0),getToken(1));
    lookingAhead = false;
    if (!jj_semLA || jj_3R_103()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = Kiev.javaMode && getToken(1).kind==GT && checkNoSpace(getToken(0),getToken(1));
    lookingAhead = false;
    if (!jj_semLA || jj_3R_104()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_131() {
    if (jj_scan_token(OPERATOR_ID)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_275() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_397()) jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    xsp = jj_scanpos;
    if (jj_3R_398()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_224()) return true;
    return false;
  }

  static final private boolean jj_3_92() {
    if (jj_3R_120()) return true;
    return false;
  }

  static final private boolean jj_3R_299() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static final private boolean jj_3R_130() {
    if (jj_3R_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_91() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_137() {
    if (jj_3R_77()) return true;
    if (jj_3R_334()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_335()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_22() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = !Kiev.javaMode;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_131()) return true;
    }
    return false;
  }

  static final private boolean jj_3_90() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  static final private boolean jj_3_20() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_274() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_396()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_91()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3_92()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_224()) return true;
    return false;
  }

  static final private boolean jj_3R_203() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_21() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_395() {
    if (jj_3R_78()) return true;
    return false;
  }

  static final private boolean jj_3R_143() {
    if (jj_3R_176()) return true;
    return false;
  }

  static final private boolean jj_3_18() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3_89() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  static final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  static final private boolean jj_3_19() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_273() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_224()) return true;
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_395()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_141() {
    if (jj_3R_203()) return true;
    return false;
  }

  static final private boolean jj_3R_140() {
    if (jj_3R_176()) return true;
    return false;
  }

  static final private boolean jj_3R_394() {
    if (jj_3R_78()) return true;
    return false;
  }

  static final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static final private boolean jj_3R_298() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_272() {
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_394()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_224()) return true;
    return false;
  }

  static final private boolean jj_3_88() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  static final private boolean jj_3R_393() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_224()) return true;
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_3R_142()) return true;
    return false;
  }

  static final private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_392() {
    if (jj_3R_78()) return true;
    return false;
  }

  static final private boolean jj_3R_142() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_298()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_264() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_429() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  static final private boolean jj_3R_263() {
    if (jj_3R_285()) return true;
    return false;
  }

  static final private boolean jj_3R_271() {
    if (jj_scan_token(IF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_224()) return true;
    xsp = jj_scanpos;
    if (jj_3R_393()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_262() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3_87() {
    if (jj_3R_115()) return true;
    return false;
  }

  static final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_86() {
    if (jj_3R_70()) return true;
    if (jj_3R_119()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_429()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_176() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_264()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_365() {
    if (jj_scan_token(PCUT)) return true;
    return false;
  }

  static final private boolean jj_3R_424() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(COLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_383() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(IS_ONE_OF)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  static final private boolean jj_3_85() {
    if (jj_3R_115()) return true;
    return false;
  }

  static final private boolean jj_3R_428() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static final private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_427() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static final private boolean jj_3R_364() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(IS_ONE_OF)) return true;
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_383()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_84() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_293() {
    if (jj_scan_token(NO_READ_WRITE)) return true;
    return false;
  }

  static final private boolean jj_3R_292() {
    if (jj_scan_token(READ_WRITE)) return true;
    return false;
  }

  static final private boolean jj_3R_367() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_291() {
    if (jj_scan_token(WRITE_ONLY)) return true;
    return false;
  }

  static final private boolean jj_3R_290() {
    if (jj_scan_token(READ_ONLY)) return true;
    return false;
  }

  static final private boolean jj_3R_287() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_425() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_427()) {
    jj_scanpos = xsp;
    if (jj_3R_428()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_421() {
    if (jj_3R_425()) return true;
    return false;
  }

  static final private boolean jj_3R_126() {
    return false;
  }

  static final private boolean jj_3R_363() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(IS_THE)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  static final private boolean jj_3R_420() {
    if (jj_3R_424()) return true;
    return false;
  }

  static final private boolean jj_3R_296() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_287()) return true;
    return false;
  }

  static final private boolean jj_3R_366() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_294() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_287()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_296()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_288() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_287()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_341() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = Kiev.enabled(Ext.Access);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_126()) return true;
    if (jj_scan_token(ACCESS)) return true;
    if (jj_3R_287()) return true;
    xsp = jj_scanpos;
    if (jj_3R_288()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_407() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_420()) {
    jj_scanpos = xsp;
    if (jj_3R_421()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_391() {
    if (jj_3R_407()) return true;
    return false;
  }

  static final private boolean jj_3R_340() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_93()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_366()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_339() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_309()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_289() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_338() {
    if (jj_3R_365()) return true;
    return false;
  }

  static final private boolean jj_3R_286() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_270() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3R_391()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_391()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_337() {
    if (jj_3R_364()) return true;
    return false;
  }

  static final private boolean jj_3R_114() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_125() {
    if (jj_scan_token(PACKED)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_336() {
    if (jj_3R_363()) return true;
    return false;
  }

  static final private boolean jj_3R_194() {
    if (jj_scan_token(WRAPPER)) return true;
    return false;
  }

  static final private boolean jj_3R_193() {
    if (jj_scan_token(FORWARD)) return true;
    return false;
  }

  static final private boolean jj_3R_192() {
    if (jj_scan_token(VIRTUAL)) return true;
    return false;
  }

  static final private boolean jj_3R_191() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  static final private boolean jj_3R_269() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_190() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  static final private boolean jj_3R_189() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  static final private boolean jj_3R_316() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER
                 && getToken(2).kind == IS_THE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_336()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER
                 && getToken(2).kind == IS_ONE_OF;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_337()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == PCUT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_338()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == LBRACE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_339()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == WHILE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_188() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  static final private boolean jj_3R_187() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  static final private boolean jj_3R_317() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_316()) return true;
    return false;
  }

  static final private boolean jj_3R_186() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  static final private boolean jj_3R_185() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static final private boolean jj_3R_184() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  static final private boolean jj_3R_117() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  static final private boolean jj_3R_183() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  static final private boolean jj_3R_182() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  static final private boolean jj_3R_202() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_201()) return true;
    return false;
  }

  static final private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_230() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  static final private boolean jj_3R_313() {
    if (jj_3R_316()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_317()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_406() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  static final private boolean jj_3R_314() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_313()) return true;
    return false;
  }

  static final private boolean jj_3R_201() {
    if (jj_3R_102()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_374() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  static final private boolean jj_3R_343() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_342()) return true;
    return false;
  }

  static final private boolean jj_3R_309() {
    if (jj_3R_313()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_314()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_139() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_201()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static final private boolean jj_3R_116() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_406()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_173() {
    if (jj_3R_224()) return true;
    return false;
  }

  static final private boolean jj_3R_423() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  static final private boolean jj_3_83() {
    if (jj_3R_70()) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_3R_70()) return true;
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_374()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_120() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_423()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_172() {
    if (jj_3R_70()) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_342()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_343()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_82() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_80() {
    if (jj_3R_116()) return true;
    return false;
  }

  static final private boolean jj_3_51() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_320() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_171() {
    if (jj_3R_70()) return true;
    if (jj_3R_122()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_81() {
    if (jj_3R_116()) return true;
    return false;
  }

  static final private boolean jj_3R_118() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_133() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_102()) return true;
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_320()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_3R_77()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(161)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_147() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3_80()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_3R_87()) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_315() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_222()) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_scan_token(RULE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_102() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_3R_137()) return true;
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_3R_136()) return true;
    return false;
  }

  static final private boolean jj_3R_311() {
    if (jj_3R_102()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_3R_135()) return true;
    return false;
  }

  static final private boolean jj_3R_195() {
    if (jj_scan_token(REPARSE_TYPE)) return true;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_3R_134()) return true;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_3R_133()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_3R_122()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3_81()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_3R_132()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_86()) return true;
    return false;
  }

  static final private boolean jj_3R_241() {
    if (jj_scan_token(RULE)) return true;
    return false;
  }

  static final private boolean jj_3R_240() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static final private boolean jj_3R_239() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static final private boolean jj_3R_238() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static final private boolean jj_3R_237() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static final private boolean jj_3R_236() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static final private boolean jj_3R_235() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  static final private boolean jj_3R_234() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  static final private boolean jj_3R_233() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static final private boolean jj_3R_312() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_311()) return true;
    return false;
  }

  static final private boolean jj_3R_232() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_266() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  static final private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_50() {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_101() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  static final private boolean jj_3R_228() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_309()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_308() {
    if (jj_3R_70()) return true;
    if (jj_3R_311()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_312()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_3R_76()) return true;
    return false;
  }

  static final private boolean jj_3R_197() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  static final private boolean jj_3R_306() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_170() {
    if (jj_3R_223()) return true;
    return false;
  }

  static final private boolean jj_3R_169() {
    if (jj_3R_205()) return true;
    return false;
  }

  static final private boolean jj_3R_348() {
    if (jj_3R_285()) return true;
    return false;
  }

  static final private boolean jj_3R_267() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  static final private boolean jj_3R_168() {
    if (jj_3R_195()) return true;
    return false;
  }

  static final private boolean jj_3R_347() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3R_373() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  static final private boolean jj_3_79() {
    if (jj_3R_115()) return true;
    return false;
  }

  static final private boolean jj_3R_180() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_scan_token(RULE)) return true;
    return false;
  }

  static final private boolean jj_3R_346() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_373()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_179() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_372() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  static final private boolean jj_3R_371() {
    if (jj_3R_112()) return true;
    return false;
  }

  static final private boolean jj_3R_243() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static final private boolean jj_3R_370() {
    if (jj_3R_205()) return true;
    return false;
  }

  static final private boolean jj_3R_345() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_372()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_265() {
    if (jj_3R_76()) return true;
    return false;
  }

  static final private boolean jj_3R_178() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_3R_102()) return true;
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_346()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_223() {
    if (jj_3R_118()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_344() {
    if (jj_scan_token(EXTENDS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_231() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_229() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_227() {
    if (jj_3R_223()) return true;
    return false;
  }

  static final private boolean jj_3R_226() {
    if (jj_3R_205()) return true;
    return false;
  }

  static final private boolean jj_3R_225() {
    if (jj_3R_195()) return true;
    return false;
  }

  static final private boolean jj_3R_177() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_102()) return true;
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_231()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_129() {
    if (jj_3R_197()) return true;
    return false;
  }

  static final private boolean jj_3R_128() {
    if (jj_3R_196()) return true;
    return false;
  }

  static final private boolean jj_3R_127() {
    if (jj_3R_195()) return true;
    return false;
  }

  static final private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    }
    }
    if (jj_3R_306()) return true;
    return false;
  }

  static final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = Kiev.enabled(Ext.With);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_129()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_181() {
    return false;
  }

  static final private boolean jj_3R_268() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_224()) return true;
    return false;
  }

  static final private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_181()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3_48() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_284() {
    if (jj_scan_token(REPARSE_STATEMENT)) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_78()) return true;
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_3R_138()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_323() {
    if (jj_3R_138()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3_78() {
    if (jj_3R_114()) return true;
    return false;
  }

  static final private boolean jj_3R_261() {
    if (jj_3R_284()) return true;
    return false;
  }

  static final private boolean jj_3R_349() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  static final private boolean jj_3R_260() {
    if (jj_3R_283()) return true;
    return false;
  }

  static final private boolean jj_3R_352() {
    if (jj_3R_378()) return true;
    return false;
  }

  static final private boolean jj_3R_259() {
    if (jj_3R_282()) return true;
    return false;
  }

  static final private boolean jj_3R_351() {
    if (jj_3R_377()) return true;
    return false;
  }

  static final private boolean jj_3R_322() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_258() {
    if (jj_3R_281()) return true;
    return false;
  }

  static final private boolean jj_3R_257() {
    if (jj_3R_280()) return true;
    return false;
  }

  static final private boolean jj_3R_256() {
    if (jj_3R_279()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_77()) return true;
    return false;
  }

  static final private boolean jj_3R_255() {
    if (jj_3R_278()) return true;
    return false;
  }

  static final private boolean jj_3_47() {
    if (jj_3R_70()) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  static final private boolean jj_3R_254() {
    if (jj_3R_277()) return true;
    return false;
  }

  static final private boolean jj_3R_253() {
    if (jj_3R_276()) return true;
    return false;
  }

  static final private boolean jj_3R_252() {
    if (jj_3R_275()) return true;
    return false;
  }

  static final private boolean jj_3R_321() {
    if (jj_3R_350()) return true;
    return false;
  }

  static final private boolean jj_3R_251() {
    if (jj_3R_274()) return true;
    return false;
  }

  static final private boolean jj_3R_250() {
    if (jj_3R_273()) return true;
    return false;
  }

  static final private boolean jj_3_46() {
    if (jj_3R_70()) return true;
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_349()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_249() {
    if (jj_3R_272()) return true;
    return false;
  }

  static final private boolean jj_3R_248() {
    if (jj_3R_271()) return true;
    return false;
  }

  static final private boolean jj_3R_247() {
    if (jj_3R_270()) return true;
    return false;
  }

  static final private boolean jj_3R_246() {
    if (jj_3R_269()) return true;
    return false;
  }

  static final private boolean jj_3R_245() {
    if (jj_3R_229()) return true;
    return false;
  }

  static final private boolean jj_3R_244() {
    if (jj_3R_268()) return true;
    return false;
  }

  static final private boolean jj_3R_224() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = labledStatementLA();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3_78()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_45() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_76() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  static final private boolean jj_3_44() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_134() {
    if (jj_scan_token(RULE)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_321()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_322()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    return false;
  }

  static final private boolean jj_3_77() {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_76()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(119)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_319() {
    if (jj_3R_102()) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_318() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_300() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3_42() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_41() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_43() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_132() {
    if (jj_scan_token(INVARIANT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_209() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_112()) return true;
    Token xsp;
    if (jj_3R_300()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_300()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3_77()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_390() {
    if (jj_3R_102()) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_301() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3R_389() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3_75() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_39() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3_38() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_378() {
    if (jj_scan_token(ENSURE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_389()) {
    jj_scanpos = xsp;
    if (jj_3R_390()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_40() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_210() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_112()) return true;
    Token xsp;
    if (jj_3_75()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_75()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_301()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_388() {
    if (jj_3R_102()) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3_74() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_387() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_305() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_75()) return true;
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_3R_125()) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_3R_124()) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  static final private boolean jj_3R_302() {
    if (jj_3R_306()) return true;
    return false;
  }

  static final private boolean jj_3R_121() {
    if (jj_3R_176()) return true;
    return false;
  }

  static final private boolean jj_3_37() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_3R_123()) return true;
    return false;
  }

  static final private boolean jj_3_73() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_305()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_71() {
    if (jj_3R_122()) return true;
    return false;
  }

  static final private boolean jj_3R_377() {
    if (jj_scan_token(REQUIRE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_387()) {
    jj_scanpos = xsp;
    if (jj_3R_388()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_70() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_353() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  static final private boolean jj_3R_327() {
    if (jj_3R_138()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_356() {
    if (jj_3R_378()) return true;
    return false;
  }

  static final private boolean jj_3R_211() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_302()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_355() {
    if (jj_3R_377()) return true;
    return false;
  }

  static final private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) return true;
    }
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_72()) return true;
    }
    return false;
  }

  static final private boolean jj_3_34() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  static final private boolean jj_3R_325() {
    if (jj_3R_354()) return true;
    return false;
  }

  static final private boolean jj_3R_324() {
    if (jj_3R_350()) return true;
    return false;
  }

  static final private boolean jj_3_36() {
    if (jj_3R_70()) return true;
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_353()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_242() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_222() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_242()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  static final private boolean jj_3_33() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_221() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static final private boolean jj_3R_360() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_333() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_360()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_135() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_324()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_325()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_326()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_220() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_332() {
    if (jj_3R_138()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_357() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  static final private boolean jj_3R_359() {
    if (jj_3R_378()) return true;
    return false;
  }

  static final private boolean jj_3R_358() {
    if (jj_3R_377()) return true;
    return false;
  }

  static final private boolean jj_3R_331() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_219() {
    if (jj_scan_token(DOUBLE_POINT_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3_30() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  static final private boolean jj_3R_330() {
    if (jj_3R_354()) return true;
    return false;
  }

  static final private boolean jj_3R_329() {
    if (jj_3R_350()) return true;
    return false;
  }

  static final private boolean jj_3R_328() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3R_218() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3_32() {
    if (jj_3R_70()) return true;
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_357()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_217() {
    if (jj_scan_token(LONG_INTEGER_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_216() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_167() {
    if (jj_3R_222()) return true;
    return false;
  }

  static final private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_166() {
    if (jj_3R_221()) return true;
    return false;
  }

  static final private boolean jj_3R_165() {
    if (jj_3R_220()) return true;
    return false;
  }

  static final private boolean jj_3R_136() {
    if (jj_3R_87()) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_328()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_329()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_330()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_331()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_332()) {
    jj_scanpos = xsp;
    if (jj_3R_333()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_200() {
    if (jj_3R_229()) return true;
    return false;
  }

  static final private boolean jj_3R_164() {
    if (jj_3R_219()) return true;
    return false;
  }

  static final private boolean jj_3R_163() {
    if (jj_3R_218()) return true;
    return false;
  }

  static final private boolean jj_3R_162() {
    if (jj_3R_217()) return true;
    return false;
  }

  static final private boolean jj_3R_199() {
    if (jj_3R_228()) return true;
    return false;
  }

  static final private boolean jj_3R_161() {
    if (jj_3R_216()) return true;
    return false;
  }

  static final private boolean jj_3R_160() {
    if (jj_3R_215()) return true;
    return false;
  }

  static final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_72() {
    if (jj_3R_77()) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  static final private boolean jj_3R_307() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  static final private boolean jj_3R_303() {
    if (jj_3R_77()) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  static final private boolean jj_3R_198() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_419() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  static final private boolean jj_3R_418() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static final private boolean jj_3R_417() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3R_416() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3_29() {
    if (jj_3R_78()) return true;
    return false;
  }

  static final private boolean jj_3_71() {
    if (jj_3R_70()) return true;
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_307()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = interface_only;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_198()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = presc instanceof RuleMethod;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_415() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  static final private boolean jj_3R_414() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static final private boolean jj_3R_413() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  static final private boolean jj_3R_412() {
    if (jj_3R_102()) return true;
    return false;
  }

  static final private boolean jj_3_28() {
    if (jj_3R_78()) return true;
    return false;
  }

  static final private boolean jj_3R_146() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(OPERATOR_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_416()) {
    jj_scanpos = xsp;
    if (jj_3R_417()) {
    jj_scanpos = xsp;
    if (jj_3R_418()) {
    jj_scanpos = xsp;
    if (jj_3R_419()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_70() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_213() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == RULE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_303()) {
    jj_scanpos = xsp;
    if (jj_3_72()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_214() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_211()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public kiev040TokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;

  public kiev040(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new kiev040TokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public kiev040(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new kiev040TokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public kiev040(kiev040TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(kiev040TokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

        /*{
	private static Struct mkStruct(ASTIdentifier name, int flags, ASTModifiers modifiers, ASTNode parent) {
		ClazzName clname;
		if (parent instanceof FileUnit) {
			clname = ClazzName.fromOuterAndName(((FileUnit)parent).pkg.clazz,name.name,false,false);
		}
		else if (parent instanceof Struct) {
			clname = ClazzName.fromOuterAndName(PassInfo.clazz,name.name,false,true);
		}
		else if (name != null) {
			// Construct name of local class
			KString bytecode_name =
				KString.from(PassInfo.clazz.name.bytecode_name
					+"$"+PassInfo.clazz.countAnonymouseInnerStructs()
					+"$"+name.name);
			KString fixname = bytecode_name.replace('/','.');
			clname = new ClazzName(fixname,name.name,bytecode_name,false,false);
		}
		else {
			// Local anonymouse class
			KString bytecode_name =
				KString.from(PassInfo.clazz.name.bytecode_name
					+"$"+PassInfo.clazz.countAnonymouseInnerStructs());
			clname = ClazzName.fromBytecodeName(bytecode_name, false);
		}
		Struct clazz = Env.newStruct(clname,PassInfo.clazz,flags|modifiers.getFlags(),true);
		if (name != null)
			clazz.pos  = name.pos;
		else
			clazz.pos  = parent.pos;
		clazz.setResolved(true);
		if (modifiers.acc != null)
			clazz.acc  = modifiers.acc;
		if      (parent instanceof FileUnit)
			clazz.setLocal(false);
		else if (parent instanceof Struct)
			clazz.setLocal(parent.isLocal());
		else
			clazz.setLocal(true);
		foreach (Meta m; modifiers.annotations)
			clazz.meta.set(m);
		return clazz;
	}

	private static TypeArgRef mkTypeArgRef(ASTIdentifier name, ASTNode parent) {
		TypeArgRef arg = new TypeArgRef(name);
		if (parent instanceof Struct) {
			Struct s = (Struct)parent;
			s.args += arg;
		} else {
			//ASTMethodDeclaration m = (ASTMethodDeclaration)parent;
			//m.argtypes += arg;
		}
		return arg;
	}

	private static Constructor mkConstructor(ASTIdentifier id, ASTModifiers modifiers) {
		TypeCallRef tc = new TypeCallRef();
		tc.ret = new TypeRef(Type.tpVoid);
		Constructor meth = new Constructor(tc, modifiers.getFlags());
		meth.pos = id.pos;
		foreach (Meta m; modifiers.annotations)
			meth.meta.set(m);
		if( modifiers.acc != null ) meth.acc = modifiers.acc;
		return meth;
	}
	
	private static Method mkMethod(ASTIdentifier id, ASTModifiers modifiers, TypeRef ret) {
		TypeCallRef tc = new TypeCallRef();
		tc.ret = ret;
		Method meth = new Method(id.name, tc, null, modifiers.getFlags());
		meth.pos = id.pos;
		foreach (Meta m; modifiers.annotations)
			meth.meta.set(m);
		if( modifiers.acc != null ) meth.acc = modifiers.acc;
		return meth;
	}
	
	private static RuleMethod mkRuleMethod(ASTIdentifier id, ASTModifiers modifiers, TypeRef ret) {
		TypeCallRef tc = new TypeCallRef();
		if (ret == null)
			tc.ret = new TypeRef(Type.tpVoid);
		else
			tc.ret = ret;
		RuleMethod meth = new RuleMethod(id, tc, modifiers.getFlags());
		meth.pos = id.pos;
		foreach (Meta m; modifiers.annotations)
			meth.meta.set(m);
		if( modifiers.acc != null ) meth.acc = modifiers.acc;
		return meth;
	}
	
	private static Field mkField(ASTIdentifier id, ASTModifiers modifiers, TypeRef type, boolean first) {
		if (!first)
			type = (TypeRef)type.copy();
		Field f = new Field(id.name,type,modifiers.getFlags());
		f.acc.flags = 0;
		f.pos = id.pos;
		if (first) {
			if (modifiers.acc != null)
				f.acc = modifiers.acc;
			foreach (Meta m; modifiers.annotations)
				f.meta.set(m);
		} else {
			if (modifiers.acc != null)
				f.acc = new Access(modifiers.acc.flags);
			foreach (Meta m; modifiers.annotations)
				f.meta.set((Meta)m.copy());
		}
		return f;
	}

	private static Field mkEnumField(ASTIdentifier id, ASTModifiers modifiers) {
		Field f = new Field(id.name,new TypeRef(),ACC_ENUM|ACC_STATIC|ACC_FINAL|ACC_PUBLIC);
		f.pos = id.pos;
		f.setEnumField(true);
		foreach (Meta m; modifiers.annotations)
			f.meta.set(m);
		return f;
	}

	private static Field mkCaseField(ASTIdentifier id, ASTModifiers modifiers, TypeRef tp) {
		Field f = new Field(id.name,tp,modifiers.getFlags()|ACC_PUBLIC);
		f.pos = id.pos;
		foreach (Meta m; modifiers.annotations)
			f.meta.set(m);
		return f;
	}
	
	private static Var mkVar(ASTIdentifier id, ASTModifiers modifiers, TypeRef tp, boolean first) {
		if (!first)
			tp = (TypeRef)tp.copy();
		Var v = new Var(id, tp, modifiers.getFlags());
		if (modifiers.annotations.length > 0) {
			v.meta = new MetaSet(v);
			if (first) {
				foreach (Meta m; modifiers.annotations)
					v.meta.set(m);
			} else {
				foreach (Meta m; modifiers.annotations)
					v.meta.set((Meta)m.copy());
			}
		}
		return v;
	}
	
	private static FormPar mkFormPar(ASTIdentifier id, ASTModifiers modifiers, TypeRef vt, TypeRef st) {
		FormPar v = new FormPar(id, vt, st, modifiers.getFlags());
		if (modifiers.annotations.length > 0) {
			v.meta = new MetaSet(v);
			foreach (Meta m; modifiers.annotations)
				v.meta.set(m);
		}
		return v;
	}
	
	private static ENode mkNotExpr(ASTOperator not, ENode cond) {
		ASTExpression e = new ASTExpression();
		e.pos = cond.pos;
		e.nodes.append(not);
		e.nodes.append(cond);
		return e;
	}


	}*/

}

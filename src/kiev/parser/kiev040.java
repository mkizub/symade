/* Generated By:JavaCC: Do not edit this line. kiev040.java */
package kiev.parser;

import kiev.Kiev;
import kiev.Kiev.Ext;
import kiev.vlang.*;
import kiev.vlang.types.*;
import java.io.Reader;

/*{

import static kiev.vlang.AccessFlags.*;

typedef NArr<TypeWithArgsRef> NArrTypeWithArgsRefs;
typedef NArr<ENode> NArrENodes;

}*/

public final class Parser extends kiev040 {
        public Parser(Reader r) {
                super(r,1,1);
        }
}

public interface ParserConstants extends kiev040Constants {
}

public abstract class kiev040 implements kiev040Constants {

        public FileUnit                 curFileUnit;
        public Struct                   curClazz;
        public Method                   curMethod;
        public boolean                  interface_only = false;
        public boolean                  reparse_body = false;
        public int                              reparse_pos = 0;
        public PreScanneable    presc = null;

        public boolean                  declMode = true;

        public kiev040(java.io.Reader stream, int line, int pos) {
                jj_input_stream = new SimpleCharStream(stream, line, pos);
                token_source = new kiev040TokenManager(jj_input_stream, this);
                token = new Token();
                token.next = jj_nt = token_source.getNextToken();
        }

        /** Report Parser Error (Exception) */
        private void rpe(String msg, ParseError e) {
                int pos;
                if( token==null ) pos = 0;
                else if( token.next==null ) pos = token.getPos();
                else pos = token.next.getPos();
                if( kiev.Kiev.debug ) {
                        kiev.Kiev.reportParserError(pos, msg, e);
                } else {
                        kiev.Kiev.reportParserError(pos, msg);
                }
        }

    /** Report other Error (Exception) */
        private void rperr(Throwable e) throws Throwable {
                int pos;
                if( token==null ) pos = 0;
                else if( token.next==null ) pos = token.getPos();
                else pos = token.next.getPos();
                if( kiev.Kiev.debug ) {
                        kiev.Kiev.reportParserError(pos, "Internal error:\n"+e);
                } else {
                        kiev.Kiev.reportParserError(pos, "Internal error");
                }
                throw e;
        }

        private boolean checkNoSpace(Token t1, Token t2) {
                return t1.endLine == t2.beginLine && t1.endColumn+1 == t2.beginColumn;
        }

        private static final int[] noColonTokenSet = new int[]{COLON};

        private int[] no_tokens;

        private boolean notAToken(Token t) {
                if( no_tokens == null ) return true;
                for(int i=0; i < no_tokens.length; i++) {
                        if( t.kind == no_tokens[i] ) return false;
                }
                return true;
        }

        private boolean labledStatementLA() {
                for(int idx=1; ;idx+=2) {
                        if (getToken(idx).kind != IDENTIFIER || getToken(idx+1).kind != COLON)
                                return false;
                        switch(getToken(idx+2).kind) {
                        case LBRACE:
                        case SEMICOLON:
                        case SWITCH:
                        case IF:
                        case WHILE:
                        case DO:
                        case FOR:
                        case FOREACH:
                        case BREAK:
                        case CONTINUE:
                        case RETURN:
                        case THROW:
                        case SYNCHRONIZED:
                        case WITH:
                        case TRY:
                        case GOTO:
                        case REPARSE_STATEMENT:
                                return true;
                        }
                }
        }

        private boolean operatorLA(int tk) {
                switch( getToken(tk).kind ) {
                case ASSIGN:
                case ASSIGN2:
                case LT:
                case GT:
                case COLON:
                case QUESTION:
                case ARROW:
                case BANG:
                case TILDE:
                case EQ:
                case LE:
                case GE:
                case NE:
                case SC_OR:
                case SC_AND:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                case STAR:
                case SLASH:
                case BIT_AND:
                case BIT_OR:
                case XOR:
                case REM:
                case LSHIFT:
                case PLUSASSIGN:
                case MINUSASSIGN:
                case STARASSIGN:
                case SLASHASSIGN:
                case ANDASSIGN:
                case ORASSIGN:
                case XORASSIGN:
                case REMASSIGN:
                case LSHIFTASSIGN:
                case RSIGNEDSHIFTASSIGN:
                case RUNSIGNEDSHIFTASSIGN:
                case OPERATOR_AT:
                case OPERATOR_SHARP:
                case OPERATOR_UPPER_BOUND:
                case OPERATOR_LOWER_BOUND:
                case OPERATOR:
                        return notAToken(getToken(tk));
                case OPERATOR_ID:
                        return true;
                }
                return false;
        }

        private boolean maybeCastLA_Start() {
                int i = 1;
                Token t = getToken(i);
                if (t.kind == IDENTIFIER) {
                        String qname = t.image;
                        while( getToken(i+1).kind == DOT && getToken(i+2).kind == IDENTIFIER) {
                                i += 2;
                                qname = qname + "." + getToken(i).image;
                        }
                        switch (getToken(i+1).kind) {
                        case RPAREN:
                        case LT:
                        case OPERATOR_LRBRACKETS:
                                break;
                        default:
                                return false;
                        }
                        return true;
                }
                return false;
        }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public FileUnit FileUnit(String filename) throws ParseException {
  FileUnit oldFileUnit; Struct oldClazz;
                oldFileUnit = curFileUnit;
                FileUnit fu = new FileUnit();
                curFileUnit = fu;
                fu.filename = KString.from(filename);
                fu.pos = 0;
                declMode = true;
                ASTModifiers modifiers;
                oldClazz = curClazz;
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case PRAGMA:
        ;
        break;
      default:
        break label_1;
      }
      Pragma(fu);
    }
    switch (jj_nt.kind) {
    case PACKAGE:
      fu.pkg = Package();
      break;
    default:
      ;
    }
          curClazz = fu.pkg.getStruct();
    try {
      label_2:
      while (true) {
        switch (jj_nt.kind) {
        case PRAGMA:
          ;
          break;
        default:
          break label_2;
        }
        Pragma(fu);
      }
      label_3:
      while (true) {
        switch (jj_nt.kind) {
        case IMPORT:
        case OPERATOR_ID:
        case TYPEDEF:
          ;
          break;
        default:
          break label_3;
        }
        switch (jj_nt.kind) {
        case IMPORT:
          fu.syntax += Import();
          break;
        case TYPEDEF:
          fu.syntax += Typedef();
          break;
        case OPERATOR_ID:
          fu.syntax += Opdef();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_4:
      while (true) {
        if (jj_2_1(1)) {
          ;
        } else {
          break label_4;
        }
        modifiers = Modifiers();
        switch (jj_nt.kind) {
        case CLASS:
        case INTERFACE:
        case VIEW:
        case ENUM:
        case META_INTERFACE:
          fu.members += TypeDeclaration(modifiers, fu);
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
          break;
        default:
          if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {
            fu.members += SyntaxDeclaration(modifiers, fu);
            switch (jj_nt.kind) {
            case SEMICOLON:
              jj_consume_token(SEMICOLON);
              break;
            default:
              ;
            }
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(0);
    } catch (ParseError e) {
                              rpe("Bad modifiers",e);
    } catch (Throwable e) {
                             rperr(e);
    } finally {
                curClazz = oldClazz;
                curFileUnit = oldFileUnit;
                declMode = true;
                {if (true) return fu;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTModifiers Modifiers() throws ParseException {
          ASTModifiers n = new ASTModifiers();
    label_5:
    while (true) {
      if (jj_2_2(1)) {
        ;
      } else {
        break label_5;
      }
      switch (jj_nt.kind) {
      case OPERATOR_AT:
        n.annotations   += Annotation();
        break;
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case VIRTUAL:
      case FORWARD:
      case PACKED:
      case META_SINGLETON:
      case META_FORWARD:
      case META_UNERASABLE:
      case META_VIRTUAL:
      case META_PACKED:
      case META_PUBLIC:
      case META_PROTECTED:
      case META_PRIVATE:
      case META_STATIC:
      case META_ABSTRACT:
      case META_FINAL:
      case META_NATIVE:
      case META_SYNCHRONIZED:
      case META_TRANSIENT:
      case META_VOLATILE:
      case META_THROWS:
        n                               += SpecialAnnotation();
        break;
      default:
        if (jj_2_3(1)) {
          n.acc                    = Access();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TypeNameRef Package() throws ParseException {
  NameRef qn;
    jj_consume_token(PACKAGE);
    qn = QName();
    jj_consume_token(SEMICOLON);
                TypeNameRef tr = new TypeNameRef(qn);
                Struct pkg = Env.newPackage(qn.name);
                tr.lnk = pkg.ctype;
                {if (true) return tr;}
    throw new Error("Missing return statement in function");
  }

  final public void Pragma(FileUnit fu) throws ParseException {
  ASTPragma p = new ASTPragma();
    jj_consume_token(PRAGMA);
    switch (jj_nt.kind) {
    case PRAGMA_ENABLE:
      jj_consume_token(PRAGMA_ENABLE);
                                          p.enable = true;
      break;
    case PRAGMA_DISABLE:
      jj_consume_token(PRAGMA_DISABLE);
                                          p.enable = false;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      p.options += StringConstExpression();
      switch (jj_nt.kind) {
      case STRING_LITERAL:
        ;
        break;
      default:
        break label_6;
      }
    }
    jj_consume_token(SEMICOLON);
          fu.setPragma(p);
  }

  final public Import Import() throws ParseException {
  Import imp = new Import();
    jj_consume_token(IMPORT);
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {
      jj_consume_token(IDENTIFIER);
                              imp.mode = Import.ImportMode.IMPORT_SYNTAX;
      imp.name = QName();
    } else {
      switch (jj_nt.kind) {
      case PACKAGE:
        jj_consume_token(PACKAGE);
                                  imp.mode = Import.ImportMode.IMPORT_PACKAGE;
        imp.name = QName();
        break;
      case STATIC:
        jj_consume_token(STATIC);
                                  imp.mode = Import.ImportMode.IMPORT_STATIC;
        imp.name = QName();
        switch (jj_nt.kind) {
        case LPAREN:
        case DOT:
          switch (jj_nt.kind) {
          case DOT:
            jj_consume_token(DOT);
            jj_consume_token(STAR);
                                  imp.star = true;
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
                                          imp.of_method = true;
            imp.args += Type();
            label_7:
            while (true) {
              switch (jj_nt.kind) {
              case COMMA:
                ;
                break;
              default:
                break label_7;
              }
              jj_consume_token(COMMA);
              imp.args += Type();
            }
            jj_consume_token(RPAREN);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          ;
        }
        break;
      case IDENTIFIER:
        imp.name = QName();
        switch (jj_nt.kind) {
        case LPAREN:
        case DOT:
          switch (jj_nt.kind) {
          case DOT:
            jj_consume_token(DOT);
            jj_consume_token(STAR);
                                  imp.star = true;
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
                                          imp.of_method = true;
            imp.args += Type();
            label_8:
            while (true) {
              switch (jj_nt.kind) {
              case COMMA:
                ;
                break;
              default:
                break label_8;
              }
              jj_consume_token(COMMA);
              imp.args += Type();
            }
            jj_consume_token(RPAREN);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
          {if (true) return imp;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDecl Typedef() throws ParseException {
  NameRef id; TypeDecl n;
    jj_consume_token(TYPEDEF);
    if (jj_2_4(3) && (checkNoSpace(getToken(1),getToken(2)))) {
                  n = new TypeOpDef();
      id     = Name();
                                          n.arg = new TypeDef(id);
      n.op   = Operator();
      n.type = Type();
    } else if (jj_2_5(1)) {
                  n = new TypeDef();
      n.upper_bound = Type();
                                         n.lower_bound = (TypeRef)n.upper_bound.copy();
      n.name = Name();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Opdef Opdef() throws ParseException {
  NameRef id; ASTOperator op; ConstIntExpr ce; Opdef opd = new Opdef();
    jj_consume_token(OPERATOR_ID);
    if (jj_2_6(1)) {
      op = Operator();
                                             opd.setImage(op);
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER:
        id = Name();
                                             opd.setImage(id);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(COMMA);
    // FX,FY,XF,YF,XFX,YFX,XFY,YFY
            id = Name();
                                         opd.setMode(id);
    jj_consume_token(COMMA);
    ce = IntConstExpression();
                                                  opd.setPriority(ce);
    jj_consume_token(SEMICOLON);
          {if (true) return opd;}
    throw new Error("Missing return statement in function");
  }

  final public Struct SyntaxDeclaration(ASTModifiers modifiers, ASTNode parent) throws ParseException {
  Struct clazz; NameRef name; Struct oldClazz;
    if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    // "syntax"
            name = Name();
                clazz = mkStruct(name, ACC_SYNTAX|ACC_PRIVATE|ACC_ABSTRACT, modifiers, parent);
          oldClazz = curClazz; curClazz = clazz;
    try {
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        switch (jj_nt.kind) {
        case OPERATOR_ID:
        case TYPEDEF:
          ;
          break;
        default:
          break label_9;
        }
        switch (jj_nt.kind) {
        case TYPEDEF:
          clazz.members += Typedef();
          break;
        case OPERATOR_ID:
          clazz.members += Opdef();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
    } finally {
                    curClazz = oldClazz;
    }
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public Struct TypeDeclaration(ASTModifiers modifiers, ASTNode parent) throws ParseException {
  Struct clazz; NameRef name; Struct oldClazz; TypeDef[] args;
    switch (jj_nt.kind) {
    case CLASS:
      jj_consume_token(CLASS);
      name = Name();
                        clazz = mkStruct(name, 0, modifiers, parent);
      args = ClazzArguments();
                                          clazz.args.addAll(args);
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        if (jj_2_7(2147483647)) {
          clazz.super_bound = PrimitiveType();
        } else {
          switch (jj_nt.kind) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case VOID:
          case RULE:
          case REPARSE_TYPE:
          case IDENTIFIER:
            clazz.super_bound = NArrType();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        clazz.interfaces += NArrType();
        label_10:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_10;
          }
          jj_consume_token(COMMA);
          clazz.interfaces += NArrType();
        }
        break;
      default:
        ;
      }
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
      name = Name();
                        clazz = mkStruct(name, ACC_INTERFACE, modifiers, parent);
      args = ClazzArguments();
                                          clazz.args.addAll(args);
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        clazz.interfaces += NArrType();
        label_11:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_11;
          }
          jj_consume_token(COMMA);
          clazz.interfaces += NArrType();
        }
        break;
      default:
        ;
      }
      break;
    case META_INTERFACE:
      jj_consume_token(META_INTERFACE);
      switch (jj_nt.kind) {
      case IDENTIFIER:
        name = Name();
        break;
      case THROWS:
      case VIRTUAL:
      case FORWARD:
      case ALIAS:
      case PACKED:
        name = KeywordAsName();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                        clazz = mkStruct(name, ACC_INTERFACE|ACC_ANNOTATION, modifiers, parent);
      break;
    case ENUM:
      jj_consume_token(ENUM);
      name = Name();
                        clazz = mkStruct(name, ACC_ENUM|ACC_STATIC, modifiers, parent);
      break;
    case VIEW:
      jj_consume_token(VIEW);
      name = Name();
                        clazz = mkStruct(name, ACC_VIRTUAL, modifiers, parent);
      if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("of")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      // "of"
                      clazz.view_of = NArrType();
      args = ClazzArguments();
                                          clazz.args.addAll(args);
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        if (jj_2_8(2147483647)) {
          clazz.super_bound = PrimitiveType();
        } else {
          switch (jj_nt.kind) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case VOID:
          case RULE:
          case REPARSE_TYPE:
          case IDENTIFIER:
            clazz.super_bound = NArrType();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        clazz.interfaces += NArrType();
        label_12:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_12;
          }
          jj_consume_token(COMMA);
          clazz.interfaces += NArrType();
        }
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          oldClazz = curClazz; curClazz = clazz;
    try {
      TypeBodyDeclaration(clazz);
    } finally {
                    curClazz = oldClazz;
    }
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public void TypeBodyDeclaration(Struct clazz) throws ParseException {
  ASTModifiers modifiers;
    jj_consume_token(LBRACE);
    if (clazz.isEnum()) {
      modifiers = Modifiers();
      clazz.members += EnumFieldDeclaration(modifiers);
      label_13:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_13;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        clazz.members += EnumFieldDeclaration(modifiers);
      }
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    label_14:
    while (true) {
      if (jj_2_9(1)) {
        ;
      } else {
        break label_14;
      }
      modifiers = Modifiers();
      if (jj_2_10(1)) {
        clazz.members += Initializer(modifiers);
      } else {
        switch (jj_nt.kind) {
        case INVARIANT:
          clazz.members += InvariantDeclaration(modifiers);
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
          break;
        case CLASS:
        case INTERFACE:
        case VIEW:
        case ENUM:
        case META_INTERFACE:
          clazz.members += TypeDeclaration(modifiers, clazz);
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            ;
          }
          break;
        case CASE:
          clazz.members += CaseTypeDeclaration(modifiers, clazz);
          break;
        case TYPEDEF:
          clazz.members += MemberArgDecl(modifiers);
          break;
        default:
          if (jj_2_11(2147483647)) {
            clazz.members += RuleDeclaration(modifiers);
          } else if (jj_2_12(2147483647)) {
            clazz.members += ConstructorDeclaration(modifiers);
          } else if (jj_2_13(2147483647)) {
            clazz.members += MethodDeclaration(modifiers);
          } else if (jj_2_14(2147483647)) {
            FieldDecls(modifiers, clazz);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    jj_consume_token(RBRACE);
  }

  final public Field EnumFieldDeclaration(ASTModifiers modifiers) throws ParseException {
  NameRef id; Field f; ConstStringExpr text;
    id = Name();
                f = mkEnumField(id, modifiers);
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
      text = StringConstExpression();
                        text.value = KString.from("\""+text.value+"\"");
                        f.addNodeData(new MetaAlias(text));
      break;
    default:
      ;
    }
          {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Struct CaseTypeDeclaration(ASTModifiers modifiers, Struct parent) throws ParseException {
  NameRef name; Struct clazz; TypeDef[] args;
    jj_consume_token(CASE);
    name = Name();
                clazz = mkStruct(name, ACC_STATIC|ACC_FINAL, modifiers, parent);
                clazz.super_type = parent.ctype;
                clazz.setPizzaCase(true);
                clazz.setSingleton(true);
    args = ClazzArguments();
                                  clazz.args.addAll(args);
    switch (jj_nt.kind) {
    case LPAREN:
      jj_consume_token(LPAREN);
              clazz.setSingleton(false);
      if (jj_2_15(1)) {
        modifiers = Modifiers();
        clazz.members += CaseTypeField(modifiers);
        label_15:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_15;
          }
          jj_consume_token(COMMA);
          modifiers = Modifiers();
          clazz.members += CaseTypeField(modifiers);
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return clazz;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDef[] ClazzArguments() throws ParseException {
  TypeDef[] args = new TypeDef[0]; TypeDef arg;
    switch (jj_nt.kind) {
    case LT:
      jj_consume_token(LT);
      arg = ArgumentDeclaration();
                          args = (TypeDef[])Arrays.append(args,arg);
      label_16:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_16;
        }
        jj_consume_token(COMMA);
        arg = ArgumentDeclaration();
                                  args = (TypeDef[])Arrays.append(args,arg);
      }
      jj_consume_token(GT);
      break;
    default:
      ;
    }
          {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDef MemberArgDecl(ASTModifiers modifiers) throws ParseException {
  NameRef name; TypeDef arg; TypeRef t;
    jj_consume_token(TYPEDEF);
    if (jj_2_16(2147483647)) {
      t    = Type();
      jj_consume_token(OPERATOR_LOWER_BOUND);
      name = Name();
                                arg = mkTypeDef(name,modifiers); arg.lower_bound = t;
      switch (jj_nt.kind) {
      case OPERATOR_UPPER_BOUND:
        jj_consume_token(OPERATOR_UPPER_BOUND);
        t = Type();
                                                      arg.upper_bound = t;
        break;
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER:
        name      = Name();
                  arg = mkTypeDef(name,modifiers);
        switch (jj_nt.kind) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          t = Type();
                                         arg.upper_bound = t; arg.lower_bound = t.copy();
          jj_consume_token(SEMICOLON);
          break;
        case SEMICOLON:
        case OPERATOR_UPPER_BOUND:
        case OPERATOR_LOWER_BOUND:
          switch (jj_nt.kind) {
          case OPERATOR_UPPER_BOUND:
            jj_consume_token(OPERATOR_UPPER_BOUND);
            t = Type();
                                                              arg.upper_bound = t;
            break;
          default:
            ;
          }
          switch (jj_nt.kind) {
          case OPERATOR_LOWER_BOUND:
            jj_consume_token(OPERATOR_LOWER_BOUND);
            t = Type();
                                                              arg.upper_bound = t;
            break;
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return arg;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDef ArgumentDeclaration() throws ParseException {
  NameRef name; TypeDef arg;
    name      = Name();
          arg = mkTypeDef(name,null); arg.setAbstract(true);
    switch (jj_nt.kind) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      arg.upper_bound = NArrType();
      break;
    default:
      ;
    }
          {if (true) return arg;}
    throw new Error("Missing return statement in function");
  }

  final public int Modifier() throws ParseException {
    switch (jj_nt.kind) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
                                          {if (true) return AccessFlags.ACC_PUBLIC;}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
                                  {if (true) return AccessFlags.ACC_PROTECTED;}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                                          {if (true) return AccessFlags.ACC_PRIVATE;}
      break;
    case STATIC:
      jj_consume_token(STATIC);
                                          {if (true) return AccessFlags.ACC_STATIC;}
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                                  {if (true) return AccessFlags.ACC_ABSTRACT;}
      break;
    case FINAL:
      jj_consume_token(FINAL);
                                          {if (true) return AccessFlags.ACC_FINAL;}
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
                                          {if (true) return AccessFlags.ACC_NATIVE;}
      break;
    case SYNCHRONIZED:
      jj_consume_token(SYNCHRONIZED);
                                  {if (true) return AccessFlags.ACC_SYNCHRONIZED;}
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
                                  {if (true) return AccessFlags.ACC_TRANSIENT;}
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
                                  {if (true) return AccessFlags.ACC_VOLATILE;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Access Access() throws ParseException {
  int acc;      int accflags = 0; int offset = 6;
    if (Kiev.enabled(Ext.Access)) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case ACCESS:
    case META_ACCESS2:
      switch (jj_nt.kind) {
      case ACCESS:
        jj_consume_token(ACCESS);
        break;
      case META_ACCESS2:
        jj_consume_token(META_ACCESS2);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
      switch (jj_nt.kind) {
      case COMMA1:
        jj_consume_token(COMMA1);
        acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
        switch (jj_nt.kind) {
        case COMMA1:
          jj_consume_token(COMMA1);
          acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
          switch (jj_nt.kind) {
          case COMMA1:
            jj_consume_token(COMMA1);
            acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
            break;
          default:
            ;
          }
          break;
        default:
          ;
        }
        break;
      default:
        ;
      }
      break;
    case META_ACCESS1:
      jj_consume_token(META_ACCESS1);
      acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
      switch (jj_nt.kind) {
      case COMMA1:
        jj_consume_token(COMMA1);
        acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
        switch (jj_nt.kind) {
        case COMMA1:
          jj_consume_token(COMMA1);
          acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
          switch (jj_nt.kind) {
          case COMMA1:
            jj_consume_token(COMMA1);
            acc = AccessSpec();
                                                for(int i=offset; i >= 0; i-=2) { accflags &= ~(3 << i); accflags |= acc << i; } offset -= 2;
            break;
          default:
            ;
          }
          break;
        default:
          ;
        }
        break;
      default:
        ;
      }
      jj_consume_token(CLOSE_ACCESS);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new Access(accflags);}
    throw new Error("Missing return statement in function");
  }

  final public int AccessSpec() throws ParseException {
    switch (jj_nt.kind) {
    case READ_ONLY:
      jj_consume_token(READ_ONLY);
                                  {if (true) return 2;}
      break;
    case WRITE_ONLY:
      jj_consume_token(WRITE_ONLY);
                          {if (true) return 1;}
      break;
    case READ_WRITE:
      jj_consume_token(READ_WRITE);
                          {if (true) return 3;}
      break;
    case NO_READ_WRITE:
      jj_consume_token(NO_READ_WRITE);
                          {if (true) return 0;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MetaSpecial SpecialAnnotation() throws ParseException {
  MetaPacked mp; MetaThrows mt; TypeNameRef thr;
    switch (jj_nt.kind) {
    case META_SINGLETON:
      jj_consume_token(META_SINGLETON);
                                  {if (true) return MetaSingleton;}
      break;
    case FORWARD:
      jj_consume_token(FORWARD);
                                          {if (true) return MetaForward;}
      break;
    case META_FORWARD:
      jj_consume_token(META_FORWARD);
                                  {if (true) return MetaForward;}
      break;
    case META_UNERASABLE:
      jj_consume_token(META_UNERASABLE);
                                  {if (true) return MetaUnerasable;}
      break;
    case META_VIRTUAL:
      jj_consume_token(META_VIRTUAL);
                                  {if (true) return new MetaVirtual();}
      break;
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
                                          {if (true) return new MetaVirtual();}
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
                                          {if (true) return MetaPublic;}
      break;
    case META_PUBLIC:
      jj_consume_token(META_PUBLIC);
                                          {if (true) return MetaPublic;}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
                                  {if (true) return MetaProtected;}
      break;
    case META_PROTECTED:
      jj_consume_token(META_PROTECTED);
                                  {if (true) return MetaProtected;}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                                          {if (true) return MetaPrivate;}
      break;
    case META_PRIVATE:
      jj_consume_token(META_PRIVATE);
                                  {if (true) return MetaPrivate;}
      break;
    case STATIC:
      jj_consume_token(STATIC);
                                          {if (true) return MetaStatic;}
      break;
    case META_STATIC:
      jj_consume_token(META_STATIC);
                                          {if (true) return MetaStatic;}
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                                  {if (true) return MetaAbstract;}
      break;
    case META_ABSTRACT:
      jj_consume_token(META_ABSTRACT);
                                  {if (true) return MetaAbstract;}
      break;
    case FINAL:
      jj_consume_token(FINAL);
                                          {if (true) return MetaFinal;}
      break;
    case META_FINAL:
      jj_consume_token(META_FINAL);
                                          {if (true) return MetaFinal;}
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
                                          {if (true) return MetaNative;}
      break;
    case META_NATIVE:
      jj_consume_token(META_NATIVE);
                                          {if (true) return MetaNative;}
      break;
    case SYNCHRONIZED:
      jj_consume_token(SYNCHRONIZED);
                                  {if (true) return MetaSynchronized;}
      break;
    case META_SYNCHRONIZED:
      jj_consume_token(META_SYNCHRONIZED);
                                  {if (true) return MetaSynchronized;}
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
                                  {if (true) return MetaTransient;}
      break;
    case META_TRANSIENT:
      jj_consume_token(META_TRANSIENT);
                                  {if (true) return MetaTransient;}
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
                                  {if (true) return MetaVolatile;}
      break;
    case META_VOLATILE:
      jj_consume_token(META_VOLATILE);
                                  {if (true) return MetaVolatile;}
      break;
    case PACKED:
    case META_PACKED:
      switch (jj_nt.kind) {
      case META_PACKED:
        jj_consume_token(META_PACKED);
        break;
      case PACKED:
        jj_consume_token(PACKED);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  mp = new MetaPacked();
      switch (jj_nt.kind) {
      case LPAREN:
      case COLON:
        switch (jj_nt.kind) {
        case LPAREN:
          jj_consume_token(LPAREN);
          mp.size   = IntConstExpression();
          switch (jj_nt.kind) {
          case COMMA:
            jj_consume_token(COMMA);
            mp.fld    = Name();
            jj_consume_token(COMMA);
            mp.offset = IntConstExpression();
            break;
          default:
            ;
          }
          jj_consume_token(RPAREN);
          break;
        case COLON:
          jj_consume_token(COLON);
          mp.size   = IntConstExpression();
          switch (jj_nt.kind) {
          case COMMA:
            jj_consume_token(COMMA);
            mp.fld    = Name();
            jj_consume_token(COMMA);
            mp.offset = IntConstExpression();
            break;
          default:
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
                  {if (true) return mp;}
      break;
    case META_THROWS:
      jj_consume_token(META_THROWS);
                  mt = new MetaThrows();
      switch (jj_nt.kind) {
      case IDENTIFIER:
        thr = TypeQName();
                                            mt.add(thr);
        label_17:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_17;
          }
          jj_consume_token(COMMA);
          thr = TypeQName();
                                                  mt.add(thr);
        }
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        switch (jj_nt.kind) {
        case LBRACE:
          jj_consume_token(LBRACE);
          break;
        default:
          ;
        }
        thr = TypeQName();
                                            mt.add(thr);
        label_18:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_18;
          }
          jj_consume_token(COMMA);
          thr = TypeQName();
                                                  mt.add(thr);
        }
        switch (jj_nt.kind) {
        case RBRACE:
          jj_consume_token(RBRACE);
          break;
        default:
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  {if (true) return mt;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NameRef KeywordAsName() throws ParseException {
  Token t; NameRef id;
    switch (jj_nt.kind) {
    case VIRTUAL:
      t= jj_consume_token(VIRTUAL);
      break;
    case ALIAS:
      t= jj_consume_token(ALIAS);
      break;
    case PACKED:
      t= jj_consume_token(PACKED);
      break;
    case THROWS:
      t= jj_consume_token(THROWS);
      break;
    case FORWARD:
      t= jj_consume_token(FORWARD);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                id = new NameRef();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public Meta Annotation() throws ParseException {
  NameRef id; MetaValue v;
          Meta n = new Meta();
    jj_consume_token(OPERATOR_AT);
    switch (jj_nt.kind) {
    case IDENTIFIER:
      id = Name();
      break;
    case THROWS:
    case VIRTUAL:
    case FORWARD:
    case ALIAS:
    case PACKED:
      id = KeywordAsName();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                n.pos = id.pos; n.type = new TypeNameRef(id);
    switch (jj_nt.kind) {
    case LPAREN:
      jj_consume_token(LPAREN);
      if (jj_2_19(1)) {
        if (jj_2_17(2147483647)) {
          AnnotationValues(n);
        } else if (jj_2_18(1)) {
          v = AnnotationValueAny();
                                                   v.type = new MetaValueType(KString.from("value")); n.set(v);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      ;
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public void AnnotationValues(Meta m) throws ParseException {
  NameRef id; MetaValue v;
    id = Name();
    jj_consume_token(ASSIGN);
    v = AnnotationValueAny();
          v.type = new MetaValueType(id.name); m.set(v);
    label_19:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_19;
      }
      jj_consume_token(COMMA);
      id = Name();
      jj_consume_token(ASSIGN);
      v = AnnotationValueAny();
                  v.type = new MetaValueType(id.name); m.set(v);
    }
  }

  final public MetaValue AnnotationValueAny() throws ParseException {
  ENode n; MetaValue v;
    if (jj_2_20(2147483647)) {
      n = Annotation();
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = n;
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        v = AnnotationValueValueArrayInitializer();
        break;
      default:
        if (jj_2_21(1)) {
          n = ExpressionNT(null);
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = n;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public MetaValueScalar AnnotationValueScalar() throws ParseException {
  ENode n; MetaValueScalar v;
    if (jj_2_22(2147483647)) {
      n = Annotation();
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = n;
    } else if (jj_2_23(1)) {
      n = ExpressionNT(null);
                  v = new MetaValueScalar(); ((MetaValueScalar)v).value = n;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public MetaValueArray AnnotationValueValueArrayInitializer() throws ParseException {
  MetaValueScalar n; MetaValueArray v;
          v = new MetaValueArray();
    jj_consume_token(LBRACE);
    if (jj_2_24(1)) {
      n = AnnotationValueScalar();
                                              v.values.add((ENode)~n.value);
      label_20:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_20;
        }
        jj_consume_token(COMMA);
        n = AnnotationValueScalar();
                                                      v.values.add((ENode)~n.value);
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public void FieldDecls(ASTModifiers modifiers, Struct clazz) throws ParseException {
  boolean old_declMode; TypeRef type;
          old_declMode = declMode; declMode = false;
    try {
      type = Type();
      clazz.members += FieldDecl(modifiers, type, true);
      label_21:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_21;
        }
        jj_consume_token(COMMA);
        clazz.members += FieldDecl(modifiers, type, false);
      }
    } finally {
                    declMode = old_declMode;
    }
    jj_consume_token(SEMICOLON);
  }

  final public Field FieldDecl(ASTModifiers modifiers, TypeRef type, boolean first) throws ParseException {
  Token t; NameRef id; Field f;
    id = Name();
          f = mkField(id, modifiers, type, first);
    label_22:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_22;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                    f.ftype = new TypeExpr((TypeRef)~f.ftype,t);
    }
    switch (jj_nt.kind) {
    case ASSIGN:
    case ASSIGN2:
      switch (jj_nt.kind) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      case ASSIGN2:
        jj_consume_token(ASSIGN2);
                               f.setInitWrapper(true);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      f.init = VariableInitializer();
      break;
    default:
      ;
    }
          {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public void LocalVarDecls(ASTModifiers modifiers, RuleMethod meth) throws ParseException {
  TypeRef type;
    type = Type();
    meth.localvars += VarDecl(modifiers, type, true);
    label_23:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_23;
      }
      jj_consume_token(COMMA);
      meth.localvars += VarDecl(modifiers, type, false);
    }
    jj_consume_token(SEMICOLON);
  }

  final public Var VarDecl(ASTModifiers modifiers, TypeRef type, boolean first) throws ParseException {
  Token t; NameRef id; Var lv;
    id = Name();
          lv = mkVar(id, modifiers, type, first);
    label_24:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_24;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                    lv.vtype = new TypeExpr((TypeRef)~lv.vtype,t);
    }
    switch (jj_nt.kind) {
    case ASSIGN:
    case ASSIGN2:
      switch (jj_nt.kind) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      case ASSIGN2:
        jj_consume_token(ASSIGN2);
                               lv.setInitWrapper(true);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      lv.init = VariableInitializer();
      break;
    default:
      ;
    }
          {if (true) return lv;}
    throw new Error("Missing return statement in function");
  }

  final public ENode VariableInitializer() throws ParseException {
  ENode e;
    switch (jj_nt.kind) {
    case LBRACE:
      e = ArrayInitializer();
      break;
    default:
      if (jj_2_25(1)) {
        e = Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ArrayInitializer() throws ParseException {
  NewInitializedArrayExpr e = new NewInitializedArrayExpr(); e.pos = getToken(1).getPos();
    jj_consume_token(LBRACE);
    if (jj_2_27(2)) {
      e.args += VariableInitializer();
      label_25:
      while (true) {
        if (jj_2_26(2)) {
          ;
        } else {
          break label_25;
        }
        jj_consume_token(COMMA);
        e.args += VariableInitializer();
      }
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Field CaseTypeField(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; NameRef id;
    tp = Type();
    id = Name();
    label_26:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_26;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                    tp = new TypeExpr(tp,t);
    }
                {if (true) return mkCaseField(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
  }

  final public Var PizzaCaseFormalParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; NameRef id;
    if (!Kiev.javaMode && (getToken(1).image.equals("_"))) {
      id = Name();
                              tp = new TypeRef(id.pos, Type.tpVoid);
    } else if (jj_2_28(1)) {
      tp = Type();
      id = Name();
      label_27:
      while (true) {
        switch (jj_nt.kind) {
        case OPERATOR_LRBRACKETS:
          ;
          break;
        default:
          break label_27;
        }
        t= jj_consume_token(OPERATOR_LRBRACKETS);
                                            tp = new TypeExpr(tp,t);
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return mkVar(id, modifiers, tp, true);}
    throw new Error("Missing return statement in function");
  }

  final public FormPar MethodFormalParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; TypeRef st=null; NameRef id;
    tp = Type();
    if (!Kiev.javaMode && (getToken(1).image.equals(":"))) {
      jj_consume_token(COLON);
      st = Type();
    } else {
      ;
    }
    id = Name();
    label_28:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_28;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                    tp = new TypeExpr(tp,t); if (st!= null) st = new TypeExpr(st,t);
    }
          {if (true) return mkFormPar(id, modifiers, tp, st);}
    throw new Error("Missing return statement in function");
  }

  final public FormPar MethodVarargsParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp = null; NameRef id = null;
    if (jj_2_29(1)) {
      tp = Type();
    } else {
      ;
    }
    t = jj_consume_token(VARARGS);
    switch (jj_nt.kind) {
    case IDENTIFIER:
      id = Name();
      break;
    default:
      ;
    }
                if (tp == null) {
                        tp = new TypeRef(t.getPos(),new ArrayType(Type.tpObject));
                } else {
                        tp = new TypeExpr(tp, Constants.nameArrayOp);
                        tp.pos = t.getPos();
                }
                if (id == null) {
                        id = new NameRef(t.getPos(), Constants.nameVarArgs);
                }
                {if (true) return mkVarargPar(id, modifiers, tp);}
    throw new Error("Missing return statement in function");
  }

  final public FormPar FormalParameter(ASTModifiers modifiers) throws ParseException {
  Token t; TypeRef tp; NameRef id;
    tp = Type();
    id = Name();
    label_29:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_29;
      }
      t= jj_consume_token(OPERATOR_LRBRACKETS);
                                    tp = new TypeExpr(tp,t);
    }
          {if (true) return mkFormPar(id, modifiers, tp, null);}
    throw new Error("Missing return statement in function");
  }

  final public MetaThrows Throws() throws ParseException {
  MetaThrows n = new MetaThrows(); TypeNameRef thr;
    jj_consume_token(THROWS);
    thr = TypeQName();
                            n.add(thr);
    label_30:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_30;
      }
      jj_consume_token(COMMA);
      thr = TypeQName();
                                    n.add(thr);
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public ASTAlias Alias() throws ParseException {
  Token t; ASTAlias a;
    jj_consume_token(ALIAS);
    if (jj_2_30(2)) {
      a = OperatorAlias();
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER:
        a = IdentifierAlias();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public ASTIdentifierAlias IdentifierAlias() throws ParseException {
  ASTIdentifierAlias a = new ASTIdentifierAlias();
    a.name = Name();
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public ASTOperatorAlias OperatorAlias() throws ParseException {
  Token t = null; NameRef id; ASTOperator op; ConstIntExpr ce; ASTOperatorAlias a = new ASTOperatorAlias();
    switch (jj_nt.kind) {
    case OPERATOR_ID:
      jj_consume_token(OPERATOR_ID);
      jj_consume_token(LPAREN);
      ce = IntConstExpression();
                                                          a.setPriority(ce);
      jj_consume_token(COMMA);
      id = Name();
                                                                          a.setMode(id);
      jj_consume_token(COMMA);
      if (jj_2_31(1)) {
        op = Operator();
                                                                  a.setImage(op);
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          id = Name();
                                                                          a.setImage(id);
          break;
        case OPERATOR_LRBRACKETS:
          jj_consume_token(OPERATOR_LRBRACKETS);
                                                          a.image = kiev.vlang.Constants.nameArrayOp;
          break;
        case NEW:
          jj_consume_token(NEW);
                                                                          a.image = kiev.vlang.Constants.nameNewOp;
          break;
        case CAST:
          jj_consume_token(CAST);
                                                                          a.image = kiev.vlang.Constants.nameCastOp;
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      break;
    case IDENTIFIER:
      id = Name();
                                                                          a.setMode(id);
      jj_consume_token(OPERATOR_ID);
      if (jj_2_32(1)) {
        op = Operator();
                                                                  a.setImage(op);
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          id = Name();
                                                                          a.setImage(id);
          break;
        case OPERATOR_LRBRACKETS:
          jj_consume_token(OPERATOR_LRBRACKETS);
                                                          a.image = kiev.vlang.Constants.nameArrayOp;
          break;
        case NEW:
          jj_consume_token(NEW);
                                                                          a.image = kiev.vlang.Constants.nameNewOp;
          break;
        case CAST:
          jj_consume_token(CAST);
                                                                          a.image = kiev.vlang.Constants.nameCastOp;
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public BlockStat MaybeSkipBlock() throws ParseException {
  boolean old_declMode; BlockStat bl = null;
    if (interface_only) {
      jj_consume_token(LBRACE);
                        Token tk = getToken(0);
                        PrescannedBody pbody = new PrescannedBody(tk.beginLine,tk.beginColumn);
                        curFileUnit.addPrescannedBody(pbody);
                        int depth = 1;
                        do {
                                tk = getNextToken();
                                if( tk.kind == LBRACE ) depth++;
                                else if( tk.kind == RBRACE ) depth--;
                        } while( depth > 0 );
                        presc.pbody = pbody;
                        if( presc instanceof RuleMethod )
                                pbody.mode = PrescannedBody.RuleBlockMode;
                        else
                                pbody.mode = PrescannedBody.BlockMode;
    } else if (presc instanceof RuleMethod) {
      bl = RuleBlock();
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        bl = Block();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public Method MethodDeclaration(ASTModifiers modifiers) throws ParseException {
  Token t; Method m, oldMethod; TypeRef ret; NameRef id; MetaThrows thr; TypeDef[] args;
    args = ClazzArguments();
    ret = Type();
    id = Name();
          m = mkMethod(id,modifiers,ret); m.targs.addAll(args); oldMethod = curMethod; curMethod = m;
    try {
      jj_consume_token(LPAREN);
      if (jj_2_38(1)) {
        if (jj_2_36(2147483647)) {
          modifiers = Modifiers();
          m.params += MethodVarargsParameter(modifiers);
                          m.setVarArgs(true);
        } else if (jj_2_37(1)) {
          modifiers = Modifiers();
          m.params += MethodFormalParameter(modifiers);
          label_31:
          while (true) {
            if (jj_2_33(1) && (!m.isVarArgs())) {
              ;
            } else {
              break label_31;
            }
            jj_consume_token(COMMA);
            modifiers = Modifiers();
            if (jj_2_34(2147483647)) {
              m.params += MethodVarargsParameter(modifiers);
                                          m.setVarArgs(true);
            } else if (jj_2_35(1)) {
              m.params += MethodFormalParameter(modifiers);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      label_32:
      while (true) {
        switch (jj_nt.kind) {
        case OPERATOR_LRBRACKETS:
          ;
          break;
        default:
          break label_32;
        }
        t= jj_consume_token(OPERATOR_LRBRACKETS);
                                          m.type_ret = new TypeExpr(m.type_ret,t);
      }
      label_33:
      while (true) {
        switch (jj_nt.kind) {
        case ALIAS:
          ;
          break;
        default:
          break label_33;
        }
        m.aliases += Alias();
      }
      switch (jj_nt.kind) {
      case THROWS:
        thr = Throws();
                                 m.addNodeData(thr);
        break;
      default:
        ;
      }
      label_34:
      while (true) {
        switch (jj_nt.kind) {
        case REQUIRE:
        case ENSURE:
          ;
          break;
        default:
          break label_34;
        }
        switch (jj_nt.kind) {
        case REQUIRE:
          m.conditions += RequareDeclaration();
          break;
        case ENSURE:
          m.conditions += EnsureDeclaration();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_39(2147483647)) {
                  presc = m;
        m.body = MaybeSkipBlock();
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case _DEFAULT:
        case SEMICOLON:
          switch (jj_nt.kind) {
          case _DEFAULT:
            jj_consume_token(_DEFAULT);
            m.annotation_default = AnnotationValueAny();
            break;
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
                    curMethod = oldMethod;
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Constructor ConstructorDeclaration(ASTModifiers modifiers) throws ParseException {
  Token t; Constructor m; NameRef id; MetaThrows thr; Method oldMethod;
    id = Name();
                if( !id.name.equals(curClazz.name.short_name) )
                        Kiev.reportError(id,"Return type missed or bad constructor name "+id);
                else
                        id.name = Constants.nameInit;
                m = mkConstructor(id,modifiers);
                oldMethod = curMethod;
                curMethod = m;
    try {
      jj_consume_token(LPAREN);
      if (jj_2_45(1)) {
        if (jj_2_43(2147483647)) {
          modifiers = Modifiers();
          m.params += MethodVarargsParameter(modifiers);
                          m.setVarArgs(true);
        } else if (jj_2_44(1)) {
          modifiers = Modifiers();
          m.params += MethodFormalParameter(modifiers);
          label_35:
          while (true) {
            if (jj_2_40(1) && (!m.isVarArgs())) {
              ;
            } else {
              break label_35;
            }
            jj_consume_token(COMMA);
            modifiers = Modifiers();
            if (jj_2_41(2147483647)) {
              m.params += MethodVarargsParameter(modifiers);
                                          m.setVarArgs(true);
            } else if (jj_2_42(1)) {
              m.params += MethodFormalParameter(modifiers);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      label_36:
      while (true) {
        switch (jj_nt.kind) {
        case ALIAS:
          ;
          break;
        default:
          break label_36;
        }
        m.aliases += Alias();
      }
      switch (jj_nt.kind) {
      case THROWS:
        thr = Throws();
                                 m.addNodeData(thr);
        break;
      default:
        ;
      }
      label_37:
      while (true) {
        switch (jj_nt.kind) {
        case REQUIRE:
        case ENSURE:
          ;
          break;
        default:
          break label_37;
        }
        switch (jj_nt.kind) {
        case REQUIRE:
          m.conditions += RequareDeclaration();
          break;
        case ENSURE:
          m.conditions += EnsureDeclaration();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_46(2147483647)) {
                  presc = m;
        m.body = MaybeSkipBlock();
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
                    curMethod = oldMethod;
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public WBCCondition RequareDeclaration() throws ParseException {
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondRequire;
    jj_consume_token(REQUIRE);
    if (jj_2_47(2147483647)) {
      jj_consume_token(LBRACKET);
      n.name = Name();
      jj_consume_token(RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_48(2147483647)) {
      n.name = Name();
      n.body = CondBlock();
    } else if (jj_2_49(1)) {
      n.body = CondBlock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public WBCCondition EnsureDeclaration() throws ParseException {
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondEnsure;
    jj_consume_token(ENSURE);
    if (jj_2_50(2147483647)) {
      jj_consume_token(LBRACKET);
      n.name = Name();
      jj_consume_token(RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_51(2147483647)) {
      n.name = Name();
      n.body = CondBlock();
    } else if (jj_2_52(1)) {
      n.body = CondBlock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public WBCCondition InvariantDeclaration(ASTModifiers modifiers) throws ParseException {
                WBCCondition n = new WBCCondition();
                //n.modifiers = modifiers;
                n.cond = WBCType.CondInvariant;
    jj_consume_token(INVARIANT);
    if (jj_2_53(2147483647)) {
      jj_consume_token(LBRACKET);
      n.name = Name();
      jj_consume_token(RBRACKET);
      n.body = CondBlock();
    } else if (jj_2_54(2147483647)) {
      n.name = Name();
      n.body = CondBlock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public RuleMethod RuleDeclaration(ASTModifiers modifiers) throws ParseException {
  RuleBlock bl; RuleMethod m; NameRef id; Method oldMethod;
    jj_consume_token(RULE);
    id = Name();
          m = mkRuleMethod(id, modifiers, new TypeRef(Type.tpRule)); oldMethod = curMethod; curMethod = m;
    try {
      jj_consume_token(LPAREN);
      if (jj_2_55(1)) {
        modifiers = Modifiers();
        m.params += FormalParameter(modifiers);
        label_38:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_38;
          }
          jj_consume_token(COMMA);
          modifiers = Modifiers();
          m.params += FormalParameter(modifiers);
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
      label_39:
      while (true) {
        switch (jj_nt.kind) {
        case ALIAS:
          ;
          break;
        default:
          break label_39;
        }
        m.aliases += Alias();
      }
      label_40:
      while (true) {
        if (jj_2_56(1)) {
          ;
        } else {
          break label_40;
        }
        modifiers = Modifiers();
        LocalVarDecls(modifiers,m);
      }
      label_41:
      while (true) {
        switch (jj_nt.kind) {
        case REQUIRE:
        case ENSURE:
          ;
          break;
        default:
          break label_41;
        }
        switch (jj_nt.kind) {
        case REQUIRE:
          m.conditions += RequareDeclaration();
          break;
        case ENSURE:
          m.conditions += EnsureDeclaration();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_57(2147483647)) {
                  presc = m;
        m.body = MaybeSkipBlock();
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
                    curMethod = oldMethod;
    }
          {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer(ASTModifiers modifiers) throws ParseException {
        Initializer n = mkInitializer(getToken(0).getPos(),modifiers);
        BlockStat bl;

          presc = n;
    bl = MaybeSkipBlock();
                if (bl != null) n.body = bl;
    switch (jj_nt.kind) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      ;
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  final public TypeRef Type() throws ParseException {
  TypeRef res;
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
    case REPARSE_TYPE:
    case IDENTIFIER:
      res = TypeExpr();
      break;
    default:
      if (Kiev.enabled(Ext.With)) {
        res = ClosureType();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef TypeExpr() throws ParseException {
  TypeRef res; Token t;
    switch (jj_nt.kind) {
    case REPARSE_TYPE:
      res = ReparseType();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
      res = PrimitiveType();
      break;
    case IDENTIFIER:
      res = TypeWithArgs();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_42:
    while (true) {
      switch (jj_nt.kind) {
      case QUESTION:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case REM:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR_LRBRACKETS:
      case OPERATOR:
        ;
        break;
      default:
        break label_42;
      }
      switch (jj_nt.kind) {
      case QUESTION:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case REM:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR:
        t = TypeOperatorChar();
        break;
      case OPERATOR_LRBRACKETS:
        t = jj_consume_token(OPERATOR_LRBRACKETS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  res = new TypeExpr(res,t);
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeNameRef TypeQName() throws ParseException {
  NameRef id; TypeNameRef res;
    id = Name();
                      res = new TypeNameRef(id);
    label_43:
    while (true) {
      switch (jj_nt.kind) {
      case DOT:
        ;
        break;
      default:
        break label_43;
      }
      jj_consume_token(DOT);
      id = Name();
                               res = new TypeNameRef(res, id);
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef TypeWithArgs() throws ParseException {
  NameRef id; TypeRef res; TypeWithArgsRef tra;
    id = QName();
                       res = new TypeNameRef(id);
    label_44:
    while (true) {
      if (jj_2_58(2)) {
        ;
      } else {
        break label_44;
      }
      switch (jj_nt.kind) {
      case DOT:
        jj_consume_token(DOT);
        id = Name();
                                       res = new TypeNameRef(res, id);
        break;
      case LT:
        jj_consume_token(LT);
                                  res = tra = new TypeWithArgsRef(res);
        tra.args += Type();
        label_45:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_45;
          }
          jj_consume_token(COMMA);
          tra.args += Type();
        }
        jj_consume_token(GT);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef NArrType() throws ParseException {
  TypeRef res; Token t;
    switch (jj_nt.kind) {
    case REPARSE_TYPE:
      res = ReparseType();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
      res = PrimitiveType();
      break;
    case IDENTIFIER:
      res = TypeWithArgs();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_46:
    while (true) {
      if (jj_2_59(2)) {
        ;
      } else {
        break label_46;
      }
      switch (jj_nt.kind) {
      case QUESTION:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case REM:
      case OPERATOR_AT:
      case OPERATOR_SHARP:
      case OPERATOR:
        t = TypeOperatorChar();
                                                                  res = new TypeExpr(res,t);
        break;
      case OPERATOR_LRBRACKETS:
        t = jj_consume_token(OPERATOR_LRBRACKETS);
                                                                  res = new TypeExpr(res,t);
        t = TypeOperatorChar();
                                                                  res = new TypeExpr(res,t);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                  res = new TypeExpr(res,t);
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef ClosureType() throws ParseException {
  Token t; TypeClosureRef n = new TypeClosureRef();
    t= jj_consume_token(LPAREN);
                n.pos = t.getPos();
    if (jj_2_60(1)) {
      n.types += Type();
      label_47:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_47;
        }
        jj_consume_token(COMMA);
        n.types += Type();
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(ARROW);
    n.types += Type();
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef PrimitiveType() throws ParseException {
  Token t; TypeRef tp = new TypeRef();
    switch (jj_nt.kind) {
    case BOOLEAN:
      t= jj_consume_token(BOOLEAN);
                          tp.lnk = Type.tpBoolean;
      break;
    case CHAR:
      t= jj_consume_token(CHAR);
                                  tp.lnk = Type.tpChar;
      break;
    case BYTE:
      t= jj_consume_token(BYTE);
                                  tp.lnk = Type.tpByte;
      break;
    case SHORT:
      t= jj_consume_token(SHORT);
                                  tp.lnk = Type.tpShort;
      break;
    case INT:
      t= jj_consume_token(INT);
                                  tp.lnk = Type.tpInt;
      break;
    case LONG:
      t= jj_consume_token(LONG);
                                  tp.lnk = Type.tpLong;
      break;
    case FLOAT:
      t= jj_consume_token(FLOAT);
                                  tp.lnk = Type.tpFloat;
      break;
    case DOUBLE:
      t= jj_consume_token(DOUBLE);
                          tp.lnk = Type.tpDouble;
      break;
    case VOID:
      t= jj_consume_token(VOID);
                                  tp.lnk = Type.tpVoid;
      break;
    case RULE:
      t= jj_consume_token(RULE);
                                  tp.lnk = Type.tpRule;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          tp.pos = t.getPos(); {if (true) return tp;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef ReparseType() throws ParseException {
  Token t;
    t= jj_consume_token(REPARSE_TYPE);
                Type tp = (Type)Kiev.parserAddresses.get(t.image.substring(5,5+8));
                {if (true) return new TypeRef(tp);}
    throw new Error("Missing return statement in function");
  }

  final public LVarExpr Var() throws ParseException {
  Token t;
    t= jj_consume_token(IDENTIFIER);
                LVarExpr id = new LVarExpr();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public NameRef Name() throws ParseException {
  Token t;
    t= jj_consume_token(IDENTIFIER);
                NameRef id = new NameRef();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public NameRef QName() throws ParseException {
  NameRef id; NameRef id2;
    id = Name();
    label_48:
    while (true) {
      if (jj_2_61(2)) {
        ;
      } else {
        break label_48;
      }
      jj_consume_token(DOT);
      id2 = Name();
                        id.name = new KStringBuffer(id.name.len+1+id2.name.len)
                                .append_fast(id.name)
                                .append_fast((byte)'.')
                                .append_fast(id2.name)
                                .toKString();
    }
          {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public ASTIdentifier Identifier() throws ParseException {
  Token t;
    t= jj_consume_token(IDENTIFIER);
                ASTIdentifier id = new ASTIdentifier();
                id.set(t);
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public ASTIdentifier QIdentifier() throws ParseException {
  ASTIdentifier id; ASTIdentifier id2;
    id = Identifier();
    label_49:
    while (true) {
      if (jj_2_62(2)) {
        ;
      } else {
        break label_49;
      }
      jj_consume_token(DOT);
      id2 = Identifier();
                        id.name = new KStringBuffer(id.name.len+1+id2.name.len)
                                .append_fast(id.name)
                                .append_fast((byte)'.')
                                .append_fast(id2.name)
                                .toKString();
    }
          {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public ENode CommaExpression() throws ParseException {
  ENode e; CommaExpr ce = null;
    e = Expression();
    label_50:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_50;
      }
      jj_consume_token(COMMA);
                  if (ce==null) ce = new CommaExpr(e);
      ce.exprs += Expression();
    }
          {if (true) return ce == null ? e : ce;}
    throw new Error("Missing return statement in function");
  }

  final public ASTRuleNode RuleOrExpression() throws ParseException {
  ASTRuleNode e; RuleOrExpr r = null;
    e = RuleAndExpression();
    label_51:
    while (true) {
      switch (jj_nt.kind) {
      case SEMICOLON:
        ;
        break;
      default:
        break label_51;
      }
      jj_consume_token(SEMICOLON);
                  if (r==null) { r = new RuleOrExpr(e); r.pos = getToken(0).getPos();}
      r.rules += RuleAndExpression();
    }
          {if (true) return r == null ? e : r;}
    throw new Error("Missing return statement in function");
  }

  final public ASTRuleNode RuleAndExpression() throws ParseException {
  ASTRuleNode e; RuleAndExpr r = null;
    e = RuleExpression();
    label_52:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_52;
      }
      jj_consume_token(COMMA);
                  if (r==null) { r = new RuleAndExpr(e); r.pos = getToken(0).getPos();}
      r.rules += RuleExpression();
    }
          {if (true) return r == null ? e : r;}
    throw new Error("Missing return statement in function");
  }

  final public ASTRuleNode RuleExpression() throws ParseException {
  ASTRuleNode r;
    if (getToken(1).kind == IDENTIFIER
                     && getToken(2).kind == IS_THE) {
      r = RuleIstheExpression();
    } else if (getToken(1).kind == IDENTIFIER
                     && getToken(2).kind == IS_ONE_OF) {
      r = RuleIsoneofExpression();
    } else if (getToken(1).kind == PCUT) {
      r = RuleCutExpression();
    } else if (getToken(1).kind == LBRACE) {
      jj_consume_token(LBRACE);
      r = RuleOrExpression();
      jj_consume_token(RBRACE);
    } else if (getToken(1).kind == WHILE) {
      jj_consume_token(WHILE);
                  r = new RuleWhileExpr();
      r.expr = Expression();
      switch (jj_nt.kind) {
      case COLON:
        jj_consume_token(COLON);
        r.bt_expr = ExpressionNT(noColonTokenSet);
        break;
      default:
        ;
      }
    } else {
                  r = new RuleExpr();
      r.expr = ExpressionNT(noColonTokenSet);
      switch (jj_nt.kind) {
      case COLON:
        jj_consume_token(COLON);
        r.bt_expr = ExpressionNT(noColonTokenSet);
        break;
      default:
        ;
      }
    }
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public RuleIstheExpr RuleIstheExpression() throws ParseException {
  Token t; RuleIstheExpr r = new RuleIstheExpr();
    r.var = Var();
    t = jj_consume_token(IS_THE);
                   r.pos = t.getPos();
    r.expr = AccessExpression();
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public RuleIsoneofExpr RuleIsoneofExpression() throws ParseException {
  Token t; RuleIsoneofExpr r = new RuleIsoneofExpr();
    r.var = Var();
    t = jj_consume_token(IS_ONE_OF);
                   r.pos = t.getPos();
    r.expr = AccessExpression();
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public RuleCutExpr RuleCutExpression() throws ParseException {
  RuleCutExpr r = new RuleCutExpr();
    jj_consume_token(PCUT);
                r.pos = getToken(0).getPos();
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Token TypeOperatorChar() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case QUESTION:
      t= jj_consume_token(QUESTION);
      break;
    case BANG:
      t= jj_consume_token(BANG);
      break;
    case TILDE:
      t= jj_consume_token(TILDE);
      break;
    case PLUS:
      t= jj_consume_token(PLUS);
      break;
    case MINUS:
      t= jj_consume_token(MINUS);
      break;
    case STAR:
      t= jj_consume_token(STAR);
      break;
    case SLASH:
      t= jj_consume_token(SLASH);
      break;
    case BIT_AND:
      t= jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      t= jj_consume_token(BIT_OR);
      break;
    case XOR:
      t= jj_consume_token(XOR);
      break;
    case REM:
      t= jj_consume_token(REM);
      break;
    case OPERATOR_AT:
      t= jj_consume_token(OPERATOR_AT);
      break;
    case OPERATOR_SHARP:
      t= jj_consume_token(OPERATOR_SHARP);
      break;
    case OPERATOR:
      t= jj_consume_token(OPERATOR);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token OperatorChar() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case ASSIGN:
      t= jj_consume_token(ASSIGN);
      break;
    case ASSIGN2:
      t= jj_consume_token(ASSIGN2);
      break;
    case LT:
      t= jj_consume_token(LT);
      break;
    case GT:
      t= jj_consume_token(GT);
      break;
    case COLON:
      t= jj_consume_token(COLON);
      break;
    case QUESTION:
      t= jj_consume_token(QUESTION);
      break;
    case ARROW:
      t= jj_consume_token(ARROW);
      break;
    case BANG:
      t= jj_consume_token(BANG);
      break;
    case TILDE:
      t= jj_consume_token(TILDE);
      break;
    case EQ:
      t= jj_consume_token(EQ);
      break;
    case LE:
      t= jj_consume_token(LE);
      break;
    case GE:
      t= jj_consume_token(GE);
      break;
    case NE:
      t= jj_consume_token(NE);
      break;
    case SC_OR:
      t= jj_consume_token(SC_OR);
      break;
    case SC_AND:
      t= jj_consume_token(SC_AND);
      break;
    case INCR:
      t= jj_consume_token(INCR);
      break;
    case DECR:
      t= jj_consume_token(DECR);
      break;
    case PLUS:
      t= jj_consume_token(PLUS);
      break;
    case MINUS:
      t= jj_consume_token(MINUS);
      break;
    case STAR:
      t= jj_consume_token(STAR);
      break;
    case SLASH:
      t= jj_consume_token(SLASH);
      break;
    case BIT_AND:
      t= jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      t= jj_consume_token(BIT_OR);
      break;
    case XOR:
      t= jj_consume_token(XOR);
      break;
    case REM:
      t= jj_consume_token(REM);
      break;
    case LSHIFT:
      t= jj_consume_token(LSHIFT);
      break;
    case PLUSASSIGN:
      t= jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      t= jj_consume_token(MINUSASSIGN);
      break;
    case STARASSIGN:
      t= jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      t= jj_consume_token(SLASHASSIGN);
      break;
    case ANDASSIGN:
      t= jj_consume_token(ANDASSIGN);
      break;
    case ORASSIGN:
      t= jj_consume_token(ORASSIGN);
      break;
    case XORASSIGN:
      t= jj_consume_token(XORASSIGN);
      break;
    case REMASSIGN:
      t= jj_consume_token(REMASSIGN);
      break;
    case LSHIFTASSIGN:
      t= jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      t= jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      t= jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case OPERATOR_AT:
      t= jj_consume_token(OPERATOR_AT);
      break;
    case OPERATOR_SHARP:
      t= jj_consume_token(OPERATOR_SHARP);
      break;
    case OPERATOR_UPPER_BOUND:
      t= jj_consume_token(OPERATOR_UPPER_BOUND);
      break;
    case OPERATOR_LOWER_BOUND:
      t= jj_consume_token(OPERATOR_LOWER_BOUND);
      break;
    case OPERATOR:
      t= jj_consume_token(OPERATOR);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ASTOperator Operator() throws ParseException {
  Token t; String image; ASTOperator op = new ASTOperator();
    switch (jj_nt.kind) {
    case ARROW:
    case COLON:
    case QUESTION:
    case LT:
    case GT:
    case ASSIGN:
    case ASSIGN2:
    case BANG:
    case TILDE:
    case EQ:
    case LE:
    case GE:
    case NE:
    case SC_OR:
    case SC_AND:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
    case SLASH:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case REM:
    case LSHIFT:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
    case OPERATOR_AT:
    case OPERATOR_SHARP:
    case OPERATOR_UPPER_BOUND:
    case OPERATOR_LOWER_BOUND:
    case OPERATOR:
      t= OperatorChar();
                  image = t.image;
      label_53:
      while (true) {
        if (jj_2_63(1)) {
          ;
        } else {
          break label_53;
        }
        if (!Kiev.javaMode && operatorLA(1) && checkNoSpace(getToken(0),getToken(1))) {
          t= OperatorChar();
                          image = image+t.image;
        } else if (Kiev.javaMode && getToken(1).kind==GT && checkNoSpace(getToken(0),getToken(1))) {
          t= jj_consume_token(GT);
                          image = image+t.image;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      if (!Kiev.javaMode) {
        jj_consume_token(OPERATOR_ID);
        t= jj_consume_token(IDENTIFIER);
                  image = t.image;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                op.pos = t.getPos();
                op.image = KString.from(image);
                {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public void SureCastOperatorLA() throws ParseException {
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case CAST:
      jj_consume_token(CAST);
      break;
    case REINTERP:
      jj_consume_token(REINTERP);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case RULE:
      PrimitiveType();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MaybeCastOperatorLA() throws ParseException {
    jj_consume_token(LPAREN);
    if (maybeCastLA_Start()) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    Type();
    jj_consume_token(RPAREN);
    switch (jj_nt.kind) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      break;
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case LONG_INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case DOUBLE_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      ConstExpression();
      break;
    case NEW:
      jj_consume_token(NEW);
      break;
    default:
      if (jj_2_64(1)) {
        Operator();
      } else {
        switch (jj_nt.kind) {
        case REPARSE_EXPRESSION:
          ReparseExpression();
          break;
        case FUNCTION:
          jj_consume_token(FUNCTION);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public ENode CastOperator(boolean sure) throws ParseException {
  Token t; ASTCastOperator op = new ASTCastOperator(); op.sure = sure;
    t= jj_consume_token(LPAREN);
          op.pos = t.getPos();
    switch (jj_nt.kind) {
    case CAST:
    case REINTERP:
      switch (jj_nt.kind) {
      case CAST:
        jj_consume_token(CAST);
        break;
      case REINTERP:
        jj_consume_token(REINTERP);
                               op.reinterp=true;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
    op.type = Type();
    jj_consume_token(RPAREN);
          {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ExpressionNT(int[] nt_new) throws ParseException {
  int[] nt_old = no_tokens; no_tokens = nt_new; ENode e;
    try {
      e = Expression();
    } finally {
                    no_tokens = nt_old;
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode Expression() throws ParseException {
  ASTExpression e = new ASTExpression();
    label_54:
    while (true) {
      if (getToken(1).kind==IDENTIFIER && getToken(1).image.equals("instanceof")) {
        e.nodes += Identifier();
        e.nodes += Type();
      } else if (operatorLA(1)) {
        e.nodes += Operator();
      } else if (jj_2_65(2147483647)) {
        e.nodes += CastOperator(true);
      } else if (jj_2_66(2147483647)) {
        e.nodes += CastOperator(false);
      } else if (jj_2_67(2)) {
        e.nodes += AccessExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_68(1)) {
        ;
      } else {
        break label_54;
      }
    }
                if (e.nodes.length == 1 && e.nodes[0] instanceof ENode) {
                        ENode en = (ENode)~e.nodes[0];
                        if (e.isPrimaryExpr())
                                en.setPrimaryExpr(true);
                        {if (true) return en;}
                }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ReparseExpression() throws ParseException {
  Token t;
    t= jj_consume_token(REPARSE_EXPRESSION);
                {if (true) return (ENode)Kiev.parserAddresses.get(t.image.substring(5,5+8));}
    throw new Error("Missing return statement in function");
  }

  final public ENode CallExpression() throws ParseException {
  ASTCallExpression e = new ASTCallExpression();
    e.func = Name();
    switch (jj_nt.kind) {
    case LT:
      jj_consume_token(LT);
      e.targs += Type();
      label_55:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_55;
        }
        jj_consume_token(COMMA);
        e.targs += Type();
      }
      jj_consume_token(GT);
      break;
    default:
      ;
    }
    jj_consume_token(LPAREN);
    if (jj_2_69(1)) {
      e.args += ExpressionNT(null);
      label_56:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_56;
        }
        jj_consume_token(COMMA);
        e.args += ExpressionNT(null);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode CallAccessExpression(ENode obj) throws ParseException {
  ASTCallAccessExpression e = new ASTCallAccessExpression(); e.obj = obj;
    e.func = Name();
    switch (jj_nt.kind) {
    case LT:
      jj_consume_token(LT);
      e.targs += Type();
      label_57:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_57;
        }
        jj_consume_token(COMMA);
        e.targs += Type();
      }
      jj_consume_token(GT);
      break;
    default:
      ;
    }
    jj_consume_token(LPAREN);
    if (jj_2_70(1)) {
      e.args += ExpressionNT(null);
      label_58:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_58;
        }
        jj_consume_token(COMMA);
        e.args += ExpressionNT(null);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode TypeClassExpression() throws ParseException {
  TypeClassExpr e = new TypeClassExpr();
    e.type = Type();
    jj_consume_token(DOT);
    jj_consume_token(CLASS);
                e.pos = getToken(0).getPos();
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ENode AccessExpression() throws ParseException {
  Token t; ENode e = null;
    if (jj_2_71(2147483647)) {
      e = TypeClassExpression();
    } else if (jj_2_72(2)) {
      e = ConstExpression();
    } else if (jj_2_73(2147483647)) {
      e = CallExpression();
    } else if (jj_2_74(2)) {
      e = Identifier();
    } else if (jj_2_75(2147483647)) {
      e = NewInitializedArrayExpression();
    } else if (jj_2_76(2147483647)) {
      e = NewArrayExpression();
    } else if (jj_2_77(2147483647)) {
      e = NewExpression();
    } else {
      switch (jj_nt.kind) {
      case REPARSE_EXPRESSION:
        e = ReparseExpression();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        e = ExpressionNT(null);
        jj_consume_token(RPAREN);
                  e.setPrimaryExpr(true);
        break;
      default:
        if (jj_2_78(2147483647)) {
          e = AnonymouseClosure();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    label_59:
    while (true) {
      switch (jj_nt.kind) {
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        break label_59;
      }
      if (jj_2_79(2147483647)) {
        jj_consume_token(DOT);
        e = CallAccessExpression(e);
      } else if (jj_2_80(3)) {
        t= jj_consume_token(DOT);
                  AccessExpr ae = new AccessExpr(); ae.obj = e; ae.pos = t.getPos();
        ae.ident = Name();
          e = ae;
      } else if (jj_2_81(2)) {
        t= jj_consume_token(LBRACKET);
                  ContainerAccessExpr ae = new ContainerAccessExpr(); ae.obj = e; ae.pos = t.getPos();
        ae.index = ExpressionNT(null);
        jj_consume_token(RBRACKET);
          e = ae;
      } else if (jj_2_82(2147483647)) {
        t= jj_consume_token(DOT);
                  ENode acc = e;
        e = NewExpression();
          e.outer = acc;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public NewClosure AnonymouseClosure() throws ParseException {
  ASTModifiers modifiers; NewClosure nc = new NewClosure(getToken(1).getPos());
    jj_consume_token(FUNCTION);
    jj_consume_token(LPAREN);
    if (jj_2_83(1)) {
      modifiers = Modifiers();
      nc.params += FormalParameter(modifiers);
      label_60:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_60;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        nc.params += FormalParameter(modifiers);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(ARROW);
    if (getToken(1).kind == RULE) {
      nc.type_ret = Type();
      nc.body = RuleBlock();
    } else if (jj_2_84(1)) {
      nc.type_ret = Type();
      nc.body = Block();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return nc;}
    throw new Error("Missing return statement in function");
  }

  final public ConstExpr ConstExpression() throws ParseException {
  ConstExpr ce;
    switch (jj_nt.kind) {
    case FALSE:
    case TRUE:
      ce = BooleanConstExpression();
      break;
    case INTEGER_LITERAL:
      ce = IntConstExpression();
      break;
    case LONG_INTEGER_LITERAL:
      ce = LongConstExpression();
      break;
    case FLOATING_POINT_LITERAL:
      ce = FloatConstExpression();
      break;
    case DOUBLE_POINT_LITERAL:
      ce = DoubleConstExpression();
      break;
    case CHARACTER_LITERAL:
      ce = CharConstExpression();
      break;
    case NULL:
      ce = NullConstExpression();
      break;
    case STRING_LITERAL:
      ce = StringConstExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ce;}
    throw new Error("Missing return statement in function");
  }

  final public ConstBoolExpr BooleanConstExpression() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case TRUE:
      t= jj_consume_token(TRUE);
      break;
    case FALSE:
      t= jj_consume_token(FALSE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return (ConstBoolExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstIntExpr IntConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(INTEGER_LITERAL);
          {if (true) return (ConstIntExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstLongExpr LongConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(LONG_INTEGER_LITERAL);
          {if (true) return (ConstLongExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstFloatExpr FloatConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(FLOATING_POINT_LITERAL);
          {if (true) return (ConstFloatExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstDoubleExpr DoubleConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(DOUBLE_POINT_LITERAL);
          {if (true) return (ConstDoubleExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstCharExpr CharConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(CHARACTER_LITERAL);
          {if (true) return (ConstCharExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstNullExpr NullConstExpression() throws ParseException {
  Token t;
    t= jj_consume_token(NULL);
          {if (true) return (ConstNullExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public ConstStringExpr StringConstExpression() throws ParseException {
  Token t, t1;
    t= jj_consume_token(STRING_LITERAL);
    label_61:
    while (true) {
      if (getToken(1).kind==PLUS
                       && getToken(2).kind==STRING_LITERAL) {
        ;
      } else {
        break label_61;
      }
      jj_consume_token(PLUS);
      t1= jj_consume_token(STRING_LITERAL);
                        t.image = t.image.substring(0,t.image.length()-1)+t1.image.substring(1);
                        t.endLine = t1.endLine;
                        t.endColumn = t1.endColumn;
    }
          {if (true) return (ConstStringExpr)ConstExpr.fromSource(t);}
    throw new Error("Missing return statement in function");
  }

  final public NewExpr NewExpression() throws ParseException {
        boolean old_mode;
        ASTModifiers modifiers;
        Struct clazz, oldClazz;
        NewExpr ne = new NewExpr();
        ne.pos = getToken(1).getPos();
    jj_consume_token(NEW);
    modifiers = Modifiers();
    ne.type = NArrType();
    jj_consume_token(LPAREN);
    if (jj_2_85(1)) {
      ne.args += ExpressionNT(null);
      label_62:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_62;
        }
        jj_consume_token(COMMA);
        ne.args += ExpressionNT(null);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    if (jj_2_86(2147483647)) {
                        old_mode = interface_only;
                        interface_only = false;
                        ne.clazz = clazz = mkStruct(null, ACC_FINAL, modifiers, ne);
                        oldClazz = curClazz;
                        curClazz = clazz;
      try {
        TypeBodyDeclaration(clazz);
      } finally {
                        interface_only = old_mode;
                        curClazz = oldClazz;
      }
    } else {
      ;
    }
          {if (true) return ne;}
    throw new Error("Missing return statement in function");
  }

  final public NewArrayExpr NewArrayExpression() throws ParseException {
  int dim=0; NewArrayExpr ne = new NewArrayExpr(); ne.pos = getToken(1).getPos();
    jj_consume_token(NEW);
    ne.type = NArrType();
    label_63:
    while (true) {
      jj_consume_token(LBRACKET);
      ne.args += ExpressionNT(null);
      jj_consume_token(RBRACKET);
                  dim += 1;
      if (jj_2_87(2)) {
        ;
      } else {
        break label_63;
      }
    }
    label_64:
    while (true) {
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_64;
      }
      jj_consume_token(OPERATOR_LRBRACKETS);
                  dim += 1;
    }
                ne.dim = dim;
                {if (true) return ne;}
    throw new Error("Missing return statement in function");
  }

  final public NewInitializedArrayExpr NewInitializedArrayExpression() throws ParseException {
  int dim=0; NewInitializedArrayExpr ne = new NewInitializedArrayExpr(); ne.pos = getToken(1).getPos();
    jj_consume_token(NEW);
    ne.type = NArrType();
    label_65:
    while (true) {
      jj_consume_token(OPERATOR_LRBRACKETS);
                  dim += 1;
      switch (jj_nt.kind) {
      case OPERATOR_LRBRACKETS:
        ;
        break;
      default:
        break label_65;
      }
    }
    jj_consume_token(LBRACE);
    if (jj_2_89(1)) {
      ne.args += VariableInitializer();
      label_66:
      while (true) {
        if (jj_2_88(2)) {
          ;
        } else {
          break label_66;
        }
        jj_consume_token(COMMA);
        ne.args += VariableInitializer();
      }
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
                ne.dims = new int[dim];
                ne.dims[0] = ne.args.length;
                {if (true) return ne;}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  final public ENode Statement() throws ParseException {
  ENode st;
    if (labledStatementLA()) {
      st = LabeledStatement();
    } else {
      switch (jj_nt.kind) {
      case LBRACE:
        st = Block();
        break;
      case SEMICOLON:
        st = EmptyStatement();
        break;
      case SWITCH:
        st = SwitchStatement();
        break;
      case IF:
        st = IfStatement();
        break;
      case WHILE:
        st = WhileStatement();
        break;
      case DO:
        st = DoStatement();
        break;
      case FOR:
        st = ForStatement();
        break;
      case FOREACH:
        st = ForEachStatement();
        break;
      case BREAK:
        st = BreakStatement();
        break;
      case CONTINUE:
        st = ContinueStatement();
        break;
      case RETURN:
        st = ReturnStatement();
        break;
      case THROW:
        st = ThrowStatement();
        break;
      case SYNCHRONIZED:
        st = SynchronizedStatement();
        break;
      case WITH:
        st = WithStatement();
        break;
      case TRY:
        st = TryStatement();
        break;
      case GOTO:
        st = GotoStatement();
        break;
      case REPARSE_STATEMENT:
        st = ReparseStatement();
        break;
      default:
        if (jj_2_90(1)) {
          st = StatementExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ReparseStatement() throws ParseException {
  Token t;
    t= jj_consume_token(REPARSE_STATEMENT);
                {if (true) return (ENode)Kiev.parserAddresses.get(t.image.substring(5,5+8));}
    throw new Error("Missing return statement in function");
  }

  final public ENode LabeledStatement() throws ParseException {
  LabeledStat st = new LabeledStat();
    st.ident = Name();
    jj_consume_token(COLON);
          st.pos = getToken(0).getPos();
    st.stat = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public BlockStat PrescannedBlock(PrescannedBody b) throws ParseException {
        Token t;
        // Skip to the start of prescanned body
        Token tk;
        for(;;) {
                tk = getToken(1);
                if( tk.beginLine==b.lineno && tk.beginColumn==b.columnno )
                        break;
                if( tk.kind == EOF ) {
                        throw new CompilerException(b,
                                "Expected to find start of block after scanning. Have you changed the file?"
                        );
                }
                getNextToken();
        }
        BlockStat bl;
    bl= Block();
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public BlockStat Block() throws ParseException {
  boolean old_declMode;
    jj_consume_token(LBRACE);
                BlockStat bl = new BlockStat();
                bl.pos = getToken(1).getPos();
                old_declMode = declMode;
                declMode = false;
    try {
      label_67:
      while (true) {
        if (jj_2_91(1)) {
          ;
        } else {
          break label_67;
        }
        BlockStatement(bl.stats);
      }
    } finally {
                    declMode = old_declMode;
    }
    jj_consume_token(RBRACE);
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public RuleBlock PrescannedRuleBlock(PrescannedBody b) throws ParseException {
        Token t;
        // Skip to the start of prescanned body
        Token tk;
        for(;;) {
                tk = getToken(1);
                if( tk.beginLine==b.lineno && tk.beginColumn==b.columnno )
                        break;
                if( tk.kind == EOF ) {
                        throw new CompilerException(b,
                                "Expected to find start of block after scanning. Have you changed the file?"
                        );
                }
                getNextToken();
        }
        RuleBlock bl;
    bl= RuleBlock();
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public RuleBlock RuleBlock() throws ParseException {
  boolean old_declMode;
    jj_consume_token(LBRACE);
                RuleBlock bl = new RuleBlock();
                bl.pos = getToken(1).getPos();
                old_declMode = declMode;
                declMode = false;
    try {
      bl.node = RuleOrExpression();
    } finally {
                    declMode = old_declMode;
    }
    jj_consume_token(RBRACE);
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public BlockStat CondBlock() throws ParseException {
                BlockStat bl = new BlockStat();
                bl.pos = getToken(1).getPos();
    switch (jj_nt.kind) {
    case LBRACE:
      jj_consume_token(LBRACE);
      label_68:
      while (true) {
        bl.stats += CondStatement();
        if (jj_2_92(1)) {
          ;
        } else {
          break label_68;
        }
      }
      jj_consume_token(RBRACE);
      break;
    default:
      if (jj_2_93(1)) {
        bl.stats += CondStatement();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return bl;}
    throw new Error("Missing return statement in function");
  }

  final public void BlockStatement(NArrENodes stats) throws ParseException {
  boolean old_declMode; ASTModifiers modifiers; TypeRef tp; Struct clazz; Var var;
    if (jj_2_94(2147483647)) {
                        old_declMode = declMode;
                        declMode = true;
      try {
        modifiers = Modifiers();
        clazz = TypeDeclaration(modifiers, stats.getParent());
                          stats += new LocalStructDecl(clazz);
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
      } finally {
                        declMode = old_declMode;
      }
    } else if (jj_2_95(2147483647)) {
      modifiers = Modifiers();
      tp = Type();
      var = VarDecl(modifiers, tp, true);
                  stats += new VarDecl(var);
      label_69:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_69;
        }
        jj_consume_token(COMMA);
        var = VarDecl(modifiers, tp, false);
                          stats += new VarDecl(var);
      }
      jj_consume_token(SEMICOLON);
    } else {
      stats += Statement();
    }
  }

  final public CondStat CondStatement() throws ParseException {
  Token t = getToken(1); CondStat st = new CondStat();
    st.cond = ExpressionNT(noColonTokenSet);
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
                  t = null;
      st.message = Expression();
      break;
    default:
      ;
    }
                if( t != null ) {
                        int pos = t.getPos();
                        StringBuffer sb = new StringBuffer();
                        while( t != null && t != getToken(1) ) {
                                sb.append(t.image).append(' ');
                                t = t.next;
                        }
                        ConstStringExpr e = new ConstStringExpr(KString.from(sb.toString()));
                        e.pos = pos;
                        st.message = e;
                }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ENode EmptyStatement() throws ParseException {
  Token t; EmptyStat st = new EmptyStat();
    t= jj_consume_token(SEMICOLON);
                st.pos = t.getPos();
                {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ENode StatementExpression() throws ParseException {
  ExprStat st = new ExprStat();
    st.expr = ExpressionNT(null);
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStat SwitchStatement() throws ParseException {
  SwitchStat st = new SwitchStat();
    jj_consume_token(SWITCH);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    st.sel = ExpressionNT(null);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_70:
    while (true) {
      st.cases += CaseStatements();
      switch (jj_nt.kind) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        break label_70;
      }
    }
    jj_consume_token(RBRACE);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public CaseLabel CaseStatements() throws ParseException {
  CaseLabel st;
    if (jj_2_96(2147483647)) {
      st = PizzaCase();
    } else {
      switch (jj_nt.kind) {
      case CASE:
      case _DEFAULT:
        st = NormalCase();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public CaseLabel NormalCase() throws ParseException {
  CaseLabel c = new CaseLabel();
    switch (jj_nt.kind) {
    case CASE:
      jj_consume_token(CASE);
                          c.pos = getToken(0).getPos();
      c.val = ExpressionNT(noColonTokenSet);
      jj_consume_token(COLON);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
                                  c.pos = getToken(0).getPos();
      jj_consume_token(COLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_71:
    while (true) {
      if (jj_2_97(1)) {
        ;
      } else {
        break label_71;
      }
      BlockStatement(c.stats);
    }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public CaseLabel PizzaCase() throws ParseException {
  Token t; ASTModifiers modifiers; CaseLabel c = new CaseLabel();
    jj_consume_token(CASE);
                          c.pos = getToken(0).getPos();
    c.val = TypeWithArgs();
    jj_consume_token(LPAREN);
    if (jj_2_98(1)) {
      modifiers = Modifiers();
      c.pattern += PizzaCaseFormalParameter(modifiers);
      label_72:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_72;
        }
        jj_consume_token(COMMA);
        modifiers = Modifiers();
        c.pattern += PizzaCaseFormalParameter(modifiers);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(COLON);
    label_73:
    while (true) {
      if (jj_2_99(1)) {
        ;
      } else {
        break label_73;
      }
      BlockStatement(c.stats);
    }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public IfElseStat IfStatement() throws ParseException {
  IfElseStat st = new IfElseStat(); ASTOperator not = null;
    jj_consume_token(IF);
          st.pos = getToken(0).getPos();
    if (jj_2_100(2147483647)) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(LPAREN);
    st.cond = ExpressionNT(null);
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(RPAREN);
    st.thenSt = Statement();
    switch (jj_nt.kind) {
    case ELSE:
      jj_consume_token(ELSE);
      st.elseSt = Statement();
      break;
    default:
      ;
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public WhileStat WhileStatement() throws ParseException {
  WhileStat st = new WhileStat(); ASTOperator not = null;
    jj_consume_token(WHILE);
          st.pos = getToken(0).getPos();
    if (jj_2_101(2147483647)) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(LPAREN);
    st.cond = ExpressionNT(null);
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public DoWhileStat DoStatement() throws ParseException {
  DoWhileStat st = new DoWhileStat(); ASTOperator not = null;
    jj_consume_token(DO);
          st.pos = getToken(0).getPos();
    st.body = Statement();
    jj_consume_token(WHILE);
    if (jj_2_102(2147483647)) {
      not = Operator();
    } else {
      ;
    }
    jj_consume_token(LPAREN);
    st.cond = ExpressionNT(null);
                  if (not != null) st.cond = mkNotExpr(not,st.cond);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ForStat ForStatement() throws ParseException {
  ForStat st = new ForStat();
    jj_consume_token(FOR);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    st.init = ForInit();
    if (jj_2_103(1)) {
      st.cond = ExpressionNT(null);
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
    if (jj_2_104(1)) {
      st.iter = CommaExpression();
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ForEachStat ForEachStatement() throws ParseException {
  ASTModifiers modifiers; ForEachStat st = new ForEachStat();
    jj_consume_token(FOREACH);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    if (jj_2_105(2147483647)) {
      modifiers = Modifiers();
      st.var = PizzaCaseFormalParameter(modifiers);
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
    st.container = ExpressionNT(null);
    switch (jj_nt.kind) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      if (jj_2_106(1)) {
        st.cond = ExpressionNT(null);
      } else {
        ;
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
    st.body = Statement();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ENode ForInit() throws ParseException {
  ASTModifiers modifiers; ENode n; ASTModifiers modifiers; TypeRef tp; ForInit fi;
    if (jj_2_107(2147483647)) {
      modifiers = Modifiers();
                  fi = new ForInit();
      tp = Type();
      fi.decls += VarDecl(modifiers, tp, true);
      label_74:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_74;
        }
        jj_consume_token(COMMA);
        fi.decls += VarDecl(modifiers, tp, false);
      }
      jj_consume_token(SEMICOLON);
                  n = fi;
    } else if (jj_2_108(1)) {
      n = CommaExpression();
      jj_consume_token(SEMICOLON);
    } else {
      switch (jj_nt.kind) {
      case SEMICOLON:
        n = EmptyStatement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public ENode GotoStatement() throws ParseException {
  ENode st; ENode expr; NameRef id;
    jj_consume_token(GOTO);
    switch (jj_nt.kind) {
    case CASE:
      jj_consume_token(CASE);
                        st = new GotoCaseStat();
                        st.pos = getToken(0).getPos();
      expr = ExpressionNT(null);
                  ((GotoCaseStat)st).expr = expr;
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
                        st = new GotoCaseStat();
                        st.pos = getToken(0).getPos();
      break;
    case IDENTIFIER:
                        st = new GotoStat();
                        st.pos = getToken(0).getPos();
      id = Name();
                  ((GotoStat)st).ident = id;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public BreakStat BreakStatement() throws ParseException {
  BreakStat st = new BreakStat();
    jj_consume_token(BREAK);
          st.pos = getToken(0).getPos();
    switch (jj_nt.kind) {
    case IDENTIFIER:
      st.ident = Name();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStat ContinueStatement() throws ParseException {
  ContinueStat st = new ContinueStat();
    jj_consume_token(CONTINUE);
          st.pos = getToken(0).getPos();
    switch (jj_nt.kind) {
    case IDENTIFIER:
      st.ident = Name();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStat ReturnStatement() throws ParseException {
  ReturnStat st = new ReturnStat();
    jj_consume_token(RETURN);
          st.pos = getToken(0).getPos();
    if (jj_2_109(1)) {
      st.expr = ExpressionNT(null);
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStat ThrowStatement() throws ParseException {
  ThrowStat st = new ThrowStat();
    jj_consume_token(THROW);
          st.pos = getToken(0).getPos();
    st.expr = ExpressionNT(null);
    jj_consume_token(SEMICOLON);
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStat SynchronizedStatement() throws ParseException {
  SynchronizedStat st = new SynchronizedStat();
    jj_consume_token(SYNCHRONIZED);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    st.expr = ExpressionNT(null);
    jj_consume_token(RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public WithStat WithStatement() throws ParseException {
  WithStat st = new WithStat();
    jj_consume_token(WITH);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    st.expr = ExpressionNT(null);
    jj_consume_token(RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public TryStat TryStatement() throws ParseException {
  ASTModifiers modifiers; TryStat st = new TryStat();
    jj_consume_token(TRY);
          st.pos = getToken(0).getPos();
    st.body = Block();
    label_75:
    while (true) {
      switch (jj_nt.kind) {
      case CATCH:
        ;
        break;
      default:
        break label_75;
      }
      st.catchers += CatchInfo();
    }
    switch (jj_nt.kind) {
    case FINALLY:
      st.finally_catcher = FinallyInfo();
      break;
    default:
      ;
    }
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public CatchInfo CatchInfo() throws ParseException {
  ASTModifiers modifiers; CatchInfo st = new CatchInfo();
    jj_consume_token(CATCH);
          st.pos = getToken(0).getPos();
    jj_consume_token(LPAREN);
    modifiers = Modifiers();
    st.arg = PizzaCaseFormalParameter(modifiers);
    jj_consume_token(RPAREN);
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public FinallyInfo FinallyInfo() throws ParseException {
  Token t; FinallyInfo st = new FinallyInfo();
    jj_consume_token(FINALLY);
          st.pos = getToken(0).getPos();
    st.body = Block();
          {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_3R_430() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_3R_450()) return true;
    }
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3_100() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_465()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_263()) return true;
    return false;
  }

  final private boolean jj_3R_464() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_263()) return true;
    return false;
  }

  final private boolean jj_3R_429() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_399() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_429()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_430()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_463() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_442() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_399()) return true;
    return false;
  }

  final private boolean jj_3R_448() {
    if (jj_scan_token(ASSIGN2)) return true;
    return false;
  }

  final private boolean jj_3R_500() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_83()) return true;
    if (jj_3R_399()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_442()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_99() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_scan_token(IF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_463()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_263()) return true;
    xsp = jj_scanpos;
    if (jj_3R_464()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_423() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_3R_448()) return true;
    }
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_392() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_391()) return true;
    return false;
  }

  final private boolean jj_3_98() {
    if (jj_3R_76()) return true;
    if (jj_3R_136()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_500()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_422() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_391() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_422()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_423()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_495() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_262()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_98()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(COLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_97() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_499() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_498() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_83()) return true;
    if (jj_3R_391()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_392()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_96() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_135()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_350()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_496() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_498()) {
    jj_scanpos = xsp;
    if (jj_3R_499()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_492() {
    if (jj_3R_496()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_491() {
    if (jj_3R_495()) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_478() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_491()) {
    jj_scanpos = xsp;
    if (jj_3R_492()) return true;
    }
    return false;
  }

  final private boolean jj_3R_462() {
    if (jj_3R_478()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3R_462()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_462()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_98()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_117()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_349()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_477() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_3R_323()) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_400() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_399()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_263()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_98()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_477()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_95() {
    if (jj_3R_76()) return true;
    if (jj_3R_83()) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(OPERATOR_AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) {
    jj_scanpos = xsp;
    if (jj_3R_304()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_334()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_76()) return true;
    if (jj_3R_83()) return true;
    if (jj_3R_399()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_400()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(134)) jj_scanpos = xsp;
    if (jj_3R_334()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(135)) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_334()) return true;
    return false;
  }

  final private boolean jj_3_94() {
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_3R_334()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_335()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_323() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3_92() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_76()) return true;
    if (jj_3R_138()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_254()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(META_THROWS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) return true;
    }
    return false;
  }

  final private boolean jj_3R_324() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) {
    jj_scanpos = xsp;
    if (jj_3R_333()) return true;
    }
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_254()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_93() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3_92()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_92()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(META_VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3_93()) return true;
    }
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(META_TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(META_SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(META_NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(META_FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(META_ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(META_STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_363()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(META_PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(META_PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(META_PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(VIRTUAL)) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_scan_token(META_VIRTUAL)) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(META_UNERASABLE)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(META_FORWARD)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(FORWARD)) return true;
    return false;
  }

  final private boolean jj_3_91() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(META_SINGLETON)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_scan_token(NO_READ_WRITE)) return true;
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_scan_token(READ_WRITE)) return true;
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_scan_token(WRITE_ONLY)) return true;
    return false;
  }

  final private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_scan_token(READ_ONLY)) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_327()) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_327()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_327()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(META_ACCESS1)) return true;
    if (jj_3R_327()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_ACCESS)) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_327()) return true;
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_327()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_347()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_scan_token(COMMA1)) return true;
    if (jj_3R_327()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    if (jj_3R_327()) return true;
    xsp = jj_scanpos;
    if (jj_3R_328()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_142() {
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_91()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = Kiev.enabled(Ext.Access);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_142()) return true;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_440() {
    if (jj_scan_token(OPERATOR_LOWER_BOUND)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_439() {
    if (jj_scan_token(OPERATOR_UPPER_BOUND)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_411() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_439()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_440()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_3R_117()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_263()) return true;
    return false;
  }

  final private boolean jj_3R_410() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_scan_token(REPARSE_STATEMENT)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_83()) return true;
    if (jj_scan_token(OPERATOR_LOWER_BOUND)) return true;
    return false;
  }

  final private boolean jj_3R_377() {
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_410()) {
    jj_scanpos = xsp;
    if (jj_3R_411()) return true;
    }
    return false;
  }

  final private boolean jj_3R_409() {
    if (jj_scan_token(OPERATOR_UPPER_BOUND)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_90() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_3R_322()) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_3R_319()) return true;
    return false;
  }

  final private boolean jj_3R_376() {
    if (jj_3R_83()) return true;
    if (jj_scan_token(OPERATOR_LOWER_BOUND)) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_409()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_3R_318()) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_3R_317()) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_3R_316()) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_3R_315()) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_3R_314()) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_3R_313()) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_3R_312()) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_3R_311()) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_3R_310()) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_3R_309()) return true;
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_3R_308()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(TYPEDEF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) {
    jj_scanpos = xsp;
    if (jj_3R_377()) return true;
    }
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_3R_307()) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_3R_306()) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = labledStatementLA();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3_90()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_239()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_240()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_438() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3_88() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_76()) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_438()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_89() {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_88()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(139)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_351() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_375() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_130()) return true;
    Token xsp;
    if (jj_3R_351()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_351()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3_89()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_117()) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_375()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_83()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(181)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_87() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_94()) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_370() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(RULE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_130()) return true;
    Token xsp;
    if (jj_3_87()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_87()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_352()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3_86() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_138()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_149()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_3R_359()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3_85() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_358()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_367() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    if (jj_3R_366()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_76()) return true;
    if (jj_3R_130()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_353()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(RULE)) return true;
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_3R_76()) return true;
    if (jj_3R_366()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_367()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(138)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_436() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_437() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_435() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_408() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_437()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_362()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_407() {
    if (jj_scan_token(EXTENDS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_435()) {
    jj_scanpos = xsp;
    if (jj_3R_436()) return true;
    }
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_282()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_406() {
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(VIEW)) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("of");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_406()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_130()) return true;
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3R_407()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_408()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_405() {
    if (jj_3R_323()) return true;
    return false;
  }

  final private boolean jj_3R_404() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_434() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_scan_token(DOUBLE_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(RULE)) return true;
    return false;
  }

  final private boolean jj_3R_403() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_434()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(META_INTERFACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_404()) {
    jj_scanpos = xsp;
    if (jj_3R_405()) return true;
    }
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_432() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_433() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_431() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_402() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_433()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(LONG_INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_3R_117()) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_403()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_401() {
    if (jj_scan_token(EXTENDS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_431()) {
    jj_scanpos = xsp;
    if (jj_3R_432()) return true;
    }
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_256()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_117()) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_401()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_402()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    }
    }
    }
    if (jj_3R_359()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_84() {
    if (jj_3R_83()) return true;
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_3R_83()) return true;
    if (jj_3R_267()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    return false;
  }

  final private boolean jj_3_83() {
    if (jj_3R_76()) return true;
    if (jj_3R_111()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_360()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_205()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_82() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_130()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == RULE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_79() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_81() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_80() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3_78() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_355()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3_77() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_76()) return true;
    if (jj_3R_130()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_76() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_130()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_75() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_130()) return true;
    Token xsp;
    if (jj_scan_token(181)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(181)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_249()) return true;
    return false;
  }

  final private boolean jj_3_73() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_247()) return true;
    return false;
  }

  final private boolean jj_3_71() {
    if (jj_3R_83()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3_74() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_246()) return true;
    return false;
  }

  final private boolean jj_3_72() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_365() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_364() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_3R_83()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3_70() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_365()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_361() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_364()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3_70()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_69() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_357()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_356()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3_69()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("syntax");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_78()) return true;
    }
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(REPARSE_EXPRESSION)) return true;
    return false;
  }

  final private boolean jj_3_66() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3_65() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3_67() {
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_118()) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_68() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind==IDENTIFIER && getToken(1).image.equals("instanceof");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_124()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = operatorLA(1);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3_67()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    if (jj_3_68()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_343() {
    if (jj_scan_token(REINTERP)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3_64() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_331() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_3R_343()) return true;
    }
    return false;
  }

  final private boolean jj_3R_169() {
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_331()) jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = maybeCastLA_Start();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_169()) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(OPERATOR_ID)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3_63() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = !Kiev.javaMode && operatorLA(1) && checkNoSpace(getToken(0),getToken(1));
    lookingAhead = false;
    if (!jj_semLA || jj_3R_119()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = Kiev.javaMode && getToken(1).kind==GT && checkNoSpace(getToken(0),getToken(1));
    lookingAhead = false;
    if (!jj_semLA || jj_3R_120()) return true;
    }
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = !Kiev.javaMode;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_148()) return true;
    }
    return false;
  }

  final private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(179)) {
    jj_scanpos = xsp;
    if (jj_scan_token(180)) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) {
    jj_scanpos = xsp;
    if (jj_scan_token(184)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(179)) {
    jj_scanpos = xsp;
    if (jj_scan_token(180)) {
    jj_scanpos = xsp;
    if (jj_scan_token(184)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_426() {
    if (jj_scan_token(PCUT)) return true;
    return false;
  }

  final private boolean jj_3R_425() {
    if (jj_3R_449()) return true;
    if (jj_scan_token(IS_ONE_OF)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_428() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_424() {
    if (jj_3R_449()) return true;
    if (jj_scan_token(IS_THE)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_427() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_398() {
    if (jj_3R_98()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_428()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_397() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_427()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_396() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_363()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_395() {
    if (jj_3R_426()) return true;
    return false;
  }

  final private boolean jj_3R_394() {
    if (jj_3R_425()) return true;
    return false;
  }

  final private boolean jj_3R_393() {
    if (jj_3R_424()) return true;
    return false;
  }

  final private boolean jj_3R_371() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER
                 && getToken(2).kind == IS_THE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_393()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER
                 && getToken(2).kind == IS_ONE_OF;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_394()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == PCUT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_395()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == LBRACE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_396()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == WHILE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_397()) {
    jj_scanpos = xsp;
    if (jj_3R_398()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_372() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_371()) return true;
    return false;
  }

  final private boolean jj_3R_368() {
    if (jj_3R_371()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_372()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_369() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_368()) return true;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_3R_368()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_369()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_494() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_494()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_449() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(REPARSE_TYPE)) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_scan_token(RULE)) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_302()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_330() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_262()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_3R_135()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_346()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_270() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) return true;
    }
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_3R_262()) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_235()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = Kiev.enabled(Ext.With);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_146()) return true;
    }
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_156()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_380() {
    if (jj_3R_156()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_412() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_415() {
    if (jj_3R_444()) return true;
    return false;
  }

  final private boolean jj_3R_379() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_414()) {
    jj_scanpos = xsp;
    if (jj_3R_415()) return true;
    }
    return false;
  }

  final private boolean jj_3R_414() {
    if (jj_3R_443()) return true;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_3R_76()) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_378() {
    if (jj_3R_413()) return true;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_3R_76()) return true;
    if (jj_3R_111()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_412()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(RULE)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_378()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_379()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_380()) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) return true;
    }
    return false;
  }

  final private boolean jj_3R_374() {
    if (jj_3R_117()) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_373() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(INVARIANT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_373()) {
    jj_scanpos = xsp;
    if (jj_3R_374()) return true;
    }
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_456() {
    if (jj_3R_117()) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_455() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_444() {
    if (jj_scan_token(ENSURE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_455()) {
    jj_scanpos = xsp;
    if (jj_3R_456()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_454() {
    if (jj_3R_117()) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_453() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_460() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_443() {
    if (jj_scan_token(REQUIRE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_453()) {
    jj_scanpos = xsp;
    if (jj_3R_454()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_384() {
    if (jj_3R_156()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_418() {
    if (jj_3R_444()) return true;
    return false;
  }

  final private boolean jj_3R_383() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) {
    jj_scanpos = xsp;
    if (jj_3R_418()) return true;
    }
    return false;
  }

  final private boolean jj_3R_417() {
    if (jj_3R_443()) return true;
    return false;
  }

  final private boolean jj_3R_382() {
    if (jj_3R_416()) return true;
    return false;
  }

  final private boolean jj_3R_445() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_460()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  final private boolean jj_3R_381() {
    if (jj_3R_413()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_3R_76()) return true;
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_445()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_76()) return true;
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_421() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_461() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_3R_117()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_381()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_382()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_383()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_384()) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) return true;
    }
    return false;
  }

  final private boolean jj_3R_390() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_421()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_389() {
    if (jj_3R_156()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_420() {
    if (jj_3R_444()) return true;
    return false;
  }

  final private boolean jj_3R_388() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_419()) {
    jj_scanpos = xsp;
    if (jj_3R_420()) return true;
    }
    return false;
  }

  final private boolean jj_3R_419() {
    if (jj_3R_443()) return true;
    return false;
  }

  final private boolean jj_3R_387() {
    if (jj_3R_416()) return true;
    return false;
  }

  final private boolean jj_3R_447() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_461()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    return false;
  }

  final private boolean jj_3R_386() {
    if (jj_3R_413()) return true;
    return false;
  }

  final private boolean jj_3R_385() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_76()) return true;
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_447()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_76()) return true;
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_482() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_481() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_76()) return true;
    if (jj_3R_136()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_473() {
    if (jj_3R_482()) return true;
    return false;
  }

  final private boolean jj_3R_472() {
    if (jj_3R_481()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_94()) return true;
    if (jj_3R_83()) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_385()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_386()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_387()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_388()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_389()) {
    jj_scanpos = xsp;
    if (jj_3R_390()) return true;
    }
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_267()) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_268()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_472()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_473()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_490() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  final private boolean jj_3R_489() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  final private boolean jj_3R_488() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_487() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = interface_only;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_236()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = presc instanceof RuleMethod;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_486() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  final private boolean jj_3R_485() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  final private boolean jj_3R_484() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_483() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_117()) return true;
    if (jj_scan_token(OPERATOR_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_487()) {
    jj_scanpos = xsp;
    if (jj_3R_488()) {
    jj_scanpos = xsp;
    if (jj_3R_489()) {
    jj_scanpos = xsp;
    if (jj_3R_490()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3_109() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_109()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(OPERATOR_ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_254()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_483()) {
    jj_scanpos = xsp;
    if (jj_3R_484()) {
    jj_scanpos = xsp;
    if (jj_3R_485()) {
    jj_scanpos = xsp;
    if (jj_3R_486()) return true;
    }
    }
    }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_471()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_471() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_470()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_470() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_441() {
    if (jj_3R_452()) return true;
    return false;
  }

  final private boolean jj_3R_452() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_476() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_475() {
    if (jj_scan_token(_DEFAULT)) return true;
    return false;
  }

  final private boolean jj_3R_413() {
    if (jj_scan_token(ALIAS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_441()) return true;
    }
    return false;
  }

  final private boolean jj_3R_446() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_334()) return true;
    return false;
  }

  final private boolean jj_3R_474() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_493() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_399()) return true;
    return false;
  }

  final private boolean jj_3R_480() {
    if (jj_3R_307()) return true;
    return false;
  }

  final private boolean jj_3R_416() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_334()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_446()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_scan_token(GOTO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_474()) {
    jj_scanpos = xsp;
    if (jj_3R_475()) {
    jj_scanpos = xsp;
    if (jj_3R_476()) return true;
    }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_108() {
    if (jj_3R_137()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_107() {
    if (jj_3R_76()) return true;
    if (jj_3R_83()) return true;
    if (jj_3R_135()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(181)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_83()) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_479() {
    if (jj_3R_76()) return true;
    if (jj_3R_83()) return true;
    if (jj_3R_399()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_493()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_106() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_467() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_479()) {
    jj_scanpos = xsp;
    if (jj_3_108()) {
    jj_scanpos = xsp;
    if (jj_3R_480()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_105() {
    if (jj_3R_76()) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_457() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_469() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_106()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    if (jj_scan_token(VARARGS)) return true;
    xsp = jj_scanpos;
    if (jj_3R_457()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_458() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_459() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_468() {
    if (jj_3R_76()) return true;
    if (jj_3R_136()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_497() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_458()) jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_459()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_83()) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_497()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_468()) jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    xsp = jj_scanpos;
    if (jj_3R_469()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_263()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3_104() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3_103() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = !Kiev.javaMode && (getToken(1).image.equals("_"));
    lookingAhead = false;
    if (!jj_semLA || jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  final private boolean jj_3_102() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_451() {
    if (jj_scan_token(OPERATOR_LRBRACKETS)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_467()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_103()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3_104()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_263()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_83()) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_451()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_466() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(139)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_101() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_263()) return true;
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_466()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_242()) return true;
    return false;
  }

  final private boolean jj_3R_450() {
    if (jj_scan_token(ASSIGN2)) return true;
    return false;
  }

  final private boolean jj_3R_465() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    return false;
  }

  public kiev040TokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;

  public kiev040(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new kiev040TokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public kiev040(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new kiev040TokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public kiev040(kiev040TokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(kiev040TokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

        /*{
	private Struct mkStruct(NameRef name, int flags, ASTModifiers modifiers, ASTNode parent) {
		ClazzName clname;
		if (parent instanceof FileUnit) {
			clname = ClazzName.fromOuterAndName(((FileUnit)parent).pkg.getStruct(),name.name,false,false);
		}
		else if (parent instanceof Struct) {
			clname = ClazzName.fromOuterAndName(curClazz,name.name,false,true);
		}
		else if (name != null) {
			// Construct name of local class
			KString bytecode_name =
				KString.from(curClazz.name.bytecode_name
					+"$"+curClazz.countAnonymouseInnerStructs()
					+"$"+name.name);
			KString fixname = bytecode_name.replace('/','.');
			clname = new ClazzName(fixname,name.name,bytecode_name,false,false);
		}
		else {
			// Local anonymouse class
			KString bytecode_name =
				KString.from(curClazz.name.bytecode_name
					+"$"+curClazz.countAnonymouseInnerStructs());
			clname = ClazzName.fromBytecodeName(bytecode_name, false);
		}
		Struct clazz = Env.newStruct(clname,curClazz,flags,true);
		if (name != null)
			clazz.pos  = name.pos;
		else
			clazz.pos  = parent.pos;
		clazz.setResolved(true);
		foreach (MetaSpecial sa; modifiers.specials)
			sa.attach(clazz);
		if (modifiers.acc != null)
			clazz.acc  = modifiers.acc;
		if (parent instanceof FileUnit) {
			clazz.setLocal(false);
			clazz.setStatic(true);
			Env.setProjectInfo(clazz.name, Kiev.curFile);
		}
		else if (parent instanceof Struct)
			clazz.setLocal(parent.isLocal());
		else
			clazz.setLocal(true);
		foreach (Meta m; modifiers.annotations)
			clazz.meta.set((Meta)m.copy());
		
		return clazz;
	}

	private TypeDef mkTypeDef(NameRef name, ASTModifiers modifiers) {
		TypeDef arg = new TypeDef(name);
		if (modifiers != null) {
			foreach (MetaSpecial sa; modifiers.specials)
				sa.attach(arg);
			if (modifiers.annotations.length > 0) {
				arg.meta = new MetaSet();
				foreach (Meta m; modifiers.annotations)
					arg.meta.set((Meta)m.copy());
			}
		}
		return arg;
	}

	private Constructor mkConstructor(NameRef id, ASTModifiers modifiers) {
		Constructor meth = new Constructor(0);
		meth.pos = id.pos;
		foreach (MetaSpecial sa; modifiers.specials)
			sa.attach(meth);
		if( modifiers.acc != null ) meth.acc = modifiers.acc;
		foreach (Meta m; modifiers.annotations)
			meth.meta.set((Meta)m.copy());
		return meth;
	}
	
	private Method mkMethod(NameRef id, ASTModifiers modifiers, TypeRef ret) {
		Method meth = new Method(id.name, ret, 0);
		meth.pos = id.pos;
		foreach (MetaSpecial sa; modifiers.specials)
			sa.attach(meth);
		if( modifiers.acc != null ) meth.acc = modifiers.acc;
		foreach (Meta m; modifiers.annotations)
			meth.meta.set((Meta)m.copy());
		return meth;
	}
	
	private RuleMethod mkRuleMethod(NameRef id, ASTModifiers modifiers, TypeRef ret) {
		RuleMethod meth = new RuleMethod(id, 0);
		meth.pos = id.pos;
		foreach (MetaSpecial sa; modifiers.specials)
			sa.attach(meth);
		if( modifiers.acc != null ) meth.acc = modifiers.acc;
		foreach (Meta m; modifiers.annotations)
			meth.meta.set((Meta)m.copy());
		return meth;
	}
	
	private Field mkField(NameRef id, ASTModifiers modifiers, TypeRef ret, boolean first) {
		if (!first)
			ret = (TypeRef)ret.copy();
		Field f = new Field(id.name,ret,0);
		f.pos = id.pos;
		if (first) {
			foreach (MetaSpecial sa; modifiers.specials)
				sa.attach(f);
			if (modifiers.acc != null)
				f.acc = modifiers.acc;
			foreach (Meta m; modifiers.annotations)
				f.meta.set((Meta)m.copy());
		} else {
			foreach (MetaSpecial sa; modifiers.specials)
				((MetaSpecial)sa.copy()).attach(f);
			if (modifiers.acc != null)
				f.acc = new Access(modifiers.acc.flags);
			foreach (Meta m; modifiers.annotations)
				f.meta.set((Meta)m.copy());
		}
		return f;
	}

	private Field mkEnumField(NameRef id, ASTModifiers modifiers) {
		Field f = new Field(id.name,new TypeRef(),ACC_ENUM|ACC_STATIC|ACC_FINAL|ACC_PUBLIC);
		f.pos = id.pos;
		f.setEnumField(true);
		foreach (MetaSpecial sa; modifiers.specials)
			sa.attach(f);
		foreach (Meta m; modifiers.annotations)
			f.meta.set((Meta)m.copy());
		return f;
	}

	private Field mkCaseField(NameRef id, ASTModifiers modifiers, TypeRef tp) {
		Field f = new Field(id.name,tp,0|ACC_PUBLIC);
		f.pos = id.pos;
		foreach (MetaSpecial sa; modifiers.specials)
			sa.attach(f);
		foreach (Meta m; modifiers.annotations)
			f.meta.set((Meta)m.copy());
		return f;
	}
	
	private Var mkVar(NameRef id, ASTModifiers modifiers, TypeRef tp, boolean first) {
		if (!first)
			tp = (TypeRef)tp.copy();
		Var v = new Var(id, tp, 0);
		if (first) {
			foreach (MetaSpecial sa; modifiers.specials)
				sa.attach(v);
		} else {
			foreach (MetaSpecial sa; modifiers.specials)
				((MetaSpecial)sa.copy()).attach(v);
		}
		if (modifiers.annotations.length > 0) {
			v.meta = new MetaSet();
			if (first) {
				foreach (Meta m; modifiers.annotations)
					v.meta.set((Meta)m.copy());
			} else {
				foreach (Meta m; modifiers.annotations)
					v.meta.set((Meta)m.copy());
			}
		}
		return v;
	}
	
	private FormPar mkFormPar(NameRef id, ASTModifiers modifiers, TypeRef vt, TypeRef st) {
		FormPar v = new FormPar(id, vt, st, FormPar.PARAM_NORMAL, 0);
		foreach (MetaSpecial sa; modifiers.specials)
			sa.attach(v);
		if (modifiers.annotations.length > 0) {
			v.meta = new MetaSet();
			foreach (Meta m; modifiers.annotations)
				v.meta.set((Meta)m.copy());
		}
		return v;
	}
	
	private FormPar mkVarargPar(NameRef id, ASTModifiers modifiers, TypeRef vt) {
		FormPar v = new FormPar(id, vt, (TypeRef)vt.copy(), FormPar.PARAM_VARARGS, ACC_FINAL);
		foreach (MetaSpecial sa; modifiers.specials)
			sa.attach(v);
		if (modifiers.annotations.length > 0) {
			v.meta = new MetaSet();
			foreach (Meta m; modifiers.annotations)
				v.meta.set((Meta)m.copy());
		}
		return v;
	}
	
	private	Initializer mkInitializer(int pos, ASTModifiers modifiers) {
		Initializer init = new Initializer(pos,0);
		foreach (MetaSpecial sa; modifiers.specials)
			sa.attach(init);
		if (modifiers.annotations.length > 0) {
			init.meta = new MetaSet();
			foreach (Meta m; modifiers.annotations)
				init.meta.set((Meta)m.copy());
		}
		return init;
	}

	
	private ENode mkNotExpr(ASTOperator not, ENode cond) {
		ASTExpression e = new ASTExpression();
		e.pos = cond.pos;
		e.nodes.append(not);
		e.nodes.append((ENode)~cond);
		return e;
	}


	}*/

}

/* Generated By:JJTree&JavaCC: Do not edit this line. kiev020TokenManager.java */
package kiev.parser;
import kiev.Kiev;
import kiev.Kiev.Ext;
import kiev.vlang.*;

public class kiev020TokenManager implements kiev020Constants
{
  static int skip_depth = 0;
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffff80000L) != 0L || (active1 & 0x400ffff67L) != 0L)
         {
            jjmatchedKind = 113;
            return 29;
         }
         if ((active0 & 0x2140L) != 0L || (active2 & 0x4020000L) != 0L)
            return 51;
         if ((active2 & 0x2000000000L) != 0L)
            return 102;
         if ((active1 & 0x2000000000000080L) != 0L)
            return 156;
         if ((active1 & 0x8L) != 0L)
            return 29;
         return -1;
      case 1:
         if ((active0 & 0xfffffeff9ff80000L) != 0L || (active1 & 0x400ffff67L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0x2040L) != 0L)
            return 49;
         if ((active0 & 0x10060000000L) != 0L)
            return 29;
         return -1;
      case 2:
         if ((active0 & 0x7fff669fdff80000L) != 0L || (active1 & 0x400fffe47L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 2;
            }
            return 29;
         }
         if ((active0 & 0x8000986000000000L) != 0L || (active1 & 0x120L) != 0L)
            return 29;
         return -1;
      case 3:
         if ((active0 & 0x3bfe565f5d380000L) != 0L || (active1 & 0x400fef946L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 3;
            return 29;
         }
         if ((active0 & 0x4401208082c00000L) != 0L || (active1 & 0x10601L) != 0L)
            return 29;
         return -1;
      case 4:
         if ((active0 & 0x23be564158180000L) != 0L || (active1 & 0x400fed142L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 4;
            }
            return 29;
         }
         if ((active0 & 0x1840001e05200000L) != 0L || (active1 & 0x2804L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active0 & 0x220e124918180000L) != 0L || (active1 & 0xdad142L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 5;
            return 29;
         }
         if ((active0 & 0x11b0440040000000L) != 0L || (active1 & 0x400240000L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x2208120008080000L) != 0L || (active1 & 0x585002L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
            return 29;
         }
         if ((active0 & 0x6004910100000L) != 0L || (active1 & 0x28140L) != 0L)
            return 29;
         return -1;
      case 7:
         if ((active0 & 0x2208120000000000L) != 0L || (active1 & 0x181000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 7;
            return 29;
         }
         if ((active0 & 0x8080000L) != 0L || (active1 & 0x404002L) != 0L)
            return 29;
         return -1;
      case 8:
         if ((active0 & 0x200020000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 8;
            return 29;
         }
         if ((active0 & 0x2008100000000000L) != 0L || (active1 & 0x181000L) != 0L)
            return 29;
         return -1;
      case 9:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 9;
            return 29;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 29;
         return -1;
      case 10:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 10;
            return 29;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200L);
      case 35:
         return jjStartNfaWithStates_0(0, 165, 102);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x501c00L, 0x0L);
      case 37:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      case 38:
         jjmatchedKind = 146;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000800L);
      case 40:
         return jjStopAtPos(0, 117);
      case 41:
         return jjStopAtPos(0, 118);
      case 42:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 43:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x801000L);
      case 44:
         return jjStopAtPos(0, 124);
      case 45:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L, 0x1002000L);
      case 46:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L, 0x0L);
      case 47:
         jjmatchedKind = 145;
         return jjMoveStringLiteralDfa1_0(0x2140L, 0x0L, 0x4000000L);
      case 58:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8L);
      case 59:
         return jjStopAtPos(0, 123);
      case 60:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80400080L);
      case 61:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40L);
      case 62:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x300000100L);
      case 63:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000L);
      case 64:
         jjmatchedKind = 164;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000L);
      case 91:
         return jjStopAtPos(0, 121);
      case 93:
         return jjStopAtPos(0, 122);
      case 94:
         jjmatchedKind = 148;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000L);
      case 95:
         return jjStartNfaWithStates_0(0, 67, 29);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x802000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf800000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x70000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x50000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7e00000000L, 0x120L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1f0000000000L, 0x80000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1c00000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e000000000000L, 0x400200000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x20200L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3c0000000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0x8000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x43L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x4L, 0x0L);
      case 123:
         return jjStopAtPos(0, 119);
      case 124:
         jjmatchedKind = 147;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000400L);
      case 125:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L, 0x0L);
      case 126:
         return jjStopAtPos(0, 133);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         break;
      case 42:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc0L, active1, 0L, active2, 0L);
      case 43:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         break;
      case 45:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 60:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 61:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         break;
      case 62:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x300000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400201800000L, active1, 0x200000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800c00L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20800010000000L, active1, 0x20000L, active2, 0L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 29);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1840000002000000L, active1, 0x4L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000c00000000L, active1, 0x40L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1084000000L, active1, 0x2000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0xd0000L, active2, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20e048100000L, active1, 0x103L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00c000000200000L, active1, 0x400001000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x11000000000000L, active1, 0x220L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0x400000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000400000L, active1, 0x8000L, active2, 0L);
      case 124:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(2, 71);
         break;
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      case 61:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 159);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 160);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2080000006000000L, active1, 0x400000800L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0xa00000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0x105000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x104000000000000L, active1, 0x2005L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000200000000L, active1, 0x202L, active2, 0L);
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x200200c08000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x48001000100000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L, active1, 0x8000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1800004000000000L, active1, 0x400140L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80880000L, active1, 0x40000L, active2, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x420508101400000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000040000000L, active1, 0x10400L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 119:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 29);
         break;
      case 121:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 29);
         break;
      case 123:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 161);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c10200000L, active1, 0x482002L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000001000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 29);
         break;
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 29);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 29);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 29);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x104100000000L, active1, 0x808000L, active2, 0L);
      case 103:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x1000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0x200000L, active2, 0L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x10020000100000L, active1, 0x4L, active2, 0L);
      case 109:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 29);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x100000L, active2, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800040000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x4000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x204000000L, active1, 0x800L, active2, 0L);
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x188000008080000L, active1, 0x40L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x60000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x6004000000000L, active1, 0x4100L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 29);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x8020000100000L, active1, 0x300000L);
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x90000008000000L, active1, 0x20000L);
      case 107:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 29);
         break;
      case 108:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x840000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20140000080000L, active1, 0xc0000L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 29);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x800000L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 29);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 29);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x180000L, active1, 0x40L);
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 29);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x8004000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 29);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 29);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x80002L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x810000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x120100L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0x5000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(6, 87);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x180000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0L);
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 29);
         break;
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 29);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 29);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000020000000000L, active1, 0x401000L);
      case 102:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 79, 29);
         break;
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 29);
         break;
      case 108:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 29);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0x4000L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 29);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 29);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2200020000000000L, active1, 0x80000L);
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 78, 29);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 29);
         break;
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 29);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 84, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      case 112:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 76, 29);
         break;
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 61, 29);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 83, 29);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 29);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 57, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3ffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 156;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 63;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 52;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 19);
                  else if (curChar == 35)
                     jjAddStates(20, 21);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(91, 96);
                  else if (curChar == 47)
                     jjAddStates(22, 25);
                  else if (curChar == 36)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  else if (curChar == 39)
                     jjAddStates(29, 30);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAddStates(31, 33);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAddStates(34, 38);
                  }
                  break;
               case 49:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(74, 84);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(64, 71);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(53, 61);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 1:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if (curChar == 39 && kind > 111)
                     kind = 111;
                  break;
               case 4:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 5:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 2);
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 7:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  break;
               case 15:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 18:
                  if (curChar == 34 && kind > 112)
                     kind = 112;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 42);
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 21:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddStates(43, 45);
                  break;
               case 32:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 34:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 35:
                  if (curChar == 34 && kind > 113)
                     kind = 113;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 49);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 38:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 48:
                  if (curChar == 47)
                     jjAddStates(22, 25);
                  break;
               case 50:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 52:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(53, 61);
                  break;
               case 53:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(53, 61);
                  break;
               case 55:
                  if ((0x100002600L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 62:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 63:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(64, 71);
                  break;
               case 64:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(64, 71);
                  break;
               case 66:
                  if ((0x100002600L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 72:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 73:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(74, 84);
                  break;
               case 74:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(74, 84);
                  break;
               case 76:
                  if ((0x100002600L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 85:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 86:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(31, 33);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(87);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 90:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(91, 96);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddStates(3, 5);
                  break;
               case 93:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(94, 95);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 98:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(99, 100);
                  break;
               case 101:
                  if (curChar == 35)
                     jjAddStates(20, 21);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L && kind > 109)
                     kind = 109;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 19);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 122:
                  if (curChar != 46)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddStates(50, 52);
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddStates(50, 52);
                  break;
               case 125:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(126);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(126, 95);
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 129:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(130);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(130, 95);
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 133:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(134);
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(134, 95);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 136:
                  if (curChar == 46)
                     jjCheckNAddStates(56, 58);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 139:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(140);
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(140, 100);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(141, 142);
                  break;
               case 143:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(144);
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(144, 100);
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 147:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(148);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(148, 100);
                  break;
               case 149:
                  if (curChar != 48)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(34, 38);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 152:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(152);
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(154, 89);
                  break;
               case 155:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(155, 89);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 102:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(62, 65);
                  break;
               case 4:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 9:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(66, 69);
                  break;
               case 17:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 23:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 28:
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(29);
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(70, 73);
                  break;
               case 34:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 40:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 45:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 46:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 50:
                  if (kind > 9)
                     kind = 9;
                  break;
               case 54:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 56:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 65:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 67:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 75:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 77:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 78:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 89:
                  if ((0x100000001000L & l) != 0L && kind > 102)
                     kind = 102;
                  break;
               case 92:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(74, 75);
                  break;
               case 95:
                  if ((0x4000000040L & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(76, 77);
                  break;
               case 100:
                  if ((0x1000000010L & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 103:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x7e0000007eL & l) != 0L && kind > 109)
                     kind = 109;
                  break;
               case 111:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x7e0000007eL & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 124:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 128:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 132:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 138:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 142:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(86, 87);
                  break;
               case 146:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 150:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(151);
                  break;
               case 151:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(151);
                  break;
               case 153:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(154);
                  break;
               case 154:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(154, 89);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(29);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 166)
                        kind = 166;
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(26, 28);
                  break;
               case 28:
               case 29:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(29);
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 45);
                  break;
               case 47:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 166)
                     kind = 166;
                  break;
               case 50:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 9)
                     kind = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 156 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_6(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 88;
            return 0;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_6(int pos, long active0, long active1)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
static private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 94);
      case 10:
         return jjStopAtPos(0, 95);
      case 12:
         return jjStopAtPos(0, 97);
      case 13:
         return jjStopAtPos(0, 96);
      case 32:
         return jjStopAtPos(0, 93);
      case 44:
         return jjStopAtPos(0, 92);
      case 114:
         return jjMoveStringLiteralDfa1_6(0x4000000L);
      default :
         return jjMoveNfa_6(1, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_6(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 119:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      default :
         break;
   }
   return jjStartNfa_6(0, 0L, active1);
}
static private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 119)
                  {
                     if (kind > 89)
                        kind = 89;
                  }
                  else if (curChar == 114)
                  {
                     if (kind > 88)
                        kind = 88;
                  }
                  if (curChar == 110)
                  {
                     if (kind > 91)
                        kind = 91;
                  }
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 111 && kind > 88)
                     kind = 88;
                  break;
               case 2:
                  if (curChar == 114 && kind > 88)
                     kind = 88;
                  break;
               case 3:
                  if (curChar == 111 && kind > 89)
                     kind = 89;
                  break;
               case 4:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 119 && kind > 89)
                     kind = 89;
                  break;
               case 6:
                  if (curChar == 110 && kind > 91)
                     kind = 91;
                  break;
               case 7:
                  if (curChar == 111 && kind > 91)
                     kind = 91;
                  break;
               case 8:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x10000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      default :
         return 2;
   }
   return 2;
}
static private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
static private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 14)
                     kind = 14;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa1_2(0x40L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x800000000L);
      case 125:
         return jjMoveStringLiteralDfa1_2(0x80L, 0x0L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_2(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa2_2(active0, 0xc0L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x800000000L);
      default :
         return 2;
   }
}
static private final int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x1000000000L);
      case 123:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      default :
         return 3;
   }
   return 3;
}
static private final int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_2(active1, 0x1000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_2(active1, 0x800000000L);
      default :
         return 4;
   }
}
static private final int jjMoveStringLiteralDfa4_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa5_2(active1, 0x1000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_2(active1, 0x800000000L);
      default :
         return 5;
   }
}
static private final int jjMoveStringLiteralDfa5_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 99);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_2(active1, 0x1000000000L);
      default :
         return 6;
   }
   return 6;
}
static private final int jjMoveStringLiteralDfa6_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 100);
         break;
      default :
         return 7;
   }
   return 7;
}
static private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x8000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         return 2;
   }
   return 2;
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffff80000L) != 0L || (active1 & 0x7fff67L) != 0L)
         {
            jjmatchedKind = 113;
            return 29;
         }
         if ((active0 & 0x2140L) != 0L || (active2 & 0x4020000L) != 0L)
            return 51;
         if ((active2 & 0x2000000000L) != 0L)
            return 102;
         if ((active1 & 0x2000000000000080L) != 0L)
            return 156;
         if ((active1 & 0x8L) != 0L)
            return 29;
         return -1;
      case 1:
         if ((active0 & 0xfffffeff9ff80000L) != 0L || (active1 & 0x7fff67L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0x2040L) != 0L)
            return 49;
         if ((active0 & 0x10060000000L) != 0L)
            return 29;
         return -1;
      case 2:
         if ((active0 & 0x7fff669fdff80000L) != 0L || (active1 & 0x7ffe47L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 2;
            }
            return 29;
         }
         if ((active0 & 0x8000986000000000L) != 0L || (active1 & 0x120L) != 0L)
            return 29;
         return -1;
      case 3:
         if ((active0 & 0x3bfe565f5d380000L) != 0L || (active1 & 0x7ef946L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 3;
            return 29;
         }
         if ((active0 & 0x4401208082c00000L) != 0L || (active1 & 0x10601L) != 0L)
            return 29;
         return -1;
      case 4:
         if ((active0 & 0x23be564158180000L) != 0L || (active1 & 0x7ed142L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 4;
            }
            return 29;
         }
         if ((active0 & 0x1840001e05200000L) != 0L || (active1 & 0x2804L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active0 & 0x220e124918180000L) != 0L || (active1 & 0x5ad142L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 5;
            return 29;
         }
         if ((active0 & 0x11b0440040000000L) != 0L || (active1 & 0x240000L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x2208120008080000L) != 0L || (active1 & 0x585002L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
            return 29;
         }
         if ((active0 & 0x6004910100000L) != 0L || (active1 & 0x28140L) != 0L)
            return 29;
         return -1;
      case 7:
         if ((active0 & 0x2208120000000000L) != 0L || (active1 & 0x181000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 7;
            return 29;
         }
         if ((active0 & 0x8080000L) != 0L || (active1 & 0x404002L) != 0L)
            return 29;
         return -1;
      case 8:
         if ((active0 & 0x200020000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 8;
            return 29;
         }
         if ((active0 & 0x2008100000000000L) != 0L || (active1 & 0x181000L) != 0L)
            return 29;
         return -1;
      case 9:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 9;
            return 29;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 29;
         return -1;
      case 10:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 10;
            return 29;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
static private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x200L);
      case 35:
         return jjStartNfaWithStates_1(0, 165, 102);
      case 36:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x501c00L, 0x0L);
      case 37:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x40000000L);
      case 38:
         jjmatchedKind = 146;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8000800L);
      case 40:
         return jjStopAtPos(0, 117);
      case 41:
         return jjStopAtPos(0, 118);
      case 42:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_1(0x40000L, 0x0L, 0x2000000L);
      case 43:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x801000L);
      case 44:
         return jjStopAtPos(0, 124);
      case 45:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10L, 0x1002000L);
      case 46:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80L, 0x0L);
      case 47:
         jjmatchedKind = 145;
         return jjMoveStringLiteralDfa1_1(0x2140L, 0x0L, 0x4000000L);
      case 58:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8L);
      case 59:
         return jjStopAtPos(0, 123);
      case 60:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x80400080L);
      case 61:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x40L);
      case 62:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x300000100L);
      case 63:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x400000000L);
      case 64:
         jjmatchedKind = 164;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x800000000L);
      case 91:
         return jjStopAtPos(0, 121);
      case 93:
         return jjStopAtPos(0, 122);
      case 94:
         jjmatchedKind = 148;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x20000000L);
      case 95:
         return jjStartNfaWithStates_1(0, 67, 29);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x80000L, 0x2000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x700000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0xf800000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x70000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x180000000L, 0x50000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x7e00000000L, 0x120L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x8000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x1f0000000000L, 0x80000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x200000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x1c00000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x1e000000000000L, 0x200000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x20000000000000L, 0x20200L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x3c0000000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0xf800000000000000L, 0x8000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x43L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x400000000000000L, 0x4L, 0x0L);
      case 123:
         return jjStopAtPos(0, 119);
      case 124:
         jjmatchedKind = 147;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x10000400L);
      case 125:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_1(0x80L, 0x0L, 0x0L);
      case 126:
         return jjStopAtPos(0, 133);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         break;
      case 42:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x400c0L, active1, 0L, active2, 0L);
      case 43:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         break;
      case 45:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 60:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 61:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         break;
      case 62:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x300000000L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x2400201800000L, active1, 0x200000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0xc00L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x20800010000000L, active1, 0x20000L, active2, 0L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 40, 29);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x100000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x1840000002000000L, active1, 0x4L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000c00000000L, active1, 0x40L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x1084000000L, active1, 0x2000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x60000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x180000000000L, active1, 0xd0000L, active2, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x20e048100000L, active1, 0x103L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0xe00c000000200000L, active1, 0x1000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x11000000000000L, active1, 0x220L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000000000L, active1, 0x400000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000400000L, active1, 0x8000L, active2, 0L);
      case 124:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(2, 71);
         break;
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      case 61:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 159);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 160);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x2080000006000000L, active1, 0x800L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000000L, active1, 0x200000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000L, active1, 0x105000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x104000000000000L, active1, 0x2005L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000200000000L, active1, 0x202L, active2, 0L);
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(2, 69, 29);
         return jjMoveStringLiteralDfa3_1(active0, 0x200200c08000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x48001000100000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x60000000000L, active1, 0x8000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x20000L, active2, 0L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x1800004000000000L, active1, 0x400140L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x80880000L, active1, 0x40000L, active2, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x420508101400000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000040000000L, active1, 0x10400L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x80000L, active2, 0L);
      case 119:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 47, 29);
         break;
      case 121:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 63, 29);
         break;
      case 123:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 161);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x1c10200000L, active1, 0x482002L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000001000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(3, 64, 29);
         break;
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(3, 22, 29);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(3, 23, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 29);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 62, 29);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(3, 73, 29);
         return jjMoveStringLiteralDfa4_1(active0, 0x104100000000L, active1, 0x8000L, active2, 0L);
      case 103:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 45, 29);
         break;
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 58, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000L, active1, 0x1000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000000000L, active1, 0x200000L, active2, 0L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 48, 29);
         return jjMoveStringLiteralDfa4_1(active0, 0x10020000100000L, active1, 0x4L, active2, 0L);
      case 109:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(3, 80, 29);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000000000000L, active1, 0x100000L, active2, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 39, 29);
         return jjMoveStringLiteralDfa4_1(active0, 0x1800040000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(3, 25, 29);
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000000L, active1, 0x4000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x204000000L, active1, 0x800L, active2, 0L);
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(3, 74, 29);
         return jjMoveStringLiteralDfa4_1(active0, 0x188000008080000L, active1, 0x40L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000000000L, active1, 0x60000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x100L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x6004000000000L, active1, 0x4100L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x100000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x8000L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(4, 33, 29);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(4, 66, 29);
         return jjMoveStringLiteralDfa5_1(active0, 0x8020000100000L, active1, 0x300000L);
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(4, 24, 29);
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x90000008000000L, active1, 0x20000L);
      case 107:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(4, 21, 29);
         break;
      case 108:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x840000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x100000000L, active1, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x20140000080000L, active1, 0xc0000L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(4, 26, 29);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(4, 77, 29);
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 36, 29);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 54, 29);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(4, 75, 29);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000L, active1, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x400000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x180000L, active1, 0x40L);
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 52, 29);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 55, 29);
         return jjMoveStringLiteralDfa6_1(active0, 0x8004000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(5, 85, 29);
         return jjMoveStringLiteralDfa6_1(active0, 0x100000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(5, 30, 29);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 46, 29);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(5, 82, 29);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x8000L);
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0x100000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x2000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 56, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x2000000000000000L, active1, 0x80002L);
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x810000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 53, 29);
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000000000L, active1, 0x120100L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 60, 29);
         break;
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 42, 29);
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000L, active1, 0x5000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x100000000000L, active1, 0x180000L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x80000L, active1, 0L);
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(6, 72, 29);
         break;
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 49, 29);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 50, 29);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(6, 81, 29);
         return jjMoveStringLiteralDfa7_1(active0, 0x2000020000000000L, active1, 0x401000L);
      case 102:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(6, 79, 29);
         break;
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 38, 29);
         break;
      case 108:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(6, 70, 29);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x2L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(6, 20, 29);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000000000L, active1, 0x4000L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(6, 32, 29);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(6, 28, 29);
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(6, 35, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(7, 27, 29);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(7, 65, 29);
         return jjMoveStringLiteralDfa8_1(active0, 0x8000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x2200020000000000L, active1, 0x80000L);
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(7, 78, 29);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(7, 86, 29);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x1000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(7, 19, 29);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 51, 29);
         break;
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 44, 29);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(8, 84, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x200000000000000L, active1, 0L);
      case 112:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(8, 76, 29);
         break;
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 61, 29);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(8, 83, 29);
         return jjMoveStringLiteralDfa9_1(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 41, 29);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_1(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_1(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 57, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0, 0L, 0L);
}
static private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 156;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 63;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 52;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 19);
                  else if (curChar == 35)
                     jjAddStates(20, 21);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(91, 96);
                  else if (curChar == 47)
                     jjAddStates(22, 25);
                  else if (curChar == 36)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  else if (curChar == 39)
                     jjAddStates(29, 30);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAddStates(31, 33);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAddStates(34, 38);
                  }
                  break;
               case 49:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(74, 84);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(64, 71);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(53, 61);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 1:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if (curChar == 39 && kind > 111)
                     kind = 111;
                  break;
               case 4:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 5:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 2);
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 7:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  break;
               case 15:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 18:
                  if (curChar == 34 && kind > 112)
                     kind = 112;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 42);
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 21:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddStates(43, 45);
                  break;
               case 32:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 34:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 35:
                  if (curChar == 34 && kind > 113)
                     kind = 113;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 49);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 38:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 48:
                  if (curChar == 47)
                     jjAddStates(22, 25);
                  break;
               case 50:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 52:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(53, 61);
                  break;
               case 53:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(53, 61);
                  break;
               case 55:
                  if ((0x100002600L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 62:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 63:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(64, 71);
                  break;
               case 64:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(64, 71);
                  break;
               case 66:
                  if ((0x100002600L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 72:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 73:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(74, 84);
                  break;
               case 74:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(74, 84);
                  break;
               case 76:
                  if ((0x100002600L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 85:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 86:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(31, 33);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(87);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 90:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(91, 96);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddStates(3, 5);
                  break;
               case 93:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(94, 95);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 98:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(99, 100);
                  break;
               case 101:
                  if (curChar == 35)
                     jjAddStates(20, 21);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L && kind > 109)
                     kind = 109;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 19);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 122:
                  if (curChar != 46)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddStates(50, 52);
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddStates(50, 52);
                  break;
               case 125:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(126);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(126, 95);
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 129:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(130);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(130, 95);
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 133:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(134);
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(134, 95);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 136:
                  if (curChar == 46)
                     jjCheckNAddStates(56, 58);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 139:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(140);
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(140, 100);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(141, 142);
                  break;
               case 143:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(144);
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(144, 100);
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 147:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(148);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(148, 100);
                  break;
               case 149:
                  if (curChar != 48)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(34, 38);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 152:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(152);
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(154, 89);
                  break;
               case 155:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(155, 89);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 102:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(62, 65);
                  break;
               case 4:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 9:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(66, 69);
                  break;
               case 17:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 23:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 28:
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(29);
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(70, 73);
                  break;
               case 34:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 40:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 45:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 46:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 50:
                  if (kind > 9)
                     kind = 9;
                  break;
               case 54:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 56:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 65:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 67:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 75:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 77:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 78:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 89:
                  if ((0x100000001000L & l) != 0L && kind > 102)
                     kind = 102;
                  break;
               case 92:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(74, 75);
                  break;
               case 95:
                  if ((0x4000000040L & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(76, 77);
                  break;
               case 100:
                  if ((0x1000000010L & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 103:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x7e0000007eL & l) != 0L && kind > 109)
                     kind = 109;
                  break;
               case 111:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x7e0000007eL & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 124:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 128:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 132:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 138:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 142:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(86, 87);
                  break;
               case 146:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 150:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(151);
                  break;
               case 151:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(151);
                  break;
               case 153:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(154);
                  break;
               case 154:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(154, 89);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(29);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 166)
                        kind = 166;
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(26, 28);
                  break;
               case 28:
               case 29:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(29);
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 45);
                  break;
               case 47:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 166)
                     kind = 166;
                  break;
               case 50:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 9)
                     kind = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 156 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   96, 97, 100, 91, 92, 95, 121, 122, 127, 128, 131, 132, 95, 135, 136, 141, 
   142, 145, 146, 100, 102, 111, 51, 62, 72, 85, 15, 16, 18, 1, 3, 87, 
   88, 89, 150, 152, 153, 155, 89, 15, 16, 20, 18, 32, 33, 35, 32, 33, 
   37, 35, 123, 124, 95, 131, 132, 95, 137, 138, 100, 145, 146, 100, 4, 5, 
   7, 9, 17, 19, 21, 23, 34, 36, 38, 40, 93, 94, 98, 99, 125, 126, 
   129, 130, 133, 134, 139, 140, 143, 144, 147, 148, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\52\52\57", "\141\142\163\164\162\141\143\164", 
"\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", 
"\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\146\157\162\145\141\143\150", "\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", 
"\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", 
"\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144", "\167\151\164\150", 
"\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", 
"\164\162\165\145", "\164\162\171", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", "\137", "\55\76", "\146\165\156", "\166\151\162\164\165\141\154", "\56\56\56", 
"\146\157\162\167\141\162\144", "\162\165\154\145", "\44\143\165\164", "\44\143\141\163\164", 
"\44\162\145\151\156\164\145\162\160", "\141\154\151\141\163", "\157\160\145\162\141\164\157\162", 
"\164\171\160\145\144\145\146", "\145\156\165\155", "\162\145\161\165\151\162\145", 
"\145\156\163\165\162\145", "\151\156\166\141\162\151\141\156\164", "\44\147\145\156\145\162\141\164\145", 
"\160\141\143\153\145\144", "\44\167\162\141\160\160\145\162", "\141\143\143\145\163\163\72", null, null, 
"\162\167", null, "\54", null, null, null, null, null, "\160\162\141\147\155\141", 
"\145\156\141\142\154\145", "\144\151\163\141\142\154\145", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\72", "\77", "\74", "\76", "\75", "\72\75", 
"\41", "\176", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", 
"\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", 
"\74\74\75", "\76\76\75", "\76\76\76\75", "\77\75", "\100\75", "\100", "\43", null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_CONSTRAINT", 
   "IN_PRAGMA", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_ACCESS", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 1, 1, 1, 5, 0, 0, 0, -1, 0, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 2, 0, 
   0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffc0001L, 0xffe3ec7c1fffffffL, 0x7fffffffffL, 
};
static final long[] jjtoSkip = {
   0x1fffeL, 0x3e0000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x20000L, 0x0L, 0x0L, 
};
static private JavaCharStream input_stream;
static private final int[] jjrounds = new int[156];
static private final int[] jjstateSet = new int[312];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public kiev020TokenManager(JavaCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public kiev020TokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 156; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   if( t.kind == 0 ) t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 17)
         {
            jjmatchedKind = 17;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 17)
         {
            jjmatchedKind = 17;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 17)
         {
            jjmatchedKind = 17;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 9 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   input_stream.backup(1);
         break;
      case 10 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                   input_stream.backup(8);
         break;
      case 11 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  input_stream.backup(7);
         break;
      case 12 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                     input_stream.backup(10);
         break;
      default :
         break;
   }
}
static final void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 58 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[58]);
         else
            image.append(jjstrLiteralImages[58]);
                     if(Kiev.javaMode||Kiev.disabled(Ext.With)) matchedToken.kind=IDENTIFIER;
         break;
      case 67 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[67]);
         else
            image.append(jjstrLiteralImages[67]);
                        if(Kiev.javaMode) matchedToken.kind=IDENTIFIER;
         break;
      case 70 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[70]);
         else
            image.append(jjstrLiteralImages[70]);
                           if(Kiev.javaMode || Kiev.disabled(Ext.VirtualFields) || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 72 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[72]);
         else
            image.append(jjstrLiteralImages[72]);
                           if(Kiev.javaMode || Kiev.disabled(Ext.Forward) /*|| !kiev020.declMode*/) matchedToken.kind=IDENTIFIER;
         break;
      case 73 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[73]);
         else
            image.append(jjstrLiteralImages[73]);
                     if(Kiev.javaMode || Kiev.disabled(Ext.Logic) ) matchedToken.kind=IDENTIFIER;
         break;
      case 74 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[74]);
         else
            image.append(jjstrLiteralImages[74]);
                     if(Kiev.javaMode || Kiev.disabled(Ext.Logic) ) matchedToken.kind=IDENTIFIER;
         break;
      case 75 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[75]);
         else
            image.append(jjstrLiteralImages[75]);
                      if(Kiev.javaMode) matchedToken.kind=IDENTIFIER;
         break;
      case 76 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[76]);
         else
            image.append(jjstrLiteralImages[76]);
                              if(Kiev.javaMode) matchedToken.kind=IDENTIFIER;
         break;
      case 77 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[77]);
         else
            image.append(jjstrLiteralImages[77]);
                       if(Kiev.javaMode || Kiev.disabled(Ext.Alias)  || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 78 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[78]);
         else
            image.append(jjstrLiteralImages[78]);
                                if(Kiev.javaMode || Kiev.disabled(Ext.Operator) ) matchedToken.kind=IDENTIFIER;
         break;
      case 79 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[79]);
         else
            image.append(jjstrLiteralImages[79]);
                           if(Kiev.javaMode || Kiev.disabled(Ext.Typedef)  || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 80 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[80]);
         else
            image.append(jjstrLiteralImages[80]);
                     if(Kiev.javaMode || Kiev.disabled(Ext.Enum) || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 81 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[81]);
         else
            image.append(jjstrLiteralImages[81]);
                           if(Kiev.javaMode || Kiev.disabled(Ext.Contract) || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 82 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[82]);
         else
            image.append(jjstrLiteralImages[82]);
                         if(Kiev.javaMode || Kiev.disabled(Ext.Contract) || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 83 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[83]);
         else
            image.append(jjstrLiteralImages[83]);
                               if(Kiev.javaMode || Kiev.disabled(Ext.Contract) || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 84 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[84]);
         else
            image.append(jjstrLiteralImages[84]);
                              if(Kiev.javaMode || Kiev.disabled(Ext.Templates) || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 85 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[85]);
         else
            image.append(jjstrLiteralImages[85]);
                         if(Kiev.javaMode || Kiev.disabled(Ext.PackedFields) || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 86 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[86]);
         else
            image.append(jjstrLiteralImages[86]);
                            if(Kiev.javaMode || Kiev.disabled(Ext.Wrappers) || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 87 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[87]);
         else
            image.append(jjstrLiteralImages[87]);
                        if(Kiev.javaMode || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 88 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               if(Kiev.javaMode || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 89 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               if(Kiev.javaMode || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 90 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[90]);
         else
            image.append(jjstrLiteralImages[90]);
                          if(Kiev.javaMode || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 91 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   if(Kiev.javaMode || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 98 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[98]);
         else
            image.append(jjstrLiteralImages[98]);
                       if(Kiev.javaMode || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 99 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[99]);
         else
            image.append(jjstrLiteralImages[99]);
                                  if(Kiev.javaMode || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 100 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[100]);
         else
            image.append(jjstrLiteralImages[100]);
                                  if(Kiev.javaMode || !kiev020.declMode) matchedToken.kind=IDENTIFIER;
         break;
      default : 
         break;
   }
}
}

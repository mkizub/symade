/* Generated By:JJTree: Do not edit this line. ASTNewInitializedArrayExpression.java */

package kiev.parser;

import kiev.Kiev;
import kiev.vlang.*;
import kiev.stdlib.*;
import kiev.transf.*;

/**
 * @author Maxim Kizub
 * @version $Revision$
 *
 */

@node
public class ASTNewInitializedArrayExpression extends ENode {

	@dflow(out="args") private static class DFI {
	@dflow(in="this:in", seq="true")		ENode[]		args;
	}
	
	@att
	public TypeRef					type;
	
	@att
	public final NArr<ENode>		args;
	
	public int dim;
	
	public void mainResolveOut() {
		Type tp = type.getType();
		while( this.dim > 0 ) { tp = Type.newArrayType(tp); this.dim--; }
		if( !tp.isArray() )
			throw new CompilerException(this,"Type "+type+" is not an array type");
        int dim = 0;
        while( tp.isArray() ) { dim++; tp = tp.args[0]; }
		replaceWithNode(new NewInitializedArrayExpr(pos,new TypeRef(tp),dim,args.delToArray()));
	}

	public void resolve(Type reqType) {
		Type tp;
		if( type == null ) {
			tp = reqType;
		} else {
			tp = type.getType();
			while( this.dim > 0 ) { tp = Type.newArrayType(tp); this.dim--; }
		}
		if( !tp.isArray() )
			throw new CompilerException(this,"Type "+type+" is not an array type");
    	for(int i=0; i < args.length; i++) {
        	try {
				args[i].resolve(tp.args[0]);
            } catch(Exception e) {
            	Kiev.reportError(args[i],e);
            }
        }
        int dim = 0;
        while( tp.isArray() ) { dim++; tp = tp.args[0]; }
		replaceWithNodeResolve(reqType, new NewInitializedArrayExpr(pos,new TypeRef(tp),dim,args.delToArray()));
	}

	public int		getPriority() { return Constants.opAccessPriority; }

	public Dumper toJava(Dumper dmp) {
		dmp.append("new ").append(type);
		for(int i=0; i < dim; i++) dmp.append("[]");
		dmp.append('{');
		for(int i=0; i < args.length; i++) {
			args[i].toJava(dmp);
			if( i < args.length-1 ) dmp.append(',').space();
		}
		dmp.append('}');
		return dmp;
	}
}

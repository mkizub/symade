/* Generated By:JJTree: Do not edit this line. ASTCallAccessExpression.java */

/*
 Copyright (C) 1997-1998, Forestro, http://forestro.com

 This file is part of the Kiev compiler.

 The Kiev compiler is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation.

 The Kiev compiler is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with the Kiev compiler; see the file License.  If not, write to
 the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.
*/

package kiev.parser;

import kiev.Kiev;
import kiev.vlang.*;
import kiev.stdlib.*;

import static kiev.stdlib.Debug.*;
import syntax kiev.Syntax;

/**
 * $Header: /home/CVSROOT/forestro/kiev/kiev/parser/ASTCallAccessExpression.java,v 1.3.2.1.2.1 1999/02/15 21:45:08 max Exp $
 * @author Maxim Kizub
 * @version $Revision: 1.3.2.1.2.1 $
 *
 */

@node
public class ASTCallAccessExpression extends Expr {
	@att public Expr					obj;
	@att public ASTIdentifier			func;
    @att public final NArr<Expr>		args;

	public ASTCallAccessExpression() {
		args = new NArr<Expr>(this);
	}

	public ASTCallAccessExpression(int id) {
		args = new NArr<Expr>(this);
	}
	
	public ASTCallAccessExpression(int pos, Expr obj, KString func, Expr[] args) {
		super(pos);
		this.obj = obj;
		this.func = new ASTIdentifier(pos, func);
		this.args.addAll(args);
	}

	public void jjtAddChild(ASTNode n, int i) {
    	if(i==0) {
        	obj = (Expr)n;
		} else {
        	func = ((ASTCallExpression)n).func;
			func.parent = this;
			foreach (Expr e; ((ASTCallExpression)n).args) {
				this.args.append(e);
				e.parent = this;
			}
            pos = n.getPos();
        }
    }

	public ASTNode resolve(Type reqType) {
		for(int i=0; i < args.length; i++) {
			args[i] = (Expr)args[i].resolveExpr(null);
		}
		ASTNode o;
		Struct cl;
		Type tp = null;
		Type ret = reqType;
	retry_with_null_ret:;
		ASTNode@ m;
		ResInfo info = new ResInfo();
		if( obj instanceof ASTIdentifier
		&& ((ASTIdentifier)obj).name.equals(Constants.nameSuper)
		&& !PassInfo.method.isStatic() ) {
			if( !PassInfo.resolveBestMethodR(PassInfo.clazz.super_clazz.clazz,m,info,func.name,args.toArray(),ret,tp,0) ) {
				if( ret != null ) { ret = null; goto retry_with_null_ret; }
				throw new CompilerException(obj.getPos(),"Unresolved method "+Method.toString(func.name,args,ret));
			}
			if( info.path.length() == 0 )
				return new CallExpr(pos,parent,(Method)m,((Method)m).makeArgs(args,tp),true).resolve(ret);
			else
				throw new CompilerException(obj.getPos(),"Super-call via forwarding is not allowed");
		} else {
			o = obj.resolve(null);
			if( o == null )
				throw new CompilerException(obj.getPos(),"Unresolved object "+obj);
			if( o instanceof Struct ) {
				cl = (Struct)o;
				if( !PassInfo.resolveBestMethodR(cl,m,info,func.name,args.toArray(),ret,tp,0) ) {
					// May be a closure
					PVar<ASTNode> closure = new PVar<ASTNode>();
					info = new ResInfo();
					if( !cl.resolveNameR(closure,info,func.name,tp,0) ) {
						if( ret != null ) { ret = null; goto retry_with_null_ret; }
						throw new CompilerException(pos,"Unresolved method "+Method.toString(func.name,args,ret));
					}
					try {
						if( closure instanceof Var && Type.getRealType(tp,((Var)closure).type) instanceof MethodType
						||  closure instanceof Field && Type.getRealType(tp,((Field)closure).type) instanceof MethodType
						) {
							if( info.path.length() == 0 )
								return new ClosureCallExpr(pos,parent,closure,args.toArray()).resolve(ret);
							else {
								return new ClosureCallExpr(pos,parent,Method.getAccessExpr(info),closure,args.toArray()).resolve(ret);
							}
						}
					} catch(Exception eee) {
						Kiev.reportError(pos,eee);
					}
					if( ret != null ) { ret = null; goto retry_with_null_ret; }
					throw new CompilerException(pos,"Method "+Method.toString(func.name,args,ret)+" unresolved in "+cl);
				}
				if( !m.isStatic() )
					throw new CompilerException(pos,"Static call to non-static method");
				return new CallExpr(pos,parent,(Method)m,((Method)m).makeArgs(args,tp)).resolve(ret);
			}
			else if( o instanceof Expr) {
				Type[] snitps = null;
				int snitps_index = 0;
				snitps = ((Expr)o).getAccessTypes();
				tp = snitps[snitps_index++];
				if (tp.clazz.isWrapper() && func.name.byteAt(0) != '$') {
					o = (Expr)new AccessExpr(o.pos,(Expr)o,tp.clazz.wrapped_field).resolve(null);
					tp = o.getType();
				}
				if( reqType instanceof MethodType ) ret = null;
				if( tp.isReference() ) {
			retry_resolving:;
					cl = (Struct)tp.clazz;
					if( !PassInfo.resolveBestMethodR(cl,m,info,func.name,args.toArray(),ret,tp,0) ) {
						// May be a closure
						PVar<ASTNode> closure = new PVar<ASTNode>();
						info = new ResInfo();
						if( !cl.resolveNameR(closure,info,func.name,tp,0) ) {
							if( o instanceof Expr && snitps != null ) {
								if( snitps_index < snitps.length ) {
									tp = snitps[snitps_index++];
//									cl = (Struct)tp.clazz;
									goto retry_resolving;
								}
							}
							if( ret != null ) { ret = null; goto retry_with_null_ret; }
							throw new CompilerException(pos,"Unresolved method "+Method.toString(func.name,args,ret)+" in "
								+(snitps==null?tp.toString():Arrays.toString(snitps)) );
						}
						try {
							if( closure instanceof Var && Type.getRealType(tp,((Var)closure).type) instanceof MethodType
							||  closure instanceof Field && Type.getRealType(tp,((Field)closure).type) instanceof MethodType
							) {
								if( info.path.length() == 0 )
									return new ClosureCallExpr(pos,parent,(Expr)o,closure,args.toArray()).resolve(reqType);
								else {
									return new ClosureCallExpr(pos,parent,Method.getAccessExpr(info,(Expr)o),closure,args.toArray()).resolve(reqType);
								}
							}
						} catch(Exception eee) {
							Kiev.reportError(pos,eee);
						}
						if( ret != null ) { ret = null; goto retry_with_null_ret; }
						throw new CompilerException(pos,"Method "+Method.toString(func.name,args,reqType)+" unresolved in "+tp);
					}
					if( reqType instanceof MethodType ) {
						ASTAnonymouseClosure ac = new ASTAnonymouseClosure();
						ac.pos = pos;
						ac.parent = parent;
						ac.rettype = new ASTType(pos, ((MethodType)reqType).ret);
						Method meth = (Method)m;
						for(int i=0; i < meth.type.args.length; i++) {
							ac.params.add(new Var(pos,KString.from("arg"+(i+1)),((Method)m).type.args[i],0));
						}
						BlockStat bs = new BlockStat(pos,ac,ASTNode.emptyArray);
						Expr[] oldargs = args.toArray();
						Expr[] cargs = new Expr[ac.params.length];
						for(int i=0; i < cargs.length; i++)
							cargs[i] = new VarAccessExpr(pos,this,(Var)ac.params[i]);
						args.delAll();
						foreach (Expr e; cargs)
							args.add(e);
						if( ac.rettype.getType() == Type.tpVoid ) {
							bs.addStatement(new ExprStat(pos,bs,this));
							bs.addStatement(new ReturnStat(pos,bs,null));
						} else {
							bs.addStatement(new ReturnStat(pos,bs,this));
						}
						ac.body = bs;
						if( oldargs.length > 0 )
							return new ClosureCallExpr(pos,ac.resolve(reqType),oldargs).resolve(reqType);
						else
							return ac.resolve(reqType);
					} else {
						obj = (Expr)o;
						if( m.isStatic() )
							return new CallExpr(pos,parent,(Method)m,args.toArray()).resolve(reqType);
						else
							return new CallAccessExpr(pos,parent,Method.getAccessExpr(info,obj),
								(Method)m,((Method)m).makeArgs(args,tp)).resolve(reqType);
					}
				} else {
					throw new CompilerException(obj.getPos(),"Resolved object "+obj+" of type "+tp+" is not a scope");
				}
			} else {
				throw new CompilerException(o.getPos(),"Resolved object "+o+" is not an object");
			}
		}
	}

	public int		getPriority() { return Constants.opCallPriority; }

	public String toString() {
		StringBuffer sb = new StringBuffer();
    	sb.append(obj).append('.').append(func).append('(');
		for(int i=0; i < args.length; i++) {
			sb.append(args[i]);
			if( i < args.length-1 )
				sb.append(',');
		}
		return sb.append(')').toString();
	}

	public Dumper toJava(Dumper dmp) {
    	dmp.append(obj).append('.').append(func).append('(');
		for(int i=0; i < args.length; i++) {
			args[i].toJava(dmp);
			if( i < args.length-1 )
				dmp.append(',');
		}
		return dmp.append(')');
	}
}

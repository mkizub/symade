/* Generated By:JJTree: Do not edit this line. ASTCallAccessExpression.java */

package kiev.parser;

import kiev.Kiev;
import kiev.vlang.*;
import kiev.stdlib.*;
import kiev.transf.*;

import static kiev.stdlib.Debug.*;
import syntax kiev.Syntax;

/**
 * @author Maxim Kizub
 *
 */

@nodeset
public class ASTCallAccessExpression extends ENode {
	
	@dflow(out="args") private static class DFI {
	@dflow(in="this:in")				ENode		obj;
	@dflow(in="obj", seq="true")		ENode[]		args;
	}
	
	@virtual typedef NImpl = ASTCallAccessExpressionImpl;
	@virtual typedef VView = ASTCallAccessExpressionView;

	@nodeimpl
	public static class ASTCallAccessExpressionImpl extends ENodeImpl {
		@virtual typedef ImplOf = ASTCallAccessExpression;
		@att public ENode				obj;
		@ref public NameRef				func;
		@att public NArr<ENode>			args;
		public ASTCallAccessExpressionImpl() {}
		public ASTCallAccessExpressionImpl(int pos) { super(pos); }
	}
	@nodeview
	public static view ASTCallAccessExpressionView of ASTCallAccessExpressionImpl extends ENodeView {
		public				ENode			obj;
		public				NameRef			func;
		public access:ro	NArr<ENode>		args;
	}
	
	public VView getVView() alias operator(210,fy,$cast) { return new VView(this.$v_impl); }
	public JView getJView() alias operator(210,fy,$cast) { return new JView(this.$v_impl); }

	public ASTCallAccessExpression() {
		super(new ASTCallAccessExpressionImpl());
	}
	
	public ASTCallAccessExpression(int pos, ENode obj, KString func, ENode[] args) {
		super(new ASTCallAccessExpressionImpl(pos));
		this.obj = obj;
		this.func = new NameRef(pos, func);
		this.args.addAll(args);
	}

	public void mainResolveOut() {
		if( obj instanceof ASTIdentifier
		&& ((ASTIdentifier)obj).name.equals(Constants.nameSuper)
		&& !ctx_method.isStatic() )
		{
			ThisExpr te = new ThisExpr(obj.pos);
			te.setSuperExpr(true);
			obj = te;
		}
		
		if (obj instanceof ThisExpr && obj.isSuperExpr()) {
			Method@ m;
			Type tp = null;
			ResInfo info = new ResInfo(this);
			info.enterForward(obj);
			info.enterSuper();
			Type[] ta = new Type[args.length];
			for (int i=0; i < ta.length; i++)
				ta[i] = args[i].getType();
			MethodType mt = new MethodType(ta,null);
			try {
				if( !PassInfo.resolveBestMethodR(ctx_clazz.super_type,m,info,func.name,mt) )
					throw new CompilerException(obj,"Unresolved method "+Method.toString(func.name,args,null));
			} catch (RuntimeException e) { throw new CompilerException(this,e.getMessage()); }
			info.leaveSuper();
			info.leaveForward(obj);
			if( info.isEmpty() ) {
				Method meth = (Method)m;
				CallExpr cae = new CallExpr(pos,(ENode)~obj,meth,args.delToArray());
				cae.setSuperExpr(true);
				replaceWithNode(cae);
				//meth.makeArgs(cae.args, tp);
				return;
			}
			throw new CompilerException(obj,"Super-call via forwarding is not allowed");
		}
		
		MethodType mt = null;
		{
			Type[] ta = new Type[args.length];
			for (int i=0; i < ta.length; i++)
				ta[i] = args[i].getType();
			mt = new MethodType(ta,null);
		}
		int res_flags = ResInfo.noStatic | ResInfo.noImports;
		ENode[] res;
		Type[] tps;
	try_static:;
		if( obj instanceof TypeRef ) {
			Type tp = ((TypeRef)obj).getType();
			tps = new Type[]{tp};
			res = new ENode[1];
			res_flags = 0;
		} else {
			tps = obj.getAccessTypes();
			res = new ENode[tps.length];
			for (int si=0; si < tps.length; si++) {
				Type tp = tps[si];
				if (func.name.byteAt(0) == '$') {
					while (tp.isWrapper())
						tps[si] = tp = ((WrapperType)tp).getUnwrappedType();
				}
			}
			// fall down
		}
		for (int si=0; si < tps.length; si++) {
			Type tp = tps[si];
			Method@ m;
			ResInfo info = new ResInfo(this,res_flags);
			try {
				if (PassInfo.resolveBestMethodR(tp,m,info,func.name,mt)) {
					if (tps.length == 1 && res_flags == 0)
						res[si] = info.buildCall(this, obj, m, info.mt, args.delToArray());
					else if (res_flags == 0)
						res[si] = info.buildCall(this, new TypeRef(tps[si]), m, info.mt, args.delToArray());
					else
						res[si] = info.buildCall(this, (ENode)obj.copy(), m, info.mt, args.delToArray());
				}
			} catch (RuntimeException e) { throw new CompilerException(this,e.getMessage()); }
		}
		int cnt = 0;
		int idx = -1;
		for (int si=0; si < res.length; si++) {
			if (res[si] != null) {
				cnt ++;
				if (idx < 0) idx = si;
			}
		}
		if (cnt > 1) {
			StringBuffer msg = new StringBuffer("Umbigous methods:\n");
			for(int si=0; si < res.length; si++) {
				if (res[si] == null)
					continue;
				msg.append("\t").append(res[si]).append('\n');
			}
			msg.append("while resolving ").append(this);
			throw new CompilerException(this, msg.toString());
		}
		if (cnt == 0 && res_flags != 0) {
			res_flags = 0;
			goto try_static;
		}
		if (cnt == 0) {
			StringBuffer msg = new StringBuffer("Unresolved method '"+Method.toString(func.name,mt)+"' in:\n");
			for(int si=0; si < res.length; si++) {
				if (tps[si] == null)
					continue;
				msg.append("\t").append(tps[si]).append('\n');
			}
			msg.append("while resolving ").append(this);
			throw new CompilerException(this, msg.toString());
		}
		ENode e = res[idx];
		if (e instanceof UnresExpr)
			e = ((UnresExpr)e).toResolvedExpr();
		this.replaceWithNode( e );
	}
	
	public void resolve(Type reqType) {
		for(int i=0; i < args.length; i++) {
			args[i].resolve(null);
		}
		
		if( obj instanceof ASTIdentifier
		&& ((ASTIdentifier)obj).name.equals(Constants.nameSuper)
		&& !ctx_method.isStatic() )
		{
			ThisExpr te = new ThisExpr(obj.pos);
			te.setSuperExpr(true);
			obj = te;
		}
		
		if (obj instanceof ThisExpr && obj.isSuperExpr()) {
			Type ret = reqType;
			Method@ m;
	retry_with_null_ret:;
			Type tp = null;
			ResInfo info = new ResInfo(this);
			info.enterForward(obj);
			info.enterSuper();
			Type[] ta = new Type[args.length];
			for (int i=0; i < ta.length; i++)
				ta[i] = args[i].getType();
			MethodType mt = new MethodType(ta,ret);
			try {
				if( !PassInfo.resolveBestMethodR(ctx_clazz.super_type,m,info,func.name,mt) ) {
					if( ret != null ) { ret = null; goto retry_with_null_ret; }
					throw new CompilerException(obj,"Unresolved method "+Method.toString(func.name,args,ret));
				}
			} catch (RuntimeException e) { throw new CompilerException(this,e.getMessage()); }
			info.leaveSuper();
			info.leaveForward(obj);
			if( info.isEmpty() ) {
				Method meth = (Method)m;
				CallExpr cae = new CallExpr(pos,(ENode)~obj,meth,args.delToArray());
				cae.setSuperExpr(true);
				replaceWithNode(cae);
				//meth.makeArgs(cae.args, tp);
				cae.resolve(ret);
				return;
			}
			throw new CompilerException(obj,"Super-call via forwarding is not allowed");
		}
		
		obj.resolve(null);
		
		MethodType mt = null;
		{
			Type[] ta = new Type[args.length];
			for (int i=0; i < ta.length; i++)
				ta[i] = args[i].getType();
			mt = new MethodType(ta,null);
		}
		int res_flags = ResInfo.noStatic | ResInfo.noImports;
		ENode[] res;
		Type[] tps;
	try_static:;
		if( obj instanceof TypeRef ) {
			Type tp = ((TypeRef)obj).getType();
			tps = new Type[]{tp};
			res = new ENode[1];
			res_flags = 0;
		} else {
			tps = obj.getAccessTypes();
			res = new ENode[tps.length];
			for (int si=0; si < tps.length; si++) {
				Type tp = tps[si];
				if (func.name.byteAt(0) == '$') {
					while (tp.isWrapper())
						tps[si] = tp = ((WrapperType)tp).getUnwrappedType();
				}
			}
			// fall down
		}
		for (int si=0; si < tps.length; si++) {
			Type tp = tps[si];
			Method@ m;
			ResInfo info = new ResInfo(this,res_flags);
			try {
				if (PassInfo.resolveBestMethodR(tp,m,info,func.name,mt)) {
					if (tps.length == 1 && res_flags == 0)
						res[si] = info.buildCall(this, obj, m, info.mt, args.delToArray());
					else if (res_flags == 0)
						res[si] = info.buildCall(this, new TypeRef(tps[si]), m, info.mt, args.delToArray());
					else
						res[si] = info.buildCall(this, (ENode)obj.copy(), m, info.mt, args.delToArray());
				}
			} catch (RuntimeException e) { throw new CompilerException(this,e.getMessage()); }
		}
		int cnt = 0;
		int idx = -1;
		for (int si=0; si < res.length; si++) {
			if (res[si] != null) {
				cnt ++;
				if (idx < 0) idx = si;
			}
		}
		if (cnt > 1) {
			StringBuffer msg = new StringBuffer("Umbigous methods:\n");
			for(int si=0; si < res.length; si++) {
				if (res[si] == null)
					continue;
				msg.append("\t").append(res[si]).append('\n');
			}
			msg.append("while resolving ").append(this);
			throw new CompilerException(this, msg.toString());
		}
		if (cnt == 0 && res_flags != 0) {
			res_flags = 0;
			goto try_static;
		}
		if (cnt == 0) {
			StringBuffer msg = new StringBuffer("Unresolved method '"+Method.toString(func.name,mt)+"' in:\n");
			for(int si=0; si < res.length; si++) {
				if (tps[si] == null)
					continue;
				msg.append("\t").append(tps[si]).append('\n');
			}
			msg.append("while resolving ").append(this);
			throw new CompilerException(this, msg.toString());
		}
		this.replaceWithNodeResolve( reqType, res[idx] );
	}

	public int		getPriority() { return Constants.opCallPriority; }

	public String toString() {
		StringBuffer sb = new StringBuffer();
    	sb.append(obj).append('.').append(func).append('(');
		for(int i=0; i < args.length; i++) {
			sb.append(args[i]);
			if( i < args.length-1 )
				sb.append(',');
		}
		return sb.append(')').toString();
	}

	public Dumper toJava(Dumper dmp) {
    	dmp.append(obj).append('.').append(func).append('(');
		for(int i=0; i < args.length; i++) {
			args[i].toJava(dmp);
			if( i < args.length-1 )
				dmp.append(',');
		}
		return dmp.append(')');
	}
}

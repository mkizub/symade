/* Generated By:JJTree: Do not edit this line. ASTAnnotation.java */

package kiev.parser;

import kiev.Kiev;
import kiev.stdlib.*;
import kiev.vlang.*;

/**
 * @author Maxim Kizub
 *
 */

public class ASTAnnotation extends ASTNode {

	public static ASTAnnotation[] emptyArray = new ASTAnnotation[0];

	public ASTIdentifier        name;	
	public ASTAnnotationValue[] values = ASTAnnotationValue.emptyArray;
	
	public ASTAnnotation(int id) {
		super(0);
	}

	public void jjtAddChild(ASTNode n, int i) {
		if (n instanceof ASTIdentifier) {
			name = (ASTIdentifier)n;
			this.pos = n.pos;
		}
		else if (n instanceof ASTAnnotationValue) {
			values = (ASTAnnotationValue[])Arrays.append(values,n);
		}
		else {
			throw new CompilerException(n.getPos(),"Bad child number "+i+": "+n+" ("+n.getClass()+")");
		}
	}

	public Meta getMeta() {
		ASTNode n = null;
		try {
			n = name.resolve(null);
		} catch (Exception e) {
			Kiev.reportError(pos, e);
		}
		if (!(n instanceof Struct) || !n.isAnnotation()) {
			Kiev.reportError(pos, "Annotation name expected");
			return null;
		}
		Struct s = (Struct)n;
		Meta m = new Meta(new MetaType(s.name.name));
		foreach (ASTAnnotationValue v; values) {
			m.set(makeValue(v));
		}
		return m;
	}
	
	public static MetaValue makeValue(ASTAnnotationValue v) {
		KString name;
		if (v.name == null)
			name = KString.from("value");
		else
			name = v.name.name;
		MetaValueType mvt = new MetaValueType(name);
		if (v.value instanceof ASTAnnotation) {
			ASTNode value = v.value;
			value = ((ASTAnnotation)value).getMeta();
			return new MetaValueScalar(mvt, value);
		}
		else if (v.value instanceof ASTAnnotationValueValueArrayInitializer) {
			ASTNode[] values = ((ASTAnnotationValueValueArrayInitializer)v.value).values;
			for (int i=0; i < values.length; i++) {
				if (values[i] instanceof ASTAnnotation)
					values[i] = ((ASTAnnotation)values[i]).getMeta();
			}
			return new MetaValueArray(mvt, values);
		}
		else {
			return new MetaValueScalar(mvt, v.value);
		}
	}

}

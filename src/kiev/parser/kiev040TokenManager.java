/* Generated By:JavaCC: Do not edit this line. kiev040TokenManager.java */
package kiev.parser;
import kiev.Kiev;
import kiev.Kiev.Ext;
import kiev.vlang.*;

public class kiev040TokenManager implements kiev040Constants
{
  static int skip_depth = 0;
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x540L) != 0L || (active2 & 0x201000L) != 0L)
            return 2;
         if ((active1 & 0x10000000000000L) != 0L)
            return 125;
         if ((active1 & 0x100000000000004L) != 0L)
            return 126;
         if ((active2 & 0x100000000L) != 0L)
            return 71;
         if ((active0 & 0x7fffffffffff8000L) != 0L || (active1 & 0x2007fffbL) != 0L)
         {
            jjmatchedKind = 108;
            return 33;
         }
         return -1;
      case 1:
         if ((active0 & 0x440L) != 0L)
            return 0;
         if ((active0 & 0x7fffffeff9ff8000L) != 0L || (active1 & 0x2007fffbL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 108;
               jjmatchedPos = 1;
            }
            return 33;
         }
         if ((active0 & 0x1006000000L) != 0L)
            return 33;
         return -1;
      case 2:
         if ((active0 & 0x800098600000000L) != 0L || (active1 & 0x9L) != 0L)
            return 33;
         if ((active0 & 0x77fff669fdff8000L) != 0L || (active1 & 0x2007fff2L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 108;
               jjmatchedPos = 2;
            }
            return 33;
         }
         return -1;
      case 3:
         if ((active0 & 0x14401208082c0000L) != 0L || (active1 & 0x830L) != 0L)
            return 33;
         if ((active0 & 0x63bfe565f5d38000L) != 0L || (active1 & 0x2007f7caL) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 3;
            return 33;
         }
         return -1;
      case 4:
         if ((active0 & 0x223be56415818000L) != 0L || (active1 & 0x2007f68aL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 108;
               jjmatchedPos = 4;
            }
            return 33;
         }
         if ((active0 & 0x41840001e0520000L) != 0L || (active1 & 0x140L) != 0L)
            return 33;
         return -1;
      case 5:
         if ((active0 & 0x11b044004000000L) != 0L || (active1 & 0x20012000L) != 0L)
            return 33;
         if ((active0 & 0x2220e12491818000L) != 0L || (active1 & 0x6d68aL) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
            return 33;
         }
         return -1;
      case 6:
         if ((active0 & 0x600491010000L) != 0L || (active1 & 0x140aL) != 0L)
            return 33;
         if ((active0 & 0x2220812000808000L) != 0L || (active1 & 0x2c280L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
            return 33;
         }
         return -1;
      case 7:
         if ((active0 & 0x220812000000000L) != 0L || (active1 & 0xc080L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 7;
            return 33;
         }
         if ((active0 & 0x2000000000808000L) != 0L || (active1 & 0x20200L) != 0L)
            return 33;
         return -1;
      case 8:
         if ((active0 & 0x20002000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 8;
            return 33;
         }
         if ((active0 & 0x200810000000000L) != 0L || (active1 & 0xc080L) != 0L)
            return 33;
         return -1;
      case 9:
         if ((active0 & 0x2000000000L) != 0L)
            return 33;
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 9;
            return 33;
         }
         return -1;
      case 10:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 10;
            return 33;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10L);
      case 35:
         return jjStartNfaWithStates_0(0, 160, 71);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x280e0L, 0x0L);
      case 37:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 38:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400040L);
      case 40:
         return jjStopAtPos(0, 112);
      case 41:
         return jjStopAtPos(0, 113);
      case 42:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
      case 43:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40080L);
      case 44:
         return jjStopAtPos(0, 119);
      case 45:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L, 0x80100L);
      case 46:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L, 0x0L);
      case 47:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x540L, 0x0L, 0x200000L);
      case 58:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 118);
      case 60:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4020004L);
      case 61:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
      case 62:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x18000008L);
      case 63:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000L);
      case 64:
         jjmatchedKind = 159;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      case 91:
         return jjStartNfaWithStates_0(0, 116, 125);
      case 93:
         return jjStopAtPos(0, 117);
      case 94:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x40100L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x70000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf80000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x18000000L, 0x2800L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7e0000000L, 0x9L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1f000000000L, 0x4000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1c0000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e00000000000L, 0x20010000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x1010L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3c000000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf80000000000000L, 0x400L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x3000000000000000L, 0x2L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4040000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 114);
      case 124:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800020L);
      case 125:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L, 0x0L);
      case 126:
         return jjStopAtPos(0, 128);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      case 42:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc0L, active1, 0L, active2, 0L);
      case 43:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 45:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 60:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 61:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         break;
      case 62:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x18000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x240020180000L, active1, 0x10000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40060L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080001000000L, active1, 0x1000L, active2, 0L);
      case 102:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 36, 33);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4184000000200000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000c0000000L, active1, 0x2L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x108400000L, active1, 0x100L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L, active1, 0x6800L, active2, 0L);
      case 111:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3000020e04810000L, active1, 0x8L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00c00000020000L, active1, 0x20000080L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100000000000L, active1, 0x11L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x20000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000040000L, active1, 0x400L, active2, 0L);
      case 124:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(2, 66);
         break;
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      case 61:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 155);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x208000000600000L, active1, 0x20000040L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0x50000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x8280L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x5010400000000000L, active1, 0x100L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000100020000000L, active1, 0x10L, active2, 0L);
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x200200c0800000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4800100010000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000L, active1, 0x400L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 114:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x180000400000000L, active1, 0x2000aL, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8088000L, active1, 0x2000L, active2, 0L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x42050810140000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000004000000L, active1, 0x820L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 119:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 33);
         break;
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 33);
         break;
      case 123:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 156);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000001c1020000L, active1, 0x24100L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000100000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 33);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 33);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 33);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 33);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 33);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x10410000000L, active1, 0x40400L, active2, 0L);
      case 103:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 104:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x80L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x10000L, active2, 0L);
      case 108:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x4001002000010000L, active1, 0L, active2, 0L);
      case 109:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 33);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x8000L, active2, 0L);
      case 111:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x180004000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x200L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20400000L, active1, 0x40L, active2, 0L);
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x18800000808000L, active1, 0x2L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0x3000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x600400000000L, active1, 0x208L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 33);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x802000010000L, active1, 0x18000L);
      case 104:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x9000000800000L, active1, 0x1000L);
      case 107:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 33);
         break;
      case 108:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x84000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2014000008000L, active1, 0x6000L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 33);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x40000L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 33);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 33);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x18000L, active1, 0x2L);
      case 99:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 33);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x800400000000L, active1, 0L);
      case 100:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 33);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 33);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2200000000000000L, active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x81000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0x9008L);
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x280L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(6, 82);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0xc000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 33);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 33);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 33);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 76, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0x200002000000000L, active1, 0x20080L);
      case 102:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 33);
         break;
      case 104:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 33);
         break;
      case 108:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 33);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x200L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 33);
         break;
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 121:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 33);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 33);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x220002000000000L, active1, 0x4000L);
      case 114:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 33);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 33);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 33);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 33);
         break;
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 33);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 79, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L);
      case 112:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 71, 33);
         break;
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 33);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 78, 33);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 37, 33);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 53, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3ffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 125;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 125:
               case 52:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 19);
                  else if (curChar == 35)
                     jjAddStates(20, 21);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(60, 65);
                  else if (curChar == 36)
                  {
                     if (kind > 108)
                        kind = 108;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  else if (curChar == 39)
                     jjAddStates(25, 26);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAddStates(27, 29);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAddStates(30, 34);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 39)
                     jjAddStates(25, 26);
                  break;
               case 5:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if (curChar == 39 && kind > 106)
                     kind = 106;
                  break;
               case 8:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 6);
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 11:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 22:
                  if (curChar == 34 && kind > 107)
                     kind = 107;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(35, 38);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 32:
                  if (curChar != 36)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if (curChar == 34)
                     jjCheckNAddStates(39, 41);
                  break;
               case 36:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 38:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 39:
                  if (curChar == 34 && kind > 108)
                     kind = 108;
                  break;
               case 40:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 45);
                  break;
               case 41:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 42:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 55:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAddStates(27, 29);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(60, 65);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(3, 5);
                  break;
               case 62:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddTwoStates(63, 64);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 70:
                  if (curChar == 35)
                     jjAddStates(20, 21);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L && kind > 105)
                     kind = 105;
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 19);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 91:
                  if (curChar != 46)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(46, 48);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(46, 48);
                  break;
               case 94:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddTwoStates(95, 64);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 97);
                  break;
               case 98:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddTwoStates(99, 64);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 102:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(103);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 64);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(104, 105);
                  break;
               case 105:
                  if (curChar == 46)
                     jjCheckNAddStates(52, 54);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 108:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(109);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(109, 69);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 112:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(113);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(113, 69);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 116:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(117);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(117, 69);
                  break;
               case 118:
                  if (curChar != 48)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAddStates(30, 34);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 121:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(121);
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(123, 58);
                  break;
               case 124:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(124, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 125:
               case 53:
                  if (curChar == 93 && kind > 161)
                     kind = 161;
                  break;
               case 71:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 91)
                     jjAddStates(58, 59);
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 1:
                  if (kind > 9)
                     kind = 9;
                  break;
               case 5:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 92)
                     jjAddStates(60, 63);
                  break;
               case 8:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 13:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(64, 67);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 27:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 32:
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(33);
                  break;
               case 36:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 37:
                  if (curChar == 92)
                     jjAddStates(68, 71);
                  break;
               case 38:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 44:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 49:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 50:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 91)
                     jjAddStates(58, 59);
                  break;
               case 58:
                  if ((0x100000001000L & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(72, 73);
                  break;
               case 64:
                  if ((0x4000000040L & l) != 0L && kind > 101)
                     kind = 101;
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(74, 75);
                  break;
               case 69:
                  if ((0x1000000010L & l) != 0L && kind > 102)
                     kind = 102;
                  break;
               case 72:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x7e0000007eL & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 80:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 88:
                  if ((0x7e0000007eL & l) != 0L && kind > 105)
                     kind = 105;
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(76, 77);
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 101:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 107:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 111:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 115:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(86, 87);
                  break;
               case 119:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(120);
                  break;
               case 120:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(120);
                  break;
               case 122:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(123);
                  break;
               case 123:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(123, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 108)
                        kind = 108;
                     jjCheckNAdd(33);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 162)
                        kind = 162;
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 9)
                     kind = 9;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 24);
                  break;
               case 32:
               case 33:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(33);
                  break;
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(39, 41);
                  break;
               case 54:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 162)
                     kind = 162;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 125 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 83;
            return 0;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
static private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 89);
      case 10:
         return jjStopAtPos(0, 90);
      case 12:
         return jjStopAtPos(0, 92);
      case 13:
         return jjStopAtPos(0, 91);
      case 32:
         return jjStopAtPos(0, 88);
      case 44:
         return jjStopAtPos(0, 87);
      case 114:
         return jjMoveStringLiteralDfa1_5(0x200000L);
      default :
         return jjMoveNfa_5(1, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_5(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 119:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, active1);
}
static private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 119)
                  {
                     if (kind > 84)
                        kind = 84;
                  }
                  else if (curChar == 114)
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  if (curChar == 110)
                  {
                     if (kind > 86)
                        kind = 86;
                  }
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 111 && kind > 83)
                     kind = 83;
                  break;
               case 2:
                  if (curChar == 114 && kind > 83)
                     kind = 83;
                  break;
               case 3:
                  if (curChar == 111 && kind > 84)
                     kind = 84;
                  break;
               case 4:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 119 && kind > 84)
                     kind = 84;
                  break;
               case 6:
                  if (curChar == 110 && kind > 86)
                     kind = 86;
                  break;
               case 7:
                  if (curChar == 111 && kind > 86)
                     kind = 86;
                  break;
               case 8:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x2000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      default :
         return 2;
   }
   return 2;
}
static private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
static private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa1_1(0x40L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80000000L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000L);
      case 125:
         return jjMoveStringLiteralDfa1_1(0x80L, 0x0L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa2_1(active0, 0xc0L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80000000L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x40000000L);
      default :
         return 2;
   }
}
static private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x80000000L);
      case 123:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      default :
         return 3;
   }
   return 3;
}
static private final int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_1(active1, 0x80000000L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active1, 0x40000000L);
      default :
         return 4;
   }
}
static private final int jjMoveStringLiteralDfa4_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa5_1(active1, 0x80000000L);
      case 108:
         return jjMoveStringLiteralDfa5_1(active1, 0x40000000L);
      default :
         return 5;
   }
}
static private final int jjMoveStringLiteralDfa5_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(5, 94);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_1(active1, 0x80000000L);
      default :
         return 6;
   }
   return 6;
}
static private final int jjMoveStringLiteralDfa6_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 95);
         break;
      default :
         return 7;
   }
   return 7;
}
static private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x1000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   65, 66, 69, 60, 61, 64, 90, 91, 96, 97, 100, 101, 64, 104, 105, 110, 
   111, 114, 115, 69, 71, 80, 19, 20, 22, 5, 7, 56, 57, 58, 119, 121, 
   122, 124, 58, 19, 20, 24, 22, 36, 37, 39, 36, 37, 41, 39, 92, 93, 
   64, 100, 101, 64, 106, 107, 69, 114, 115, 69, 52, 53, 8, 9, 11, 13, 
   21, 23, 25, 27, 38, 40, 42, 44, 62, 63, 67, 68, 94, 95, 98, 99, 
   102, 103, 108, 109, 112, 113, 116, 117, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\164\151\156\165\145", 
"\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", "\145\154\163\145", 
"\145\170\164\145\156\144\163", "\146\141\154\163\145", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", "\146\157\162\145\141\143\150", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", 
"\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", 
"\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144", "\167\151\164\150", 
"\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", 
"\164\162\165\145", "\164\162\171", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", "\55\76", "\146\165\156", "\166\151\162\164\165\141\154", "\56\56\56", 
"\146\157\162\167\141\162\144", "\162\165\154\145", "\44\143\165\164", "\44\143\141\163\164", 
"\44\162\145\151\156\164\145\162\160", "\141\154\151\141\163", "\157\160\145\162\141\164\157\162", 
"\164\171\160\145\144\145\146", "\145\156\165\155", "\162\145\161\165\151\162\145", 
"\145\156\163\165\162\145", "\151\156\166\141\162\151\141\156\164", "\44\147\145\156\145\162\141\164\145", 
"\160\141\143\153\145\144", "\44\167\162\141\160\160\145\162", "\141\143\143\145\163\163\72", null, null, 
"\162\167", null, "\54", null, null, null, null, null, "\160\162\141\147\155\141", 
"\145\156\141\142\154\145", "\144\151\163\141\142\154\145", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\72", "\77", "\74", "\76", "\75", "\72\75", 
"\41", "\176", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", 
"\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", 
"\74\74\75", "\76\76\75", "\76\76\76\75", "\77\75", "\100\75", "\100", "\43", null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_PRAGMA", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_ACCESS", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 1, 0, 0, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff8001L, 0xffff1f63e0ffffffL, 0x7ffffffffL, 
};
static final long[] jjtoSkip = {
   0x3ffeL, 0x1f000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x4000L, 0x0L, 0x0L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[125];
static private final int[] jjstateSet = new int[250];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public kiev040TokenManager(JavaCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public kiev040TokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 125; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   if( t.kind == 0 ) t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 9 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 54 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[54]);
         else
            image.append(jjstrLiteralImages[54]);
                     if(Kiev.javaMode||Kiev.disabled(Ext.With)) matchedToken.kind=IDENTIFIER;
         break;
      case 65 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[65]);
         else
            image.append(jjstrLiteralImages[65]);
                           if(Kiev.javaMode || Kiev.disabled(Ext.VirtualFields) || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 67 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[67]);
         else
            image.append(jjstrLiteralImages[67]);
                           if(Kiev.javaMode || Kiev.disabled(Ext.Forward) /*|| !kiev040.declMode*/) matchedToken.kind=IDENTIFIER;
         break;
      case 68 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[68]);
         else
            image.append(jjstrLiteralImages[68]);
                     if(Kiev.javaMode || Kiev.disabled(Ext.Logic) ) matchedToken.kind=IDENTIFIER;
         break;
      case 69 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[69]);
         else
            image.append(jjstrLiteralImages[69]);
                     if(Kiev.javaMode || Kiev.disabled(Ext.Logic) ) matchedToken.kind=IDENTIFIER;
         break;
      case 70 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[70]);
         else
            image.append(jjstrLiteralImages[70]);
                      if(Kiev.javaMode) matchedToken.kind=IDENTIFIER;
         break;
      case 71 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[71]);
         else
            image.append(jjstrLiteralImages[71]);
                              if(Kiev.javaMode) matchedToken.kind=IDENTIFIER;
         break;
      case 72 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[72]);
         else
            image.append(jjstrLiteralImages[72]);
                       if(Kiev.javaMode || Kiev.disabled(Ext.Alias)  || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 73 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[73]);
         else
            image.append(jjstrLiteralImages[73]);
                                if(Kiev.javaMode || Kiev.disabled(Ext.Operator) ) matchedToken.kind=IDENTIFIER;
         break;
      case 74 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[74]);
         else
            image.append(jjstrLiteralImages[74]);
                           if(Kiev.javaMode || Kiev.disabled(Ext.Typedef)  || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 75 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[75]);
         else
            image.append(jjstrLiteralImages[75]);
                     if(Kiev.javaMode || Kiev.disabled(Ext.Enum) || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 76 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[76]);
         else
            image.append(jjstrLiteralImages[76]);
                           if(Kiev.javaMode || Kiev.disabled(Ext.Contract) || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 77 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[77]);
         else
            image.append(jjstrLiteralImages[77]);
                         if(Kiev.javaMode || Kiev.disabled(Ext.Contract) || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 78 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[78]);
         else
            image.append(jjstrLiteralImages[78]);
                               if(Kiev.javaMode || Kiev.disabled(Ext.Contract) || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 79 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[79]);
         else
            image.append(jjstrLiteralImages[79]);
                              if(Kiev.javaMode || Kiev.disabled(Ext.Templates) || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 80 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[80]);
         else
            image.append(jjstrLiteralImages[80]);
                         if(Kiev.javaMode || Kiev.disabled(Ext.PackedFields) || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 81 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[81]);
         else
            image.append(jjstrLiteralImages[81]);
                            if(Kiev.javaMode || Kiev.disabled(Ext.Wrappers) || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 82 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[82]);
         else
            image.append(jjstrLiteralImages[82]);
                        if(Kiev.javaMode || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 83 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               if(Kiev.javaMode || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 84 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               if(Kiev.javaMode || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 85 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[85]);
         else
            image.append(jjstrLiteralImages[85]);
                          if(Kiev.javaMode || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 86 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   if(Kiev.javaMode || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 93 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[93]);
         else
            image.append(jjstrLiteralImages[93]);
                       if(Kiev.javaMode || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 94 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[94]);
         else
            image.append(jjstrLiteralImages[94]);
                                  if(Kiev.javaMode || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      case 95 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[95]);
         else
            image.append(jjstrLiteralImages[95]);
                                  if(Kiev.javaMode || !kiev040.declMode) matchedToken.kind=IDENTIFIER;
         break;
      default : 
         break;
   }
}
}

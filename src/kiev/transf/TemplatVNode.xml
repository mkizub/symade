<?xml version='1.1' encoding='UTF-8' standalone='yes'?>
<!--
 Copyright (c) 2005-2007 UAB "MAKSINETA".
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Common Public License Version 1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/cpl-v10.html
 
 Contributors:
     "Maxim Kizub" mkizub@symade.com - initial design and implementation
-->
<sop:dump version='1.0' xmlns:sop='sop://sop/'
  xmlns:core='sop://languages/core?class=kiev.vlang.CoreLang'
  xmlns:macro='sop://languages/macro?class=kiev.vlang.MacroLang'>
 <core:FileUnit>
  <project_file>true</project_file>
  <srpkg>
   <core:SymbolRef name='kiev&#31;transf' full='true' />
  </srpkg>
  <syntaxes>
   <core:ImportSyntax>
    <name>
     <core:SymbolRef name='kiev&#31;Syntax' full='true' />
    </name>
   </core:ImportSyntax>
  </syntaxes>
  <members>
   <core:MetaTypeDecl name='TemplateVNode'>
    <members>
     <core:JavaClass name='VVV'>
      <super_types>
       <core:TypeNameRef ident='java&#31;lang&#31;Object' full='true' />
      </super_types>
      <metas>
       <core:MetaStatic />
      </metas>
     </core:JavaClass>
     <core:Method name='codeSet'>
      <type_ret>
       <core:TypeNameRef ident='void' />
      </type_ret>
      <body>
       <macro:RewriteMatch>
        <cases>
         <macro:RewriteCase>
          <var>
           <macro:RewritePattern name='self'>
            <vars>
             <macro:RewritePattern name='lval'>
              <vars>
               <macro:RewritePattern name='obj'>
                <vtype>
                 <core:TypeExpr ident='_astnode_'>
                  <arg>
                   <core:TypeNameRef ident='EThis' />
                  </arg>
                  <op_name>T #</op_name>
                 </core:TypeExpr>
                </vtype>
               </macro:RewritePattern>
              </vars>
              <vtype>
               <core:TypeExpr ident='_astnode_'>
                <arg>
                 <core:TypeNameRef ident='IFld' />
                </arg>
                <op_name>T #</op_name>
               </core:TypeExpr>
              </vtype>
             </macro:RewritePattern>
            </vars>
            <vtype>
             <core:TypeExpr ident='_astnode_'>
              <arg>
               <core:TypeNameRef ident='Set' />
              </arg>
              <op_name>T #</op_name>
             </core:TypeExpr>
            </vtype>
           </macro:RewritePattern>
          </var>
          <stats>
           <core:If>
            <cond>
             <core:BinOp op='V || V'>
              <expr1>
               <core:SFld ident='EXECUTE_UNVERSIONED'>
                <obj>
                 <core:TypeNameRef ident='ASTNode' />
                </obj>
               </core:SFld>
              </expr1>
              <expr2>
               <core:UnaryOp op='! V'>
                <expr>
                 <core:Access ident='versioned'>
                  <obj>
                   <macro:MacroSubstExpr>
                    <expr>
                     <macro:MacroAccess ident='obj'>
                      <obj>
                       <macro:MacroAccess ident='lval'>
                        <obj>
                         <core:LVarExpr ident='self' />
                        </obj>
                       </macro:MacroAccess>
                      </obj>
                     </macro:MacroAccess>
                    </expr>
                   </macro:MacroSubstExpr>
                  </obj>
                 </core:Access>
                </expr>
               </core:UnaryOp>
              </expr2>
             </core:BinOp>
            </cond>
            <thenSt>
             <core:BinOp op='V = V'>
              <expr1>
               <macro:MacroSubstExpr>
                <expr>
                 <macro:MacroAccess ident='lval'>
                  <obj>
                   <core:LVarExpr ident='self' />
                  </obj>
                 </macro:MacroAccess>
                </expr>
               </macro:MacroSubstExpr>
              </expr1>
              <expr2>
               <macro:MacroSubstExpr>
                <expr>
                 <macro:MacroAccess ident='value'>
                  <obj>
                   <core:LVarExpr ident='self' />
                  </obj>
                 </macro:MacroAccess>
                </expr>
               </macro:MacroSubstExpr>
              </expr2>
             </core:BinOp>
            </thenSt>
            <elseSt>
             <core:If>
              <cond>
               <core:Cmp op='V == V' ident='ref_eq'>
                <expr1>
                 <core:Call ident='currentThread'>
                  <obj>
                   <core:TypeNameRef ident='Thread' />
                  </obj>
                 </core:Call>
                </expr1>
                <expr2>
                 <core:TypeNameRef ident='CompilerThread' />
                </expr2>
               </core:Cmp>
              </cond>
              <thenSt>
               <core:BinOp op='V = V'>
                <expr1>
                 <core:Access ident='{self>lval>ident}'>
                  <obj>
                   <core:Call ident='openCmp'>
                    <obj>
                     <core:TypeNameRef ident='ASTNode' />
                    </obj>
                    <args>
                     <macro:MacroSubstExpr>
                      <expr>
                       <macro:MacroAccess ident='obj'>
                        <obj>
                         <macro:MacroAccess ident='lval'>
                          <obj>
                           <core:LVarExpr ident='self' />
                          </obj>
                         </macro:MacroAccess>
                        </obj>
                       </macro:MacroAccess>
                      </expr>
                     </macro:MacroSubstExpr>
                    </args>
                   </core:Call>
                  </obj>
                 </core:Access>
                </expr1>
                <expr2>
                 <macro:MacroSubstExpr>
                  <expr>
                   <macro:MacroAccess ident='value'>
                    <obj>
                     <core:LVarExpr ident='self' />
                    </obj>
                   </macro:MacroAccess>
                  </expr>
                 </macro:MacroSubstExpr>
                </expr2>
               </core:BinOp>
              </thenSt>
              <elseSt>
               <core:BinOp op='V = V'>
                <expr1>
                 <core:Access ident='{self>lval>ident}'>
                  <obj>
                   <core:Cast>
                    <ctype>
                     <core:TypeNameRef ident='VVV' />
                    </ctype>
                    <expr>
                     <core:Call ident='openEdt'>
                      <obj>
                       <core:TypeNameRef ident='ASTNode' />
                      </obj>
                      <args>
                       <macro:MacroSubstExpr>
                        <expr>
                         <macro:MacroAccess ident='obj'>
                          <obj>
                           <macro:MacroAccess ident='lval'>
                            <obj>
                             <core:LVarExpr ident='self' />
                            </obj>
                           </macro:MacroAccess>
                          </obj>
                         </macro:MacroAccess>
                        </expr>
                       </macro:MacroSubstExpr>
                      </args>
                     </core:Call>
                    </expr>
                   </core:Cast>
                  </obj>
                 </core:Access>
                </expr1>
                <expr2>
                 <macro:MacroSubstExpr>
                  <expr>
                   <macro:MacroAccess ident='value'>
                    <obj>
                     <core:LVarExpr ident='self' />
                    </obj>
                   </macro:MacroAccess>
                  </expr>
                 </macro:MacroSubstExpr>
                </expr2>
               </core:BinOp>
              </elseSt>
             </core:If>
            </elseSt>
           </core:If>
          </stats>
         </macro:RewriteCase>
        </cases>
       </macro:RewriteMatch>
      </body>
      <metas>
       <core:MetaMacro />
       <core:MetaStatic />
      </metas>
     </core:Method>
     <core:Method name='codeGet'>
      <type_ret>
       <core:TypeNameRef ident='void' />
      </type_ret>
      <body>
       <macro:RewriteMatch>
        <cases>
         <macro:RewriteCase>
          <var>
           <macro:RewritePattern name='self'>
            <vars>
             <macro:RewritePattern name='obj'>
              <vtype>
               <core:TypeExpr ident='_astnode_'>
                <arg>
                 <core:TypeNameRef ident='EThis' />
                </arg>
                <op_name>T #</op_name>
               </core:TypeExpr>
              </vtype>
             </macro:RewritePattern>
            </vars>
            <vtype>
             <core:TypeExpr ident='_astnode_'>
              <arg>
               <core:TypeNameRef ident='IFld' />
              </arg>
              <op_name>T #</op_name>
             </core:TypeExpr>
            </vtype>
           </macro:RewritePattern>
          </var>
          <stats>
           <core:If>
            <cond>
             <core:BinOp op='V || V'>
              <expr1>
               <core:SFld ident='EXECUTE_UNVERSIONED'>
                <obj>
                 <core:TypeNameRef ident='ASTNode' />
                </obj>
               </core:SFld>
              </expr1>
              <expr2>
               <core:BinOp op='V || V'>
                <expr1>
                 <core:Cmp op='V == V' ident='ref_eq'>
                  <expr1>
                   <core:Call ident='currentThread'>
                    <obj>
                     <core:TypeNameRef ident='Thread' />
                    </obj>
                   </core:Call>
                  </expr1>
                  <expr2>
                   <core:TypeNameRef ident='CompilerThread' />
                  </expr2>
                 </core:Cmp>
                </expr1>
                <expr2>
                 <core:BinOp op='V == V'>
                  <expr1>
                   <core:Access ident='v_editor'>
                    <obj>
                     <macro:MacroSubstExpr>
                      <expr>
                       <macro:MacroAccess ident='obj'>
                        <obj>
                         <core:LVarExpr ident='self' />
                        </obj>
                       </macro:MacroAccess>
                      </expr>
                     </macro:MacroSubstExpr>
                    </obj>
                   </core:Access>
                  </expr1>
                  <expr2>
                   <core:ConstNullExpr />
                  </expr2>
                 </core:BinOp>
                </expr2>
               </core:BinOp>
              </expr2>
             </core:BinOp>
            </cond>
            <thenSt>
             <macro:MacroSubstExpr>
              <expr>
               <core:LVarExpr ident='self' />
              </expr>
             </macro:MacroSubstExpr>
            </thenSt>
            <elseSt>
             <core:Access ident='{self>ident}'>
              <obj>
               <core:Cast>
                <ctype>
                 <core:TypeNameRef ident='VVV' />
                </ctype>
                <expr>
                 <core:Access ident='v_editor'>
                  <obj>
                   <macro:MacroSubstExpr>
                    <expr>
                     <macro:MacroAccess ident='obj'>
                      <obj>
                       <core:LVarExpr ident='self' />
                      </obj>
                     </macro:MacroAccess>
                    </expr>
                   </macro:MacroSubstExpr>
                  </obj>
                 </core:Access>
                </expr>
               </core:Cast>
              </obj>
             </core:Access>
            </elseSt>
           </core:If>
          </stats>
         </macro:RewriteCase>
        </cases>
       </macro:RewriteMatch>
      </body>
      <metas>
       <core:MetaMacro />
       <core:MetaStatic />
      </metas>
     </core:Method>
    </members>
    <super_types>
     <core:TypeNameRef ident='any' />
    </super_types>
   </core:MetaTypeDecl>
  </members>
 </core:FileUnit>
</sop:dump>
/* Generated By:JJTree: Do not edit this line. ASTNonArrayType.java */

/*
 Copyright (C) 1997-1998, Forestro, http://forestro.com

 This file is part of the Kiev compiler.

 The Kiev compiler is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation.

 The Kiev compiler is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with the Kiev compiler; see the file License.  If not, write to
 the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.
*/

package kiev.transf;

import kiev.Kiev;
import kiev.parser.*;
import kiev.tree.*;

import static kiev.stdlib.Debug.*;
import syntax kiev.Syntax;


/**
 * @author Maxim Kizub
 *
 */

public final class ExportFromAST {
	
	public final class ExportASTCreateInfo extends CreateInfo {
		public ASTNode src_node;
		
		public ExportASTCreateInfo(ASTNode src_node) {
			this.src_node = src_node;
		}
	}
	
	private final Tree from;
	private final Tree into;

	public ExportFromAST(Tree from, Tree into)
	{
		this.from = from;
		this.into = into;
	}
	
	private CreateInfo mkInfo(ASTNode node) {
		return new ExportASTCreateInfo(node);
	}
	
	public void pass(int pass_no) {
		switch (pass_no) {
		case TopLevelPass.passCreateTopStruct:
			createTop();
			break;
		}
	}
	
	private void createTop() {
		foreach (Node n; from.members)
			createTop(n, null);
	}
	
	private Node createTop(Node node, Node# parent) {
		return;
	}
	
	private Node createTop(ASTFileUnit node, Node# parent) {
		KString oldfn = Kiev.curFile;
		Kiev.curFile = node.filename;
		boolean[] exts = Kiev.getExtSet();
        try {
        	Kiev.setExtSet(node.disabled_extensions);
			FileUnit file_unit = new FileUnit(parent,node.filename);
			file_unit.info                = mkInfo(node);
			file_unit.filename            = node.filename;
			file_unit.disabled_extensions = node.disabled_extensions;
			file_unit.bodies              = bodies;
			file_unit.pkg                 = createTop(node.pkg, file_unit);
			foreach (ASTNode decl; node.decls)
				file_unit.members.add(createTop(decl, file_unit));
			return file_unit;
		} finally { Kiev.curFile = oldfn; Kiev.setExtSet(exts); }
	}
	
	public Node createTop(ASTPackage node, Node# parent) {
		return Env.newPackage(node.name);
	}

	public Node createTop(ASTSyntaxDeclaration node, Node# parent) {
		boolean isTop = parent instanceof FileUnit;
		ClazzName clname = ClazzName.fromOuterAndName(PassInfo.clazz, name, false, !isTop);
		me = Env.newSyntax(clname,PassInfo.clazz,ACC_PRIVATE|ACC_ABSTRACT|ACC_SYNTAX,true);

		if( parent instanceof ASTFileUnit || parent instanceof ASTTypeDeclaration ) {
			Env.setProjectInfo(me.name,((ASTFileUnit)Kiev.k.getJJTree().rootNode()).filename);
		}
		
        PassInfo.push(me);
        try {
			/* Generate type for this structure */
			me.type = Type.newJavaRefType(me);
		} finally { PassInfo.pop(me); }

		return me;
	}

}

	

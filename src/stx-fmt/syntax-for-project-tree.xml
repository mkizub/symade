<?xml version='1.1' encoding='UTF-8' standalone='yes'?>
<!--
 Copyright (c) 2005-2007 UAB "MAKSINETA".
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Common Public License Version 1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/cpl-v10.html
 
 Contributors:
     "Maxim Kizub" mkizub@symade.com - initial design and implementation
-->
<sop:dump version='1.0' xmlns:sop='sop://sop/'
  xmlns:core='sop://languages/core?class=kiev.vlang.CoreLang'
  xmlns:syntax='sop://languages/syntax?class=kiev.fmt.SyntaxLang'>
 <core:FileUnit>
  <project_file>true</project_file>
  <srpkg>
   <core:SymbolRef name='stx-fmt' full='true' />
  </srpkg>
  <members>
   <core:Import all='false' methods='false'>
    <name>
     <core:SymbolRef name='kiev&#31;stdlib&#31;Syntax' full='true' />
    </name>
    <mode>IMPORT_SYNTAX</mode>
   </core:Import>
   <core:Import all='true' methods='false'>
    <name>
     <core:SymbolRef name='kiev&#31;vlang' full='true' />
    </name>
    <mode>IMPORT_CLASS</mode>
   </core:Import>
   <core:Import all='true' methods='false'>
    <name>
     <core:SymbolRef name='kiev&#31;vlang&#31;types' full='true' />
    </name>
    <mode>IMPORT_CLASS</mode>
   </core:Import>
   <core:Import all='true' methods='false'>
    <name>
     <core:SymbolRef name='kiev&#31;parser' full='true' />
    </name>
    <mode>IMPORT_CLASS</mode>
   </core:Import>
   <core:Import all='true' methods='false'>
    <name>
     <core:SymbolRef name='kiev&#31;fmt' full='true' />
    </name>
    <mode>IMPORT_CLASS</mode>
   </core:Import>
   <syntax:TreeSyntax name='syntax-for-project-tree'>
    <members>
     <syntax:SpaceInfo name='sp'>
      <kind>SP_SPACE</kind>
      <text_size>2</text_size>
      <pixel_size>4</pixel_size>
     </syntax:SpaceInfo>
     <syntax:DrawColor name='color-default'>
      <rgb_color>0</rgb_color>
     </syntax:DrawColor>
     <syntax:DrawFont name='font-default'>
      <font_name>Dialog-PLAIN-12</font_name>
     </syntax:DrawFont>
     <syntax:SyntaxElemFormatDecl name='fmt-default'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-default' />
      </color>
      <font>
       <core:SymbolRef name='font-default' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxIdentTemplate name='ident-template'>
      <regexp_ok>.*</regexp_ok>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxIdentTemplate>
     <syntax:SyntaxExprTemplate name='type-expr-template'>
      <l_paren>
       <syntax:SyntaxToken>
        <text>(</text>
       </syntax:SyntaxToken>
      </l_paren>
      <bad_op>
       <syntax:SyntaxToken>
        <text>â—™</text>
        <kind>OPERATOR</kind>
       </syntax:SyntaxToken>
      </bad_op>
      <r_paren>
       <syntax:SyntaxToken>
        <text>)</text>
       </syntax:SyntaxToken>
      </r_paren>
      <operators>
       <syntax:SyntaxToken>
        <text>DEFAULT</text>
       </syntax:SyntaxToken>
      </operators>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxExprTemplate>
     <syntax:SyntaxElemDecl name='stx-project'>
      <rnode>
       <core:SymbolRef name='Project' />
      </rnode>
      <elem>
       <syntax:SyntaxTreeBranch>
        <folded>
         <syntax:SyntaxToken>
          <text>Project</text>
         </syntax:SyntaxToken>
        </folded>
        <element>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxSubAttr>
            <name>root_dir</name>
           </syntax:SyntaxSubAttr>
          </elements>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </element>
        <name>root_dir</name>
       </syntax:SyntaxTreeBranch>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-dir'>
      <rnode>
       <core:SymbolRef name='DirUnit' />
      </rnode>
      <elem>
       <syntax:SyntaxTreeBranch>
        <folded>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>name</name>
           </syntax:SyntaxIdentAttr>
           <syntax:SyntaxToken>
            <text>/</text>
           </syntax:SyntaxToken>
          </elements>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </folded>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <name>members</name>
       </syntax:SyntaxTreeBranch>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-file'>
      <rnode>
       <core:SymbolRef name='FileUnit' />
      </rnode>
      <elem>
       <syntax:SyntaxTreeBranch>
        <folded>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>fname</name>
           </syntax:SyntaxIdentAttr>
          </elements>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </folded>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <filter>
         <syntax:CalcOptionClass>
          <name>kiev.vlang.DNode</name>
         </syntax:CalcOptionClass>
        </filter>
        <name>members</name>
       </syntax:SyntaxTreeBranch>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-struct-enum'>
      <rnode>
       <core:SymbolRef name='JavaEnum' />
      </rnode>
      <elem>
       <syntax:SyntaxTreeBranch>
        <folded>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>Enum: </text>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
           </syntax:SyntaxIdentAttr>
          </elements>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </folded>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <filter>
         <syntax:CalcOptionNot>
          <opt>
           <syntax:CalcOptionHasMeta>
            <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
           </syntax:CalcOptionHasMeta>
          </opt>
         </syntax:CalcOptionNot>
        </filter>
        <name>members</name>
       </syntax:SyntaxTreeBranch>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-struct-case'>
      <rnode>
       <core:SymbolRef name='PizzaCase' />
      </rnode>
      <elem>
       <syntax:SyntaxTreeBranch>
        <folded>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>case: </text>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
           </syntax:SyntaxIdentAttr>
          </elements>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </folded>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <filter>
         <syntax:CalcOptionNot>
          <opt>
           <syntax:CalcOptionHasMeta>
            <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
           </syntax:CalcOptionHasMeta>
          </opt>
         </syntax:CalcOptionNot>
        </filter>
        <name>members</name>
       </syntax:SyntaxTreeBranch>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-struct-syntax'>
      <rnode>
       <core:SymbolRef name='KievSyntax' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>syntax: </text>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
         </syntax:SyntaxIdentAttr>
        </elements>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-struct-view'>
      <rnode>
       <core:SymbolRef name='KievView' />
      </rnode>
      <elem>
       <syntax:SyntaxTreeBranch>
        <folded>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>View: </text>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
           </syntax:SyntaxIdentAttr>
           <syntax:SyntaxToken>
            <text> of </text>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>view_of</name>
           </syntax:SyntaxIdentAttr>
          </elements>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </folded>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <filter>
         <syntax:CalcOptionNot>
          <opt>
           <syntax:CalcOptionHasMeta>
            <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
           </syntax:CalcOptionHasMeta>
          </opt>
         </syntax:CalcOptionNot>
        </filter>
        <name>members</name>
       </syntax:SyntaxTreeBranch>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-struct-annotation'>
      <rnode>
       <core:SymbolRef name='JavaAnnotation' />
      </rnode>
      <elem>
       <syntax:SyntaxTreeBranch>
        <folded>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>Annot: </text>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
           </syntax:SyntaxIdentAttr>
          </elements>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </folded>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <filter>
         <syntax:CalcOptionNot>
          <opt>
           <syntax:CalcOptionHasMeta>
            <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
           </syntax:CalcOptionHasMeta>
          </opt>
         </syntax:CalcOptionNot>
        </filter>
        <name>members</name>
       </syntax:SyntaxTreeBranch>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-struct-interface'>
      <rnode>
       <core:SymbolRef name='JavaInterface' />
      </rnode>
      <elem>
       <syntax:SyntaxTreeBranch>
        <folded>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>Iface: </text>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
           </syntax:SyntaxIdentAttr>
          </elements>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </folded>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <filter>
         <syntax:CalcOptionNot>
          <opt>
           <syntax:CalcOptionHasMeta>
            <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
           </syntax:CalcOptionHasMeta>
          </opt>
         </syntax:CalcOptionNot>
        </filter>
        <name>members</name>
       </syntax:SyntaxTreeBranch>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-struct-class'>
      <rnode>
       <core:SymbolRef name='JavaClass' />
      </rnode>
      <elem>
       <syntax:SyntaxTreeBranch>
        <folded>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>Class: </text>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
           </syntax:SyntaxIdentAttr>
          </elements>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </folded>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <filter>
         <syntax:CalcOptionNot>
          <opt>
           <syntax:CalcOptionHasMeta>
            <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
           </syntax:CalcOptionHasMeta>
          </opt>
         </syntax:CalcOptionNot>
        </filter>
        <name>members</name>
       </syntax:SyntaxTreeBranch>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-metatype'>
      <rnode>
       <core:SymbolRef name='MetaTypeDecl' />
      </rnode>
      <elem>
       <syntax:SyntaxTreeBranch>
        <folded>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>TypeDecl: </text>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
           </syntax:SyntaxIdentAttr>
          </elements>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </folded>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <filter>
         <syntax:CalcOptionNot>
          <opt>
           <syntax:CalcOptionHasMeta>
            <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
           </syntax:CalcOptionHasMeta>
          </opt>
         </syntax:CalcOptionNot>
        </filter>
        <name>members</name>
       </syntax:SyntaxTreeBranch>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-field'>
      <rnode>
       <core:SymbolRef name='Field' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>fld: </text>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxToken>
          <text> : </text>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>vtype</name>
         </syntax:SyntaxSubAttr>
        </elements>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-ctor'>
      <rnode>
       <core:SymbolRef name='Constructor' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>ctor: </text>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-form-par' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)</text>
           </syntax:SyntaxToken>
          </sufix>
          <name>params</name>
         </syntax:SyntaxList>
        </elements>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-method'>
      <rnode>
       <core:SymbolRef name='MethodImpl' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>meth: </text>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-form-par' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)-></text>
           </syntax:SyntaxToken>
          </sufix>
          <name>params</name>
         </syntax:SyntaxList>
         <syntax:SyntaxSubAttr>
          <name>type_ret</name>
         </syntax:SyntaxSubAttr>
        </elements>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rule'>
      <rnode>
       <core:SymbolRef name='RuleMethod' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>rule: </text>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-form-par' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)->rule</text>
           </syntax:SyntaxToken>
          </sufix>
          <name>params</name>
         </syntax:SyntaxList>
        </elements>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-constr'>
      <rnode>
       <core:SymbolRef name='TypeConstr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>type: </text>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
         </syntax:SyntaxIdentAttr>
        </elements>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-assign'>
      <rnode>
       <core:SymbolRef name='TypeAssign' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>type: </text>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
         </syntax:SyntaxIdentAttr>
        </elements>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-ref'>
      <rnode>
       <core:SymbolRef name='TypeRef' />
      </rnode>
      <elem>
       <syntax:SyntaxIdentAttr>
        <decl>
         <core:SymbolRef name='ident-template' />
        </decl>
        <name>ident</name>
       </syntax:SyntaxIdentAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-nam'>
      <rnode>
       <core:SymbolRef name='TypeNameRef' />
      </rnode>
      <elem>
       <syntax:SyntaxIdentAttr>
        <decl>
         <core:SymbolRef name='ident-template' />
        </decl>
        <name>ident</name>
       </syntax:SyntaxIdentAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-expr'>
      <rnode>
       <core:SymbolRef name='TypeExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>arg</name>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='type-expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:TextSyntax name='syntax-form-par'>
      <members>
       <syntax:SyntaxElemDecl name='stx-form-par'>
        <rnode>
         <core:SymbolRef name='LVar' />
        </rnode>
        <elem>
         <syntax:SyntaxSubAttr>
          <name>vtype</name>
         </syntax:SyntaxSubAttr>
        </elem>
       </syntax:SyntaxElemDecl>
      </members>
     </syntax:TextSyntax>
    </members>
   </syntax:TreeSyntax>
  </members>
 </core:FileUnit>
</sop:dump>
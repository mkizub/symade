<?xml version='1.1' encoding='UTF-8' standalone='yes'?>
<!--
 Copyright (c) 2005-2007 UAB "MAKSINETA".
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Common Public License Version 1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/cpl-v10.html
 
 Contributors:
     "Maxim Kizub" mkizub@symade.com - initial design and implementation
-->
<sop:dump version='1.0' xmlns:sop='sop://sop/'
  xmlns:core='sop://languages/core?class=kiev.vlang.CoreLang'
  xmlns:syntax='sop://languages/syntax?class=kiev.fmt.SyntaxLang'>
 <core:FileUnit>
  <project_file>true</project_file>
  <srpkg>
   <core:SymbolRef name='stx-fmt' full='true' />
  </srpkg>
  <members>
   <core:Import all='false' methods='false'>
    <name>
     <core:SymbolRef name='kiev&#31;stdlib&#31;Syntax' full='true' />
    </name>
    <mode>IMPORT_SYNTAX</mode>
   </core:Import>
   <core:Import all='true' methods='false'>
    <name>
     <core:SymbolRef name='kiev&#31;vlang' full='true' />
    </name>
    <mode>IMPORT_CLASS</mode>
   </core:Import>
   <core:Import all='true' methods='false'>
    <name>
     <core:SymbolRef name='kiev&#31;vlang&#31;types' full='true' />
    </name>
    <mode>IMPORT_CLASS</mode>
   </core:Import>
   <core:Import all='true' methods='false'>
    <name>
     <core:SymbolRef name='kiev&#31;parser' full='true' />
    </name>
    <mode>IMPORT_CLASS</mode>
   </core:Import>
   <core:Import all='true' methods='false'>
    <name>
     <core:SymbolRef name='kiev&#31;fmt' full='true' />
    </name>
    <mode>IMPORT_CLASS</mode>
   </core:Import>
   <syntax:KievTextSyntax name='syntax-for-java'>
    <members>
     <syntax:SpaceInfo name='sp'>
      <kind>SP_SPACE</kind>
      <text_size>1</text_size>
      <pixel_size>4</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='sp-sepr'>
      <kind>SP_SPACE</kind>
      <text_size>1</text_size>
      <pixel_size>4</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='sp-word'>
      <kind>SP_SPACE</kind>
      <text_size>1</text_size>
      <pixel_size>4</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='sp-oper'>
      <kind>SP_SPACE</kind>
      <text_size>1</text_size>
      <pixel_size>2</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='nl'>
      <kind>SP_NEW_LINE</kind>
      <text_size>1</text_size>
      <pixel_size>1</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='nl-group'>
      <kind>SP_NEW_LINE</kind>
      <text_size>2</text_size>
      <pixel_size>20</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='nl-block'>
      <kind>SP_NEW_LINE</kind>
      <text_size>1</text_size>
      <pixel_size>1</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='nl-block-if'>
      <kind>SP_NEW_LINE</kind>
      <text_size>1</text_size>
      <pixel_size>1</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='nl-block-group'>
      <kind>SP_NEW_LINE</kind>
      <text_size>2</text_size>
      <pixel_size>20</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='nl-else'>
      <kind>SP_NEW_LINE</kind>
      <text_size>1</text_size>
      <pixel_size>1</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='nl-import-group'>
      <kind>SP_NEW_LINE</kind>
      <text_size>2</text_size>
      <pixel_size>20</pixel_size>
     </syntax:SpaceInfo>
     <syntax:SpaceInfo name='nl-field-group'>
      <kind>SP_NEW_LINE</kind>
      <text_size>2</text_size>
      <pixel_size>20</pixel_size>
     </syntax:SpaceInfo>
     <syntax:ParagraphLayout name='par-indented'>
      <indent_text_size>2</indent_text_size>
      <indent_pixel_size>20</indent_pixel_size>
     </syntax:ParagraphLayout>
     <syntax:ParagraphLayout name='par-flow-indented'>
      <next_indent_text_size>4</next_indent_text_size>
      <next_indent_pixel_size>40</next_indent_pixel_size>
      <flow>true</flow>
     </syntax:ParagraphLayout>
     <syntax:ParagraphLayout name='par-indented-flow'>
      <indent_text_size>4</indent_text_size>
      <indent_pixel_size>40</indent_pixel_size>
      <flow>true</flow>
     </syntax:ParagraphLayout>
     <syntax:ParagraphLayout name='par-if-cond'>
      <indent_from_current_position>true</indent_from_current_position>
      <flow>true</flow>
     </syntax:ParagraphLayout>
     <syntax:ParagraphLayoutBlock name='par-indented-block'>
      <token_text>{ #{</token_text>
      <indent_text_size>2</indent_text_size>
      <indent_pixel_size>20</indent_pixel_size>
     </syntax:ParagraphLayoutBlock>
     <syntax:ParagraphLayoutBlock name='par-indented-block-if'>
      <token_text>{ if if# #{</token_text>
      <indent_text_size>2</indent_text_size>
      <indent_pixel_size>20</indent_pixel_size>
     </syntax:ParagraphLayoutBlock>
     <syntax:ParagraphLayout name='par-unindented'>
      <indent_text_size>-2</indent_text_size>
      <indent_pixel_size>-20</indent_pixel_size>
     </syntax:ParagraphLayout>
     <syntax:ParagraphLayout name='par-block' />
     <syntax:DrawColor name='color-default'>
      <rgb_color>0</rgb_color>
     </syntax:DrawColor>
     <syntax:DrawColor name='color-black'>
      <rgb_color>0</rgb_color>
     </syntax:DrawColor>
     <syntax:DrawColor name='color-gray'>
      <rgb_color>8421504</rgb_color>
     </syntax:DrawColor>
     <syntax:DrawColor name='color-blue'>
      <rgb_color>255</rgb_color>
     </syntax:DrawColor>
     <syntax:DrawColor name='color-blue-dark'>
      <rgb_color>127</rgb_color>
     </syntax:DrawColor>
     <syntax:DrawColor name='color-green'>
      <rgb_color>65280</rgb_color>
     </syntax:DrawColor>
     <syntax:DrawColor name='color-green-dark'>
      <rgb_color>32768</rgb_color>
     </syntax:DrawColor>
     <syntax:DrawFont name='font-default'>
      <font_name>Dialog-PLAIN-12</font_name>
     </syntax:DrawFont>
     <syntax:DrawFont name='font-plain'>
      <font_name>Dialog-PLAIN-12</font_name>
     </syntax:DrawFont>
     <syntax:DrawFont name='font-bold'>
      <font_name>Dialog-BOLD-12</font_name>
     </syntax:DrawFont>
     <syntax:DrawFont name='font-bold-14'>
      <font_name>Dialog-BOLD-14</font_name>
     </syntax:DrawFont>
     <syntax:DrawFont name='font-bold-16'>
      <font_name>Dialog-BOLD-16</font_name>
     </syntax:DrawFont>
     <syntax:DrawFont name='font-bold-18'>
      <font_name>Dialog-BOLD-18</font_name>
     </syntax:DrawFont>
     <syntax:DrawFont name='font-italic'>
      <font_name>Dialog-ITALIC-12</font_name>
     </syntax:DrawFont>
     <syntax:DrawFont name='font-bolditalic'>
      <font_name>Dialog-BOLDITALIC-12</font_name>
     </syntax:DrawFont>
     <syntax:SyntaxElemFormatDecl name='fmt-default'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-default' />
      </color>
      <font>
       <core:SymbolRef name='font-default' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-keyword'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue-dark' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-number'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue' />
      </color>
      <font>
       <core:SymbolRef name='font-plain' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-string'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-green-dark' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-operator'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-oper' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-plain' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-operator-type'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-oper' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-separator'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-plain' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-separator-eat-all'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-plain' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-separator-eat-left'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-plain' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-separator-eat-right'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-plain' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-separator-cond-start'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-plain' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-separator-cond-end'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-block' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-plain' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-placeholder'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-gray' />
      </color>
      <font>
       <core:SymbolRef name='font-plain' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-placeholder-required'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-gray' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-placeholder-nl'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-gray' />
      </color>
      <font>
       <core:SymbolRef name='font-plain' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-import'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-import-group' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-type-block-start'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-type-block-end'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-code-block-start'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-block' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-block-if' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-else' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-code-block-end'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-else' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-rule-block-start'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-block' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-block-if' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-rule-block-end'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-rule-or'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-oper' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-rule-and'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>1</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-oper' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-type'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bolditalic' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-symbol'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-symbol-14'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue' />
      </color>
      <font>
       <core:SymbolRef name='font-bold-14' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-symbol-16'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue' />
      </color>
      <font>
       <core:SymbolRef name='font-bold-16' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-symbol-18'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue' />
      </color>
      <font>
       <core:SymbolRef name='font-bold-18' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-symref'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue' />
      </color>
      <font>
       <core:SymbolRef name='font-italic' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-meta'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-oper' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue-dark' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-meta-at'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-oper' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_EAT</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue-dark' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-meta-end'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-label-semicolon'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-sepr' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-black' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-space-nl'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-space-nl++'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-space-sp0'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-space-nl-group'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-group' />
        </si>
        <action_before>SP_NOP</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-space-nl++1'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>1</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-space-nl+1'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>1</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-keyword-if'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-else' />
        </si>
        <action_before>SP_EAT</action_before>
        <action_after>SP_NOP</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue-dark' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemFormatDecl name='fmt-keyword-else'>
      <spaces>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='sp-word' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
       <syntax:SpaceCmd>
        <si>
         <core:SymbolRef name='nl-else' />
        </si>
        <action_before>SP_ADD</action_before>
        <action_after>SP_ADD</action_after>
        <from_attempt>0</from_attempt>
       </syntax:SpaceCmd>
      </spaces>
      <color>
       <core:SymbolRef name='color-blue-dark' />
      </color>
      <font>
       <core:SymbolRef name='font-bold' />
      </font>
     </syntax:SyntaxElemFormatDecl>
     <syntax:SyntaxElemDecl name='stx-file-unit'>
      <rnode>
       <core:SymbolRef name='FileUnit' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>srpkg</name>
          <in_syntax>
           <core:SymbolRef name='syntax-file-package' />
          </in_syntax>
          <expected_types>
           <core:SymbolRef name='TypeNameRef' />
          </expected_types>
          <empty>
           <syntax:SyntaxPlaceHolder>
            <text>&lt;package declaration></text>
            <fmt>
             <core:SymbolRef name='fmt-placeholder-nl' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Add package</title>
                <act>kiev.gui.NewElemHere$Factory</act>
                <attr>pkg</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxPlaceHolder>
          </empty>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <fmt>
             <core:SymbolRef name='fmt-space-nl' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <folded_by_default>false</folded_by_default>
          <name>members</name>
          <expected_types>
           <core:SymbolRef name='Import' />
           <core:SymbolRef name='Opdef' />
           <core:SymbolRef name='TypeAssign' />
           <core:SymbolRef name='TypeConstr' />
           <core:SymbolRef name='NameSpace' />
           <core:SymbolRef name='MetaTypeDecl' />
           <core:SymbolRef name='KievSyntax' />
           <core:SymbolRef name='KievView' />
           <core:SymbolRef name='PizzaCase' />
           <core:SymbolRef name='JavaAnnotation' />
           <core:SymbolRef name='JavaEnum' />
           <core:SymbolRef name='JavaInterface' />
           <core:SymbolRef name='JavaClass' />
          </expected_types>
          <empty>
           <syntax:SyntaxPlaceHolder>
            <text>&lt;declarations></text>
           </syntax:SyntaxPlaceHolder>
          </empty>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-namespace'>
      <rnode>
       <core:SymbolRef name='NameSpace' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>namespace</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>srpkg</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add arguments</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>args</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-members' />
          </decl>
          <text>{ members }</text>
         </syntax:SyntaxElemRef>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:TextSyntax name='syntax-file-package'>
      <members>
       <syntax:SyntaxElemDecl name='stx-typename'>
        <rnode>
         <core:SymbolRef name='SymbolRef' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>package</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>name</name>
            <fmt>
             <core:SymbolRef name='fmt-type' />
            </fmt>
           </syntax:SyntaxIdentAttr>
           <syntax:SyntaxToken>
            <text>;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxSpace>
            <fmt>
             <core:SymbolRef name='fmt-space-nl-group' />
            </fmt>
           </syntax:SyntaxSpace>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
      </members>
     </syntax:TextSyntax>
     <syntax:SyntaxExprTemplate name='expr-template'>
      <l_paren>
       <syntax:SyntaxToken>
        <text>(</text>
        <kind>SEPARATOR</kind>
       </syntax:SyntaxToken>
      </l_paren>
      <bad_op>
       <syntax:SyntaxToken>
        <text>◙</text>
        <kind>OPERATOR</kind>
       </syntax:SyntaxToken>
      </bad_op>
      <r_paren>
       <syntax:SyntaxToken>
        <text>)</text>
        <kind>SEPARATOR</kind>
       </syntax:SyntaxToken>
      </r_paren>
      <operators>
       <syntax:SyntaxToken>
        <text>(</text>
        <kind>SEPARATOR</kind>
        <fmt>
         <core:SymbolRef name='fmt-separator-eat-right' />
        </fmt>
       </syntax:SyntaxToken>
       <syntax:SyntaxToken>
        <text>)</text>
        <kind>SEPARATOR</kind>
        <fmt>
         <core:SymbolRef name='fmt-separator-eat-left' />
        </fmt>
       </syntax:SyntaxToken>
       <syntax:SyntaxToken>
        <text>instanceof</text>
        <kind>OPERATOR</kind>
        <fmt>
         <core:SymbolRef name='fmt-keyword' />
        </fmt>
       </syntax:SyntaxToken>
       <syntax:SyntaxToken>
        <text>$cast</text>
        <kind>OPERATOR</kind>
        <fmt>
         <core:SymbolRef name='fmt-keyword' />
        </fmt>
       </syntax:SyntaxToken>
       <syntax:SyntaxToken>
        <text>$reinterp</text>
        <kind>OPERATOR</kind>
        <fmt>
         <core:SymbolRef name='fmt-keyword' />
        </fmt>
       </syntax:SyntaxToken>
       <syntax:SyntaxToken>
        <text>DEFAULT</text>
        <kind>OPERATOR</kind>
        <fmt>
         <core:SymbolRef name='fmt-operator' />
        </fmt>
       </syntax:SyntaxToken>
      </operators>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxExprTemplate>
     <syntax:SyntaxExprTemplate name='type-expr-template'>
      <l_paren>
       <syntax:SyntaxToken>
        <text>(</text>
        <kind>SEPARATOR</kind>
       </syntax:SyntaxToken>
      </l_paren>
      <bad_op>
       <syntax:SyntaxToken>
        <text>◙</text>
        <kind>OPERATOR</kind>
       </syntax:SyntaxToken>
      </bad_op>
      <r_paren>
       <syntax:SyntaxToken>
        <text>)</text>
        <kind>SEPARATOR</kind>
       </syntax:SyntaxToken>
      </r_paren>
      <operators>
       <syntax:SyntaxToken>
        <text>DEFAULT</text>
        <kind>OPERATOR</kind>
        <fmt>
         <core:SymbolRef name='fmt-operator-type' />
        </fmt>
       </syntax:SyntaxToken>
      </operators>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxExprTemplate>
     <syntax:SyntaxJavaCommentTemplate name='java-comment-template'>
      <newline>
       <syntax:SyntaxSpace />
      </newline>
      <lin_beg>
       <syntax:SyntaxToken>
        <text>//</text>
       </syntax:SyntaxToken>
      </lin_beg>
      <doc_beg>
       <syntax:SyntaxToken>
        <text>/**</text>
       </syntax:SyntaxToken>
      </doc_beg>
      <cmt_beg>
       <syntax:SyntaxToken>
        <text>/*</text>
       </syntax:SyntaxToken>
      </cmt_beg>
      <cmt_end>
       <syntax:SyntaxToken>
        <text>*/</text>
       </syntax:SyntaxToken>
      </cmt_end>
      <elem>
       <syntax:SyntaxSubAttr>
        <name>text</name>
        <fmt>
         <core:SymbolRef name='fmt-space-nl' />
        </fmt>
       </syntax:SyntaxSubAttr>
      </elem>
     </syntax:SyntaxJavaCommentTemplate>
     <syntax:SyntaxIdentTemplate name='ident-template-no-escape'>
      <regexp_ok>.*</regexp_ok>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxIdentTemplate>
     <syntax:SyntaxIdentTemplate name='ident-template'>
      <regexp_ok>[\p{Alpha}$_][\p{Alnum}$_]*</regexp_ok>
      <esc_prefix>#id"</esc_prefix>
      <esc_suffix>"#</esc_suffix>
      <keywords>
       <core:ConstStringExpr>
        <value>abstract</value>
       </core:ConstStringExpr>
       <core:ConstStringExpr>
        <value>final</value>
       </core:ConstStringExpr>
       <core:ConstStringExpr>
        <value>static</value>
       </core:ConstStringExpr>
       <core:ConstStringExpr>
        <value>transient</value>
       </core:ConstStringExpr>
       <core:ConstStringExpr>
        <value>synchronized</value>
       </core:ConstStringExpr>
       <core:ConstStringExpr>
        <value>null</value>
       </core:ConstStringExpr>
       <core:ConstStringExpr>
        <value>true</value>
       </core:ConstStringExpr>
       <core:ConstStringExpr>
        <value>false</value>
       </core:ConstStringExpr>
      </keywords>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxIdentTemplate>
     <syntax:SyntaxExpectedTemplate name='stx-types-TypeRef'>
      <expected_types>
       <core:SymbolRef name='TypeNameRef' />
       <core:SymbolRef name='TypeRef' />
       <core:SymbolRef name='TypeClosureRef' />
       <core:SymbolRef name='MacroSubstTypeRef' />
       <core:SymbolRef name='TypeDeclRef' />
       <core:SymbolRef name='TypeExpr' />
      </expected_types>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxExpectedTemplate>
     <syntax:SyntaxExpectedTemplate name='stx-types-Expr'>
      <title>Expression</title>
      <expected_types>
       <core:SymbolRef name='stx-types-Macro' />
       <core:SymbolRef name='EToken' />
       <core:SymbolRef name='ThisExpr' />
       <core:SymbolRef name='SuperExpr' />
       <core:SymbolRef name='LVarExpr' />
       <core:SymbolRef name='UnaryExpr' />
       <core:SymbolRef name='BinaryExpr' />
       <core:SymbolRef name='AccessExpr' />
       <core:SymbolRef name='CallExpr' />
       <core:SymbolRef name='NewExpr' />
       <core:SymbolRef name='InstanceofExpr' />
       <core:SymbolRef name='CastExpr' />
       <core:SymbolRef name='ConditionalExpr' />
       <core:SymbolRef name='StringConcatExpr' />
       <core:SymbolRef name='CommaExpr' />
       <core:SymbolRef name='ConstBoolExpr' />
       <core:SymbolRef name='ConstNullExpr' />
       <core:SymbolRef name='ConstStringExpr' />
       <core:SymbolRef name='ConstIntExpr' />
       <core:SymbolRef name='ConstDoubleExpr' />
      </expected_types>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxExpectedTemplate>
     <syntax:SyntaxExpectedTemplate name='stx-types-Stat'>
      <title>Statement</title>
      <expected_types>
       <core:SymbolRef name='ExprStat' />
       <core:SymbolRef name='Block' />
       <core:SymbolRef name='IfElseStat' />
       <core:SymbolRef name='WhileStat' />
       <core:SymbolRef name='DoWhileStat' />
       <core:SymbolRef name='ForStat' />
       <core:SymbolRef name='ForEachStat' />
       <core:SymbolRef name='LabeledStat' />
       <core:SymbolRef name='SwitchStat' />
       <core:SymbolRef name='TryStat' />
       <core:SymbolRef name='SynchronizedStat' />
       <core:SymbolRef name='WithStat' />
       <core:SymbolRef name='ThrowStat' />
       <core:SymbolRef name='ReturnStat' />
       <core:SymbolRef name='BreakStat' />
       <core:SymbolRef name='ContinueStat' />
       <core:SymbolRef name='GotoStat' />
       <core:SymbolRef name='GotoCaseStat' />
      </expected_types>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxExpectedTemplate>
     <syntax:SyntaxExpectedTemplate name='stx-types-Decl'>
      <title>Declarations</title>
      <expected_types>
       <core:SymbolRef name='LVar' />
       <core:SymbolRef name='JavaClass' />
      </expected_types>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxExpectedTemplate>
     <syntax:SyntaxExpectedTemplate name='stx-types-Macro'>
      <title>Macro</title>
      <expected_types>
       <core:SymbolRef name='MacroAccessExpr' />
       <core:SymbolRef name='MacroSubstExpr' />
       <core:SymbolRef name='MacroSubstTypeRef' />
       <core:SymbolRef name='MacroHasMetaExpr' />
       <core:SymbolRef name='IfElseRewr' />
       <core:SymbolRef name='SwitchRewr' />
       <core:SymbolRef name='ForEachRewr' />
       <core:SymbolRef name='BlockRewr' />
      </expected_types>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxExpectedTemplate>
     <syntax:SyntaxExpectedTemplate name='stx-types-Meta'>
      <title>Meta Data</title>
      <expected_types>
       <core:SymbolRef name='UserMeta' />
       <core:SymbolRef name='MetaAccess' />
       <core:SymbolRef name='MetaUnerasable' />
       <core:SymbolRef name='MetaSingleton' />
       <core:SymbolRef name='MetaForward' />
       <core:SymbolRef name='MetaVirtual' />
       <core:SymbolRef name='MetaMacro' />
       <core:SymbolRef name='MetaStatic' />
       <core:SymbolRef name='MetaAbstract' />
       <core:SymbolRef name='MetaFinal' />
       <core:SymbolRef name='MetaBridge' />
       <core:SymbolRef name='MetaVolatile' />
       <core:SymbolRef name='MetaNative' />
       <core:SymbolRef name='MetaSynchronized' />
       <core:SymbolRef name='MetaTransient' />
      </expected_types>
      <elem>
       <syntax:SyntaxNode>
        <name></name>
       </syntax:SyntaxNode>
      </elem>
     </syntax:SyntaxExpectedTemplate>
     <syntax:PartialSyntaxElemDecl name='stx-nothing'>
      <elem>
       <syntax:SyntaxSpace>
        <fmt>
         <core:SymbolRef name='fmt-space-sp0' />
        </fmt>
       </syntax:SyntaxSpace>
      </elem>
     </syntax:PartialSyntaxElemDecl>
     <syntax:PartialSyntaxElemDecl name='stx-type-block-start'>
      <elem>
       <syntax:SyntaxToken>
        <text>{</text>
        <fmt>
         <core:SymbolRef name='fmt-type-block-start' />
        </fmt>
       </syntax:SyntaxToken>
      </elem>
     </syntax:PartialSyntaxElemDecl>
     <syntax:PartialSyntaxElemDecl name='stx-type-block-end'>
      <elem>
       <syntax:SyntaxToken>
        <text>}</text>
        <fmt>
         <core:SymbolRef name='fmt-type-block-end' />
        </fmt>
       </syntax:SyntaxToken>
      </elem>
     </syntax:PartialSyntaxElemDecl>
     <syntax:PartialSyntaxElemDecl name='stx-type-extends'>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <separator>
         <syntax:SyntaxToken>
          <text>,</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-left' />
          </fmt>
         </syntax:SyntaxToken>
        </separator>
        <prefix>
         <syntax:SyntaxToken>
          <text>extends</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
        </prefix>
        <folded_by_default>false</folded_by_default>
        <name>super_types</name>
        <expected_types>
         <core:SymbolRef name='stx-types-TypeRef' />
        </expected_types>
        <empty>
         <syntax:SyntaxPlaceHolder>
          <text>extends &lt;type></text>
          <fmt>
           <core:SymbolRef name='fmt-placeholder' />
          </fmt>
         </syntax:SyntaxPlaceHolder>
        </empty>
       </syntax:SyntaxList>
      </elem>
     </syntax:PartialSyntaxElemDecl>
     <syntax:PartialSyntaxElemDecl name='stx-type-members'>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxNode>
          <name></name>
          <fmt>
           <core:SymbolRef name='fmt-space-nl' />
          </fmt>
         </syntax:SyntaxNode>
        </element>
        <prefix>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-block-start' />
          </decl>
          <text>{</text>
         </syntax:SyntaxElemRef>
        </prefix>
        <sufix>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-block-end' />
          </decl>
          <text>}</text>
         </syntax:SyntaxElemRef>
        </sufix>
        <filter>
         <syntax:CalcOptionNot>
          <opt>
           <syntax:CalcOptionHasMeta>
            <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
           </syntax:CalcOptionHasMeta>
          </opt>
         </syntax:CalcOptionNot>
        </filter>
        <elpar>
         <core:SymbolRef name='par-indented' />
        </elpar>
        <folded_by_default>false</folded_by_default>
        <name>members</name>
        <expected_types>
         <core:SymbolRef name='MethodImpl' />
         <core:SymbolRef name='RuleMethod' />
         <core:SymbolRef name='Initializer' />
         <core:SymbolRef name='Constructor' />
         <core:SymbolRef name='Field' />
        </expected_types>
        <empty>
         <syntax:SyntaxToken>
          <text>{}</text>
          <fmt>
           <core:SymbolRef name='fmt-type-block-end' />
          </fmt>
         </syntax:SyntaxToken>
        </empty>
       </syntax:SyntaxList>
      </elem>
     </syntax:PartialSyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-import'>
      <rnode>
       <core:SymbolRef name='Import' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>import</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Change import kind</title>
              <act>kiev.gui.ChooseItemEditor</act>
              <attr>mode</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Import All</title>
              <act>kiev.gui.ChooseItemEditor</act>
              <attr>star</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxToken>
         <syntax:SyntaxEnumChoice>
          <elements>
           <syntax:SyntaxSpace />
           <syntax:SyntaxToken>
            <text>static</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxToken>
            <text>syntax</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
          </elements>
          <name>mode</name>
         </syntax:SyntaxEnumChoice>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template-no-escape' />
          </decl>
          <name>name</name>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxEnumChoice>
          <elements>
           <syntax:SyntaxSpace />
           <syntax:SyntaxList>
            <element>
             <syntax:SyntaxNode>
              <name></name>
             </syntax:SyntaxNode>
            </element>
            <separator>
             <syntax:SyntaxToken>
              <text>,</text>
             </syntax:SyntaxToken>
            </separator>
            <prefix>
             <syntax:SyntaxToken>
              <text>(</text>
             </syntax:SyntaxToken>
            </prefix>
            <sufix>
             <syntax:SyntaxToken>
              <text>)</text>
             </syntax:SyntaxToken>
            </sufix>
            <folded_by_default>false</folded_by_default>
            <name>args</name>
           </syntax:SyntaxList>
          </elements>
          <name>of_method</name>
         </syntax:SyntaxEnumChoice>
         <syntax:SyntaxEnumChoice>
          <elements>
           <syntax:SyntaxSpace />
           <syntax:SyntaxToken>
            <text>.*</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
          </elements>
          <name>star</name>
         </syntax:SyntaxEnumChoice>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
        <fmt>
         <core:SymbolRef name='fmt-import' />
        </fmt>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-opdef'>
      <rnode>
       <core:SymbolRef name='Opdef' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>operator</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxStrAttr>
          <name>decl</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
         </syntax:SyntaxStrAttr>
         <syntax:SyntaxToken>
          <text>,</text>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>prior</name>
          <fmt>
           <core:SymbolRef name='fmt-number' />
          </fmt>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-op-def'>
      <rnode>
       <core:SymbolRef name='TypeOpDef' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>typedef</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>arg</name>
          <in_syntax>
           <core:SymbolRef name='syntax-type-args' />
          </in_syntax>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>op</name>
          <in_syntax>
           <core:SymbolRef name='syntax-type-args' />
          </in_syntax>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>dtype</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>;</text>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-assign'>
      <rnode>
       <core:SymbolRef name='TypeAssign' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxToken>
          <text>typedef</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxToken>
          <text>=</text>
          <fmt>
           <core:SymbolRef name='fmt-operator' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>type_ref</name>
          <expected_types>
           <core:SymbolRef name='TypeRef' />
           <core:SymbolRef name='TypeNameRef' />
           <core:SymbolRef name='TypeExpr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-constr'>
      <rnode>
       <core:SymbolRef name='TypeConstr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxToken>
          <text>typedef</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add metadata</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>meta.metas</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add type: extends</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>super_types</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add type: super</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>lower_bound</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxSet>
            <elements>
             <syntax:SyntaxToken>
              <text>≤</text>
              <fmt>
               <core:SymbolRef name='fmt-operator' />
              </fmt>
             </syntax:SyntaxToken>
             <syntax:SyntaxNode>
              <name></name>
             </syntax:SyntaxNode>
            </elements>
            <folded_by_default>false</folded_by_default>
            <nested_function_lookup>false</nested_function_lookup>
           </syntax:SyntaxSet>
          </element>
          <folded_by_default>false</folded_by_default>
          <name>super_types</name>
          <expected_types>
           <core:SymbolRef name='TypeRef' />
           <core:SymbolRef name='TypeNameRef' />
           <core:SymbolRef name='TypeExpr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;super_types></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxSet>
            <elements>
             <syntax:SyntaxToken>
              <text>≥</text>
              <fmt>
               <core:SymbolRef name='fmt-operator' />
              </fmt>
             </syntax:SyntaxToken>
             <syntax:SyntaxNode>
              <name></name>
             </syntax:SyntaxNode>
            </elements>
            <folded_by_default>false</folded_by_default>
            <nested_function_lookup>false</nested_function_lookup>
           </syntax:SyntaxSet>
          </element>
          <folded_by_default>false</folded_by_default>
          <name>lower_bound</name>
          <expected_types>
           <core:SymbolRef name='TypeRef' />
           <core:SymbolRef name='TypeNameRef' />
           <core:SymbolRef name='TypeExpr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;lower_bounds></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:TextSyntax name='syntax-type-args'>
      <members>
       <syntax:SyntaxElemDecl name='std-ast-operator'>
        <rnode>
         <core:SymbolRef name='EToken' />
        </rnode>
        <elem>
         <syntax:SyntaxSubAttr>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-operator-type' />
          </fmt>
         </syntax:SyntaxSubAttr>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-type-assign'>
        <rnode>
         <core:SymbolRef name='TypeAssign' />
        </rnode>
        <elem>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-type-constr'>
        <rnode>
         <core:SymbolRef name='TypeConstr' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-metas' />
            </decl>
            <text>@metas</text>
           </syntax:SyntaxElemRef>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
            <fmt>
             <core:SymbolRef name='fmt-symbol' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Edit name</title>
                <act>kiev.gui.TextEditor$Factory</act>
                <attr>sname</attr>
               </syntax:SyntaxFunction>
               <syntax:SyntaxFunction>
                <title>Add types: extends</title>
                <act>kiev.gui.FuncNewElemOfEmptyList</act>
                <attr>super_types</attr>
               </syntax:SyntaxFunction>
               <syntax:SyntaxFunction>
                <title>Add types: super</title>
                <act>kiev.gui.FuncNewElemOfEmptyList</act>
                <attr>lower_bound</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxIdentAttr>
           <syntax:SyntaxList>
            <element>
             <syntax:SyntaxNode>
              <name></name>
              <in_syntax>
               <core:SymbolRef name='syntax-for-java' />
              </in_syntax>
             </syntax:SyntaxNode>
            </element>
            <separator>
             <syntax:SyntaxToken>
              <text>,</text>
              <fmt>
               <core:SymbolRef name='fmt-separator' />
              </fmt>
             </syntax:SyntaxToken>
            </separator>
            <prefix>
             <syntax:SyntaxToken>
              <text>extends</text>
              <fmt>
               <core:SymbolRef name='fmt-keyword' />
              </fmt>
             </syntax:SyntaxToken>
            </prefix>
            <folded_by_default>false</folded_by_default>
            <name>super_types</name>
            <expected_types>
             <core:SymbolRef name='TypeRef' />
             <core:SymbolRef name='TypeNameRef' />
             <core:SymbolRef name='TypeExpr' />
            </expected_types>
            <empty>
             <syntax:SyntaxElemRef>
              <decl>
               <core:SymbolRef name='stx-nothing' />
              </decl>
              <text>extends &lt;types></text>
             </syntax:SyntaxElemRef>
            </empty>
           </syntax:SyntaxList>
           <syntax:SyntaxList>
            <element>
             <syntax:SyntaxNode>
              <name></name>
              <in_syntax>
               <core:SymbolRef name='syntax-for-java' />
              </in_syntax>
             </syntax:SyntaxNode>
            </element>
            <separator>
             <syntax:SyntaxToken>
              <text>,</text>
              <fmt>
               <core:SymbolRef name='fmt-separator' />
              </fmt>
             </syntax:SyntaxToken>
            </separator>
            <prefix>
             <syntax:SyntaxToken>
              <text>super</text>
              <fmt>
               <core:SymbolRef name='fmt-keyword' />
              </fmt>
             </syntax:SyntaxToken>
            </prefix>
            <folded_by_default>false</folded_by_default>
            <name>lower_bound</name>
            <expected_types>
             <core:SymbolRef name='TypeRef' />
             <core:SymbolRef name='TypeNameRef' />
             <core:SymbolRef name='TypeExpr' />
            </expected_types>
            <empty>
             <syntax:SyntaxElemRef>
              <decl>
               <core:SymbolRef name='stx-nothing' />
              </decl>
              <text>super &lt;types></text>
             </syntax:SyntaxElemRef>
            </empty>
           </syntax:SyntaxList>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
      </members>
     </syntax:TextSyntax>
     <syntax:SyntaxElemDecl name='stx-decl-typedecl'>
      <rnode>
       <core:SymbolRef name='MetaTypeDecl' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxToken>
          <text>metatype</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add arguments</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>args</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-type-args' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>&lt;̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>>̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
          <expected_types>
           <core:SymbolRef name='TypeConstr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;args></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-extends' />
          </decl>
          <text>extends &lt;type></text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-members' />
          </decl>
          <text>{ members }</text>
         </syntax:SyntaxElemRef>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-enum'>
      <rnode>
       <core:SymbolRef name='JavaEnum' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxToken>
          <text>enum</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-block-start' />
          </decl>
          <text>{</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-java-struct-enum' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-space-nl' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <sufix>
           <syntax:SyntaxToken>
            <text>;</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>enum_fields</name>
          <empty>
           <syntax:SyntaxToken>
            <text>;</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </empty>
          <par>
           <core:SymbolRef name='par-indented' />
          </par>
         </syntax:SyntaxList>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-for-java' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <filter>
           <syntax:CalcOptionAnd>
            <opts>
             <syntax:CalcOptionHasNoSyntaxParent>
              <name>this</name>
             </syntax:CalcOptionHasNoSyntaxParent>
             <syntax:CalcOptionNot>
              <opt>
               <syntax:CalcOptionHasMeta>
                <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
               </syntax:CalcOptionHasMeta>
              </opt>
             </syntax:CalcOptionNot>
            </opts>
           </syntax:CalcOptionAnd>
          </filter>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>members</name>
          <empty>
           <syntax:SyntaxToken>
            <text> </text>
           </syntax:SyntaxToken>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-block-end' />
          </decl>
          <text>}</text>
         </syntax:SyntaxElemRef>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:TextSyntax name='syntax-java-struct-enum'>
      <members>
       <syntax:SyntaxElemDecl name='stx-decl-field-enum'>
        <rnode>
         <core:SymbolRef name='Field' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
            <fmt>
             <core:SymbolRef name='fmt-symbol' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Edit name</title>
                <act>kiev.gui.TextEditor$Factory</act>
                <attr>sname</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxIdentAttr>
           <syntax:SyntaxOptional>
            <calculator>
             <syntax:CalcOptionNotNull>
              <name>alt_enum_id</name>
             </syntax:CalcOptionNotNull>
            </calculator>
            <opt_true>
             <syntax:SyntaxSet>
              <elements>
               <syntax:SyntaxToken>
                <text>:</text>
                <fmt>
                 <core:SymbolRef name='fmt-operator' />
                </fmt>
               </syntax:SyntaxToken>
               <syntax:SyntaxSubAttr>
                <name>alt_enum_id</name>
               </syntax:SyntaxSubAttr>
              </elements>
              <folded_by_default>false</folded_by_default>
              <nested_function_lookup>false</nested_function_lookup>
             </syntax:SyntaxSet>
            </opt_true>
           </syntax:SyntaxOptional>
           <syntax:SyntaxSubAttr>
            <name>init</name>
            <expected_types>
             <core:SymbolRef name='NewEnumExpr' />
            </expected_types>
            <empty>
             <syntax:SyntaxPlaceHolder>
              <text>()</text>
              <fmt>
               <core:SymbolRef name='fmt-placeholder' />
              </fmt>
             </syntax:SyntaxPlaceHolder>
            </empty>
           </syntax:SyntaxSubAttr>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
          <par>
           <core:SymbolRef name='par-block' />
          </par>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
      </members>
     </syntax:TextSyntax>
     <syntax:SyntaxElemDecl name='stx-decl-struct-case'>
      <rnode>
       <core:SymbolRef name='PizzaCase' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxToken>
          <text>case</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add arguments</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>args</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-type-args' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>&lt;̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>>̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
          <expected_types>
           <core:SymbolRef name='TypeConstr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;args></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionNot>
            <opt>
             <syntax:CalcOptionHasMeta>
              <name>kiev&#31;stdlib&#31;meta&#31;singleton</name>
             </syntax:CalcOptionHasMeta>
            </opt>
           </syntax:CalcOptionNot>
          </calculator>
          <opt_true>
           <syntax:SyntaxList>
            <element>
             <syntax:SyntaxNode>
              <name></name>
             </syntax:SyntaxNode>
            </element>
            <separator>
             <syntax:SyntaxToken>
              <text>,</text>
             </syntax:SyntaxToken>
            </separator>
            <prefix>
             <syntax:SyntaxToken>
              <text>(</text>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </prefix>
            <sufix>
             <syntax:SyntaxToken>
              <text>)</text>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-left' />
              </fmt>
             </syntax:SyntaxToken>
            </sufix>
            <folded_by_default>false</folded_by_default>
            <name>case_fields</name>
            <expected_types>
             <core:SymbolRef name='Field' />
            </expected_types>
           </syntax:SyntaxList>
          </opt_true>
         </syntax:SyntaxOptional>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-left' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-struct-syntax'>
      <rnode>
       <core:SymbolRef name='KievSyntax' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>syntax</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-extends' />
          </decl>
          <text>extends &lt;type></text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-members' />
          </decl>
          <text>{ members }</text>
         </syntax:SyntaxElemRef>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-struct-view'>
      <rnode>
       <core:SymbolRef name='KievView' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxToken>
          <text>view</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add arguments</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>args</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-type-args' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>&lt;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>></text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
          <expected_types>
           <core:SymbolRef name='TypeRef' />
           <core:SymbolRef name='TypeNameRef' />
           <core:SymbolRef name='TypeExpr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;args></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxToken>
          <text>of</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>view_of</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-extends' />
          </decl>
          <text>extends &lt;type></text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-members' />
          </decl>
          <text>{ members }</text>
         </syntax:SyntaxElemRef>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-struct-annotation'>
      <rnode>
       <core:SymbolRef name='JavaAnnotation' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxToken>
          <text>@interface</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-members' />
          </decl>
          <text>{ members }</text>
         </syntax:SyntaxElemRef>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-struct-interface'>
      <rnode>
       <core:SymbolRef name='JavaInterface' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxToken>
          <text>interface</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add arguments</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>args</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-type-args' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>&lt;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>></text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
          <expected_types>
           <core:SymbolRef name='TypeRef' />
           <core:SymbolRef name='TypeNameRef' />
           <core:SymbolRef name='TypeExpr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;args></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-extends' />
          </decl>
          <text>extends &lt;type></text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-members' />
          </decl>
          <text>{ members }</text>
         </syntax:SyntaxElemRef>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-struct-class'>
      <rnode>
       <core:SymbolRef name='JavaClass' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxToken>
          <text>class</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol-18' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add arguments</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>args</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add super-type</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>super_types</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-type-args' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>&lt;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>></text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
          <expected_types>
           <core:SymbolRef name='TypeConstr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;args></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-extends' />
          </decl>
          <text>extends &lt;type></text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-type-members' />
          </decl>
          <text>{ members }</text>
         </syntax:SyntaxElemRef>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-struct-anonymouse'>
      <rnode>
       <core:SymbolRef name='JavaAnonymouseClass' />
      </rnode>
      <elem>
       <syntax:SyntaxElemRef>
        <decl>
         <core:SymbolRef name='stx-type-members' />
        </decl>
        <text>{ members }</text>
       </syntax:SyntaxElemRef>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-field'>
      <rnode>
       <core:SymbolRef name='Field' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxSubAttr>
          <name>vtype</name>
          <expected_types>
           <core:SymbolRef name='stx-types-TypeRef' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol-16' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add metadata</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>meta.metas</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add initializer</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>init</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionAnd>
            <opts>
             <syntax:CalcOptionNotNull>
              <name>init</name>
             </syntax:CalcOptionNotNull>
             <syntax:CalcOptionNot>
              <opt>
               <syntax:CalcOptionIsHidden>
                <name>init</name>
               </syntax:CalcOptionIsHidden>
              </opt>
             </syntax:CalcOptionNot>
            </opts>
           </syntax:CalcOptionAnd>
          </calculator>
          <opt_true>
           <syntax:SyntaxToken>
            <text>=</text>
            <fmt>
             <core:SymbolRef name='fmt-operator' />
            </fmt>
           </syntax:SyntaxToken>
          </opt_true>
         </syntax:SyntaxOptional>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>init</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
            <empty>
             <syntax:SyntaxSpace />
            </empty>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>5</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-left' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:TextSyntax name='syntax-java-decl-formpars'>
      <members>
       <syntax:SyntaxElemDecl name='stx-decl-var'>
        <rnode>
         <core:SymbolRef name='LVar' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-metas' />
            </decl>
            <text>@metas</text>
           </syntax:SyntaxElemRef>
           <syntax:SyntaxSubAttr>
            <name>vtype</name>
            <expected_types>
             <core:SymbolRef name='stx-types-TypeRef' />
            </expected_types>
           </syntax:SyntaxSubAttr>
           <syntax:SyntaxOptional>
            <calculator>
             <syntax:CalcOptionNotNull>
              <name>stype</name>
             </syntax:CalcOptionNotNull>
            </calculator>
            <opt_true>
             <syntax:SyntaxSet>
              <elements>
               <syntax:SyntaxToken>
                <text>:</text>
                <fmt>
                 <core:SymbolRef name='fmt-separator-eat-all' />
                </fmt>
               </syntax:SyntaxToken>
               <syntax:SyntaxSubAttr>
                <name>stype</name>
                <expected_types>
                 <core:SymbolRef name='stx-types-TypeRef' />
                </expected_types>
               </syntax:SyntaxSubAttr>
              </elements>
              <folded_by_default>false</folded_by_default>
              <nested_function_lookup>false</nested_function_lookup>
             </syntax:SyntaxSet>
            </opt_true>
           </syntax:SyntaxOptional>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
            <fmt>
             <core:SymbolRef name='fmt-symbol' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Edit name</title>
                <act>kiev.gui.TextEditor$Factory</act>
                <attr>sname</attr>
               </syntax:SyntaxFunction>
               <syntax:SyntaxFunction>
                <title>Add metadata</title>
                <act>kiev.gui.FuncNewElemOfEmptyList</act>
                <attr>meta.metas</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxIdentAttr>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
      </members>
     </syntax:TextSyntax>
     <syntax:SyntaxElemDecl name='stx-decl-method'>
      <rnode>
       <core:SymbolRef name='MethodImpl' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-type-args' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>&lt;̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-right' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>>̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>targs</name>
          <expected_types>
           <core:SymbolRef name='TypeConstr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;targs></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxSubAttr>
          <name>type_ret</name>
          <expected_types>
           <core:SymbolRef name='stx-types-TypeRef' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol-14' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add metadata</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>meta.metas</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add type decls</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>targs</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add aliases</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>aliases</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add condition</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>conditions</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add body</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>body</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-java-decl-formpars' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <filter>
           <syntax:CalcOptionNot>
            <opt>
             <syntax:CalcOptionHasMeta>
              <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
             </syntax:CalcOptionHasMeta>
            </opt>
           </syntax:CalcOptionNot>
          </filter>
          <folded_by_default>false</folded_by_default>
          <name>params</name>
          <expected_types>
           <core:SymbolRef name='LVar' />
          </expected_types>
         </syntax:SyntaxList>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-java-alias' />
            </in_syntax>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++1' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>aliases</name>
          <expected_types>
           <core:SymbolRef name='Symbol' />
           <core:SymbolRef name='ASTOperatorAlias' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;aliases></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++1' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>conditions</name>
          <expected_types>
           <core:SymbolRef name='WBCCondition' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;conditions></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <in_syntax>
           <core:SymbolRef name='stx-java-method-body' />
          </in_syntax>
          <expected_types>
           <core:SymbolRef name='Block' />
           <core:SymbolRef name='BlockRewr' />
          </expected_types>
          <empty>
           <syntax:SyntaxToken>
            <text>;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </empty>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-rule-method'>
      <rnode>
       <core:SymbolRef name='RuleMethod' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-type-args' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>&lt;̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-right' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>>̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>targs</name>
          <expected_types>
           <core:SymbolRef name='TypeConstr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;targs></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxToken>
          <text>rule</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol-14' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add metadata</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>meta.metas</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add type decls</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>targs</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add aliases</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>aliases</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add local var</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>localvars</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add condition</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>conditions</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add body</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>body</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-java-decl-formpars' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <filter>
           <syntax:CalcOptionNot>
            <opt>
             <syntax:CalcOptionHasMeta>
              <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
             </syntax:CalcOptionHasMeta>
            </opt>
           </syntax:CalcOptionNot>
          </filter>
          <folded_by_default>false</folded_by_default>
          <name>params</name>
          <expected_types>
           <core:SymbolRef name='LVar' />
          </expected_types>
         </syntax:SyntaxList>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-java-alias' />
            </in_syntax>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++1' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>aliases</name>
          <expected_types>
           <core:SymbolRef name='Symbol' />
           <core:SymbolRef name='ASTOperatorAlias' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;aliases></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <folded_by_default>false</folded_by_default>
          <name>localvars</name>
          <expected_types>
           <core:SymbolRef name='LVar' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;localvars></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++1' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>conditions</name>
          <expected_types>
           <core:SymbolRef name='WBCCondition' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;conditions></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <in_syntax>
           <core:SymbolRef name='stx-java-method-body' />
          </in_syntax>
          <expected_types>
           <core:SymbolRef name='RuleBlock' />
          </expected_types>
          <empty>
           <syntax:SyntaxToken>
            <text>;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </empty>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-constructor'>
      <rnode>
       <core:SymbolRef name='Constructor' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-type-args' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>&lt;̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-right' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>>̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>targs</name>
          <expected_types>
           <core:SymbolRef name='TypeConstr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;targs></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxJavaConstructorName>
          <fmt>
           <core:SymbolRef name='fmt-symbol-14' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Add metadata</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>meta.metas</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add type decls</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>targs</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add condition</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>conditions</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add body</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>body</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxJavaConstructorName>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-java-decl-formpars' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <filter>
           <syntax:CalcOptionNot>
            <opt>
             <syntax:CalcOptionHasMeta>
              <name>kiev&#31;stdlib&#31;meta&#31;synthetic</name>
             </syntax:CalcOptionHasMeta>
            </opt>
           </syntax:CalcOptionNot>
          </filter>
          <folded_by_default>false</folded_by_default>
          <name>params</name>
          <expected_types>
           <core:SymbolRef name='LVar' />
          </expected_types>
         </syntax:SyntaxList>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++1' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>conditions</name>
          <expected_types>
           <core:SymbolRef name='WBCCondition' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;conditions></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <in_syntax>
           <core:SymbolRef name='stx-java-method-body' />
          </in_syntax>
          <expected_types>
           <core:SymbolRef name='Block' />
          </expected_types>
          <empty>
           <syntax:SyntaxToken>
            <text>;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </empty>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:TextSyntax name='stx-java-method-body'>
      <members>
       <syntax:SyntaxElemDecl name='stx-core-expr'>
        <rnode>
         <core:SymbolRef name='CoreExpr' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>continue</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxStrAttr>
            <name>ident</name>
           </syntax:SyntaxStrAttr>
           <syntax:SyntaxToken>
            <text>;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-scalar-value'>
        <rnode>
         <core:SymbolRef name='MetaValueScalar' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>default</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxSubAttr>
            <name>value</name>
           </syntax:SyntaxSubAttr>
           <syntax:SyntaxToken>
            <text>;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-array-value'>
        <rnode>
         <core:SymbolRef name='MetaValueArray' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>default</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxList>
            <element>
             <syntax:SyntaxNode>
              <name></name>
             </syntax:SyntaxNode>
            </element>
            <separator>
             <syntax:SyntaxToken>
              <text>,</text>
              <fmt>
               <core:SymbolRef name='fmt-separator' />
              </fmt>
             </syntax:SyntaxToken>
            </separator>
            <prefix>
             <syntax:SyntaxToken>
              <text>{</text>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </prefix>
            <sufix>
             <syntax:SyntaxToken>
              <text>}</text>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </sufix>
            <folded_by_default>false</folded_by_default>
            <name>values</name>
           </syntax:SyntaxList>
           <syntax:SyntaxToken>
            <text>;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
      </members>
     </syntax:TextSyntax>
     <syntax:TextSyntax name='syntax-java-alias'>
      <members>
       <syntax:SyntaxElemDecl name='stx-decl-alias-name'>
        <rnode>
         <core:SymbolRef name='Symbol' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>alias</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
            <fmt>
             <core:SymbolRef name='fmt-symbol-16' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Edit name</title>
                <act>kiev.gui.TextEditor$Factory</act>
                <attr>sname</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxIdentAttr>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-decl-alias-operator'>
        <rnode>
         <core:SymbolRef name='ASTOperatorAlias' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>alias</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxToken>
            <text>operator</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxStrAttr>
            <name>sname</name>
            <fmt>
             <core:SymbolRef name='fmt-symbol' />
            </fmt>
           </syntax:SyntaxStrAttr>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
      </members>
     </syntax:TextSyntax>
     <syntax:SyntaxElemDecl name='stx-decl-initializer'>
      <rnode>
       <core:SymbolRef name='Initializer' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='Block' />
          </expected_types>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Add metadata</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>meta.metas</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-wbc-condition'>
      <rnode>
       <core:SymbolRef name='WBCCondition' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxEnumChoice>
          <elements>
           <syntax:SyntaxToken>
            <text>error</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxToken>
            <text>require</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxToken>
            <text>ensure</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxToken>
            <text>invariant</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
          </elements>
          <name>cond</name>
         </syntax:SyntaxEnumChoice>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionNotNull>
            <name>sname</name>
           </syntax:CalcOptionNotNull>
          </calculator>
          <opt_true>
           <syntax:SyntaxSet>
            <elements>
             <syntax:SyntaxToken>
              <text>[</text>
              <fmt>
               <core:SymbolRef name='fmt-separator' />
              </fmt>
             </syntax:SyntaxToken>
             <syntax:SyntaxIdentAttr>
              <decl>
               <core:SymbolRef name='ident-template' />
              </decl>
              <name>sname</name>
              <fmt>
               <core:SymbolRef name='fmt-symbol' />
              </fmt>
              <funcs>
               <syntax:SyntaxFunctions>
                <funcs>
                 <syntax:SyntaxFunction>
                  <title>Edit name</title>
                  <act>kiev.gui.TextEditor$Factory</act>
                  <attr>sname</attr>
                 </syntax:SyntaxFunction>
                </funcs>
               </syntax:SyntaxFunctions>
              </funcs>
             </syntax:SyntaxIdentAttr>
             <syntax:SyntaxToken>
              <text>]</text>
              <fmt>
               <core:SymbolRef name='fmt-separator' />
              </fmt>
             </syntax:SyntaxToken>
            </elements>
            <folded_by_default>false</folded_by_default>
            <nested_function_lookup>false</nested_function_lookup>
           </syntax:SyntaxSet>
          </opt_true>
         </syntax:SyntaxOptional>
         <syntax:SyntaxSubAttr>
          <name>body</name>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:PartialSyntaxElemDecl name='stx-metas'>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxNode>
          <name></name>
          <in_syntax>
           <core:SymbolRef name='syntax-java-meta' />
          </in_syntax>
         </syntax:SyntaxNode>
        </element>
        <folded_by_default>false</folded_by_default>
        <name>metas</name>
        <expected_types>
         <core:SymbolRef name='UserMeta' />
         <core:SymbolRef name='MetaAccess' />
         <core:SymbolRef name='MetaUnerasable' />
         <core:SymbolRef name='MetaSingleton' />
         <core:SymbolRef name='MetaForward' />
         <core:SymbolRef name='MetaVirtual' />
         <core:SymbolRef name='MetaMacro' />
         <core:SymbolRef name='MetaStatic' />
         <core:SymbolRef name='MetaAbstract' />
         <core:SymbolRef name='MetaFinal' />
         <core:SymbolRef name='MetaBridge' />
         <core:SymbolRef name='MetaVolatile' />
         <core:SymbolRef name='MetaNative' />
         <core:SymbolRef name='MetaSynchronized' />
         <core:SymbolRef name='MetaTransient' />
        </expected_types>
        <empty>
         <syntax:SyntaxPlaceHolder>
          <text>(@)</text>
          <fmt>
           <core:SymbolRef name='fmt-placeholder' />
          </fmt>
         </syntax:SyntaxPlaceHolder>
        </empty>
       </syntax:SyntaxList>
      </elem>
     </syntax:PartialSyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-meta-set'>
      <rnode>
       <core:SymbolRef name='DNode' />
      </rnode>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxNode>
          <name></name>
          <in_syntax>
           <core:SymbolRef name='syntax-java-meta' />
          </in_syntax>
         </syntax:SyntaxNode>
        </element>
        <folded_by_default>false</folded_by_default>
        <name>metas</name>
        <expected_types>
         <core:SymbolRef name='UserMeta' />
         <core:SymbolRef name='MetaAccess' />
         <core:SymbolRef name='MetaUnerasable' />
         <core:SymbolRef name='MetaSingleton' />
         <core:SymbolRef name='MetaForward' />
         <core:SymbolRef name='MetaVirtual' />
         <core:SymbolRef name='MetaMacro' />
         <core:SymbolRef name='MetaStatic' />
         <core:SymbolRef name='MetaAbstract' />
         <core:SymbolRef name='MetaFinal' />
         <core:SymbolRef name='MetaBridge' />
         <core:SymbolRef name='MetaVolatile' />
         <core:SymbolRef name='MetaNative' />
         <core:SymbolRef name='MetaSynchronized' />
         <core:SymbolRef name='MetaTransient' />
        </expected_types>
        <empty>
         <syntax:SyntaxPlaceHolder>
          <text>(@)</text>
          <fmt>
           <core:SymbolRef name='fmt-placeholder' />
          </fmt>
         </syntax:SyntaxPlaceHolder>
        </empty>
       </syntax:SyntaxList>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:TextSyntax name='syntax-java-meta'>
      <members>
       <syntax:SyntaxElemDecl name='stx-meta-access'>
        <rnode>
         <core:SymbolRef name='MetaAccess' />
        </rnode>
        <elem>
         <syntax:SyntaxJavaAccess>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit access</title>
              <act>kiev.gui.AccessEditor$Factory</act>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxJavaAccess>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-unerasable'>
        <rnode>
         <core:SymbolRef name='MetaUnerasable' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@unerasable</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-singleton'>
        <rnode>
         <core:SymbolRef name='MetaSingleton' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@singleton</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-forward'>
        <rnode>
         <core:SymbolRef name='MetaForward' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@forward</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-virtual'>
        <rnode>
         <core:SymbolRef name='MetaVirtual' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@virtual</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-macro'>
        <rnode>
         <core:SymbolRef name='MetaMacro' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@macro</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-static'>
        <rnode>
         <core:SymbolRef name='MetaStatic' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@static</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-abstract'>
        <rnode>
         <core:SymbolRef name='MetaAbstract' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@abstract</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-final'>
        <rnode>
         <core:SymbolRef name='MetaFinal' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@final</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-native'>
        <rnode>
         <core:SymbolRef name='MetaNative' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@native</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-synchronized'>
        <rnode>
         <core:SymbolRef name='MetaSynchronized' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@synchronized</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-transient'>
        <rnode>
         <core:SymbolRef name='MetaTransient' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@transient</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-volatile'>
        <rnode>
         <core:SymbolRef name='MetaVolatile' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@volatile</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-bridge'>
        <rnode>
         <core:SymbolRef name='MetaBridge' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@bridge</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-varargs'>
        <rnode>
         <core:SymbolRef name='MetaVarArgs' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@varargs</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-synthetic'>
        <rnode>
         <core:SymbolRef name='MetaSynthetic' />
        </rnode>
        <elem>
         <syntax:SyntaxToken>
          <text>@synthetic</text>
          <fmt>
           <core:SymbolRef name='fmt-meta' />
          </fmt>
         </syntax:SyntaxToken>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-throws'>
        <rnode>
         <core:SymbolRef name='MetaThrows' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>@throws</text>
            <fmt>
             <core:SymbolRef name='fmt-meta' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxList>
            <element>
             <syntax:SyntaxNode>
              <name></name>
             </syntax:SyntaxNode>
            </element>
            <separator>
             <syntax:SyntaxToken>
              <text>,</text>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </separator>
            <prefix>
             <syntax:SyntaxToken>
              <text>(</text>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </prefix>
            <sufix>
             <syntax:SyntaxToken>
              <text>)</text>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-left' />
              </fmt>
             </syntax:SyntaxToken>
            </sufix>
            <folded_by_default>false</folded_by_default>
            <name>exceptions</name>
           </syntax:SyntaxList>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-packed'>
        <rnode>
         <core:SymbolRef name='MetaPacked' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>@packed:</text>
            <fmt>
             <core:SymbolRef name='fmt-meta' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxSubAttr>
            <name>size</name>
           </syntax:SyntaxSubAttr>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>fld</name>
           </syntax:SyntaxIdentAttr>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxSubAttr>
            <name>offset</name>
           </syntax:SyntaxSubAttr>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-uuid'>
        <rnode>
         <core:SymbolRef name='MetaUUID' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>@uuid</text>
            <fmt>
             <core:SymbolRef name='fmt-meta' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxToken>
            <text>(</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxStrAttr>
            <name>value</name>
            <fmt>
             <core:SymbolRef name='fmt-symbol' />
            </fmt>
           </syntax:SyntaxStrAttr>
           <syntax:SyntaxToken>
            <text>)</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-user-def'>
        <rnode>
         <core:SymbolRef name='UserMeta' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>@</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-meta-at' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Add parameters</title>
                <act>kiev.gui.FuncNewElemOfEmptyList</act>
                <attr>values</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxToken>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>decl</name>
            <expected_types>
             <core:SymbolRef name='SymbolRef' />
            </expected_types>
            <fmt>
             <core:SymbolRef name='fmt-meta' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Edit name</title>
                <act>kiev.gui.TextEditor$Factory</act>
               </syntax:SyntaxFunction>
               <syntax:SyntaxFunction>
                <title>Add parameters</title>
                <act>kiev.gui.FuncNewElemOfEmptyList</act>
                <attr>values</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxIdentAttr>
           <syntax:SyntaxList>
            <element>
             <syntax:SyntaxNode>
              <name></name>
             </syntax:SyntaxNode>
            </element>
            <separator>
             <syntax:SyntaxToken>
              <text>,</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-left' />
              </fmt>
             </syntax:SyntaxToken>
            </separator>
            <prefix>
             <syntax:SyntaxToken>
              <text>(</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </prefix>
            <sufix>
             <syntax:SyntaxToken>
              <text>)</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-left' />
              </fmt>
             </syntax:SyntaxToken>
            </sufix>
            <elpar>
             <core:SymbolRef name='par-indented' />
            </elpar>
            <folded_by_default>false</folded_by_default>
            <name>values</name>
            <expected_types>
             <core:SymbolRef name='MetaValueScalar' />
             <core:SymbolRef name='MetaValueArray' />
            </expected_types>
            <empty>
             <syntax:SyntaxSpace />
            </empty>
           </syntax:SyntaxList>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
          <fmt>
           <core:SymbolRef name='fmt-meta-end' />
          </fmt>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-meta-set-rare'>
        <rnode>
         <core:SymbolRef name='DNode' />
        </rnode>
        <elem>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-java-meta' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <folded_by_default>false</folded_by_default>
          <name>metas</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Meta' />
          </expected_types>
          <empty>
           <syntax:SyntaxSpace />
          </empty>
         </syntax:SyntaxList>
        </elem>
       </syntax:SyntaxElemDecl>
      </members>
     </syntax:TextSyntax>
     <syntax:SyntaxElemDecl name='stx-meta-scalar-value'>
      <rnode>
       <core:SymbolRef name='MetaValueScalar' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxToken>
          <text>=</text>
          <fmt>
           <core:SymbolRef name='fmt-operator' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>value</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <empty>
           <syntax:SyntaxPlaceHolder>
            <text>&lt;value></text>
            <fmt>
             <core:SymbolRef name='fmt-placeholder-required' />
            </fmt>
           </syntax:SyntaxPlaceHolder>
          </empty>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-meta-array-value'>
      <rnode>
       <core:SymbolRef name='MetaValueArray' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxToken>
          <text>=</text>
          <fmt>
           <core:SymbolRef name='fmt-operator' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>{</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>}</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>values</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-ref'>
      <rnode>
       <core:SymbolRef name='TypeRef' />
      </rnode>
      <elem>
       <syntax:SyntaxIdentAttr>
        <decl>
         <core:SymbolRef name='ident-template' />
        </decl>
        <name>ident</name>
        <fmt>
         <core:SymbolRef name='fmt-type' />
        </fmt>
       </syntax:SyntaxIdentAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-name-ref'>
      <rnode>
       <core:SymbolRef name='TypeNameRef' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-type' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>ident</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add type argument</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>args</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-name-ref'>
      <rnode>
       <core:SymbolRef name='TypeNameArgsRef' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-type' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>ident</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add type argument</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>args</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>&lt;̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>>̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
          <expected_types>
           <core:SymbolRef name='TypeRef' />
           <core:SymbolRef name='TypeNameRef' />
           <core:SymbolRef name='TypeExpr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;nothing></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-name-ref'>
      <rnode>
       <core:SymbolRef name='TypeInnerNameRef' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>outer</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>.</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-type' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>ident</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add type argument</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>args</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>&lt;̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>>̵</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
          <expected_types>
           <core:SymbolRef name='TypeRef' />
           <core:SymbolRef name='TypeNameRef' />
           <core:SymbolRef name='TypeExpr' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;nothing></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-closure-ref'>
      <rnode>
       <core:SymbolRef name='TypeClosureRef' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)-></text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
         </syntax:SyntaxList>
         <syntax:SyntaxSubAttr>
          <name>ret</name>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-expr'>
      <rnode>
       <core:SymbolRef name='TypeExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>arg</name>
          <expected_types>
           <core:SymbolRef name='stx-types-TypeRef' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='type-expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-type-decl-ref'>
      <rnode>
       <core:SymbolRef name='TypeDeclRef' />
      </rnode>
      <elem>
       <syntax:SyntaxSpace />
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-block'>
      <rnode>
       <core:SymbolRef name='Block' />
      </rnode>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxNode>
          <name></name>
          <fmt>
           <core:SymbolRef name='fmt-space-nl++' />
          </fmt>
         </syntax:SyntaxNode>
        </element>
        <prefix>
         <syntax:SyntaxToken>
          <text>{</text>
          <fmt>
           <core:SymbolRef name='fmt-code-block-start' />
          </fmt>
         </syntax:SyntaxToken>
        </prefix>
        <sufix>
         <syntax:SyntaxToken>
          <text>}</text>
          <fmt>
           <core:SymbolRef name='fmt-code-block-end' />
          </fmt>
         </syntax:SyntaxToken>
        </sufix>
        <elpar>
         <core:SymbolRef name='par-indented' />
        </elpar>
        <folded_by_default>false</folded_by_default>
        <name>stats</name>
        <expected_types>
         <core:SymbolRef name='stx-types-Stat' />
         <core:SymbolRef name='stx-types-Expr' />
         <core:SymbolRef name='stx-types-Macro' />
         <core:SymbolRef name='stx-types-Decl' />
        </expected_types>
        <empty>
         <syntax:SyntaxToken>
          <text>{}</text>
          <fmt>
           <core:SymbolRef name='fmt-code-block-start' />
          </fmt>
         </syntax:SyntaxToken>
        </empty>
       </syntax:SyntaxList>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rwr-block'>
      <rnode>
       <core:SymbolRef name='BlockRewr' />
      </rnode>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxNode>
          <name></name>
          <fmt>
           <core:SymbolRef name='fmt-space-nl++' />
          </fmt>
         </syntax:SyntaxNode>
        </element>
        <prefix>
         <syntax:SyntaxToken>
          <text>#{</text>
          <fmt>
           <core:SymbolRef name='fmt-code-block-start' />
          </fmt>
         </syntax:SyntaxToken>
        </prefix>
        <sufix>
         <syntax:SyntaxToken>
          <text>}</text>
          <fmt>
           <core:SymbolRef name='fmt-code-block-end' />
          </fmt>
         </syntax:SyntaxToken>
        </sufix>
        <elpar>
         <core:SymbolRef name='par-indented' />
        </elpar>
        <folded_by_default>false</folded_by_default>
        <name>stats</name>
        <expected_types>
         <core:SymbolRef name='stx-types-Stat' />
         <core:SymbolRef name='stx-types-Expr' />
         <core:SymbolRef name='stx-types-Macro' />
         <core:SymbolRef name='stx-types-Decl' />
        </expected_types>
        <empty>
         <syntax:SyntaxToken>
          <text>#{}</text>
          <fmt>
           <core:SymbolRef name='fmt-code-block-start' />
          </fmt>
         </syntax:SyntaxToken>
        </empty>
       </syntax:SyntaxList>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rwr-match'>
      <rnode>
       <core:SymbolRef name='RewriteMatch' />
      </rnode>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxNode>
          <name></name>
          <par>
           <core:SymbolRef name='par-indented' />
          </par>
         </syntax:SyntaxNode>
        </element>
        <prefix>
         <syntax:SyntaxToken>
          <text>{</text>
          <fmt>
           <core:SymbolRef name='fmt-code-block-start' />
          </fmt>
         </syntax:SyntaxToken>
        </prefix>
        <sufix>
         <syntax:SyntaxToken>
          <text>}</text>
          <fmt>
           <core:SymbolRef name='fmt-code-block-end' />
          </fmt>
         </syntax:SyntaxToken>
        </sufix>
        <folded_by_default>false</folded_by_default>
        <name>cases</name>
       </syntax:SyntaxList>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rule-block'>
      <rnode>
       <core:SymbolRef name='RuleBlock' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>{</text>
          <fmt>
           <core:SymbolRef name='fmt-code-block-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>rnode</name>
          <par>
           <core:SymbolRef name='par-indented' />
          </par>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>}</text>
          <fmt>
           <core:SymbolRef name='fmt-code-block-end' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rule-expr-or'>
      <rnode>
       <core:SymbolRef name='RuleOrExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>{</text>
          <fmt>
           <core:SymbolRef name='fmt-rule-block-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <par>
             <core:SymbolRef name='par-indented' />
            </par>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>;</text>
            <fmt>
             <core:SymbolRef name='fmt-rule-or' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>rules</name>
          <empty>
           <syntax:SyntaxToken>
            <text>&lt;?rules?></text>
           </syntax:SyntaxToken>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxToken>
          <text>}</text>
          <fmt>
           <core:SymbolRef name='fmt-rule-block-end' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rule-expr-and'>
      <rnode>
       <core:SymbolRef name='RuleAndExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-rule-and' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <folded_by_default>false</folded_by_default>
          <name>rules</name>
          <empty>
           <syntax:SyntaxToken>
            <text>&lt;?rules?></text>
           </syntax:SyntaxToken>
          </empty>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rule-is-one-of'>
      <rnode>
       <core:SymbolRef name='RuleIsoneofExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>var</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rule-is-the'>
      <rnode>
       <core:SymbolRef name='RuleIstheExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>var</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rule-cut'>
      <rnode>
       <core:SymbolRef name='RuleCutExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxToken>
        <text>$cut</text>
        <fmt>
         <core:SymbolRef name='fmt-keyword' />
        </fmt>
       </syntax:SyntaxToken>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rule-call-expr'>
      <rnode>
       <core:SymbolRef name='RuleCallExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>obj</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>5</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
         <syntax:SyntaxToken>
          <text>.</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rule-expr-while'>
      <rnode>
       <core:SymbolRef name='RuleWhileExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>while</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>expr</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>1</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionNotNull>
            <name>bt_expr</name>
           </syntax:CalcOptionNotNull>
          </calculator>
          <opt_true>
           <syntax:SyntaxSet>
            <elements>
             <syntax:SyntaxToken>
              <text>:</text>
              <fmt>
               <core:SymbolRef name='fmt-separator' />
              </fmt>
             </syntax:SyntaxToken>
             <syntax:SyntaxAutoParenth>
              <attr>
               <syntax:SyntaxSubAttr>
                <name>bt_expr</name>
                <expected_types>
                 <core:SymbolRef name='stx-types-Expr' />
                </expected_types>
               </syntax:SyntaxSubAttr>
              </attr>
              <priority>1</priority>
              <template>
               <core:SymbolRef name='expr-template' />
              </template>
             </syntax:SyntaxAutoParenth>
            </elements>
            <folded_by_default>false</folded_by_default>
            <nested_function_lookup>false</nested_function_lookup>
           </syntax:SyntaxSet>
          </opt_true>
         </syntax:SyntaxOptional>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rule-expr'>
      <rnode>
       <core:SymbolRef name='RuleExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>expr</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>1</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionNotNull>
            <name>bt_expr</name>
           </syntax:CalcOptionNotNull>
          </calculator>
          <opt_true>
           <syntax:SyntaxSet>
            <elements>
             <syntax:SyntaxToken>
              <text>:</text>
              <fmt>
               <core:SymbolRef name='fmt-separator' />
              </fmt>
             </syntax:SyntaxToken>
             <syntax:SyntaxAutoParenth>
              <attr>
               <syntax:SyntaxSubAttr>
                <name>bt_expr</name>
                <expected_types>
                 <core:SymbolRef name='stx-types-Expr' />
                </expected_types>
               </syntax:SyntaxSubAttr>
              </attr>
              <priority>1</priority>
              <template>
               <core:SymbolRef name='expr-template' />
              </template>
             </syntax:SyntaxAutoParenth>
            </elements>
            <folded_by_default>false</folded_by_default>
            <nested_function_lookup>false</nested_function_lookup>
           </syntax:SyntaxSet>
          </opt_true>
         </syntax:SyntaxOptional>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-ident'>
      <rnode>
       <core:SymbolRef name='EToken' />
      </rnode>
      <elem>
       <syntax:SyntaxIdentAttr>
        <decl>
         <core:SymbolRef name='ident-template' />
        </decl>
        <name>ident</name>
        <fmt>
         <core:SymbolRef name='fmt-symref' />
        </fmt>
       </syntax:SyntaxIdentAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-this'>
      <rnode>
       <core:SymbolRef name='ThisExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxToken>
        <text>this</text>
        <kind>KEYWORD</kind>
        <fmt>
         <core:SymbolRef name='fmt-keyword' />
        </fmt>
       </syntax:SyntaxToken>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-super'>
      <rnode>
       <core:SymbolRef name='SuperExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxToken>
        <text>super</text>
        <kind>KEYWORD</kind>
        <fmt>
         <core:SymbolRef name='fmt-keyword' />
        </fmt>
       </syntax:SyntaxToken>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-this-outer'>
      <rnode>
       <core:SymbolRef name='OuterThisAccessExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>outer</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>.</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>this</text>
          <kind>KEYWORD</kind>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-access'>
      <rnode>
       <core:SymbolRef name='AccessExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>obj</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
             <core:SymbolRef name='stx-types-TypeRef' />
            </expected_types>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>240</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
         <syntax:SyntaxToken>
          <text>.</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-symref' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>ident</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-ifld'>
      <rnode>
       <core:SymbolRef name='IFldExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxJavaAccessExpr>
        <obj_elem>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>obj</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>240</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
        </obj_elem>
        <separator>
         <syntax:SyntaxToken>
          <text>.</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </separator>
        <fld_elem>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-symref' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>ident</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
        </fld_elem>
       </syntax:SyntaxJavaAccessExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-sfld'>
      <rnode>
       <core:SymbolRef name='SFldExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxJavaAccessExpr>
        <obj_elem>
         <syntax:SyntaxSubAttr>
          <name>obj</name>
          <expected_types>
           <core:SymbolRef name='stx-types-TypeRef' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </obj_elem>
        <separator>
         <syntax:SyntaxToken>
          <text>.</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </separator>
        <fld_elem>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-symref' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>ident</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
        </fld_elem>
       </syntax:SyntaxJavaAccessExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-lvar'>
      <rnode>
       <core:SymbolRef name='LVarExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxIdentAttr>
        <decl>
         <core:SymbolRef name='ident-template' />
        </decl>
        <name>ident</name>
        <fmt>
         <core:SymbolRef name='fmt-symref' />
        </fmt>
        <funcs>
         <syntax:SyntaxFunctions>
          <funcs>
           <syntax:SyntaxFunction>
            <title>Edit name</title>
            <act>kiev.gui.TextEditor$Factory</act>
            <attr>ident</attr>
           </syntax:SyntaxFunction>
          </funcs>
         </syntax:SyntaxFunctions>
        </funcs>
       </syntax:SyntaxIdentAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-container'>
      <rnode>
       <core:SymbolRef name='ContainerAccessExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>obj</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>230</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
         <syntax:SyntaxToken>
          <text>[</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>index</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>]</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-class'>
      <rnode>
       <core:SymbolRef name='TypeClassExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>ttype</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>.</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>class</text>
          <kind>KEYWORD</kind>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-typeinfo'>
      <rnode>
       <core:SymbolRef name='TypeInfoExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>ttype</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>.</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>type</text>
          <kind>KEYWORD</kind>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-call'>
      <rnode>
       <core:SymbolRef name='CallExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxJavaAccessExpr>
        <obj_elem>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>obj</name>
            <expected_types>
             <core:SymbolRef name='stx-types-TypeRef' />
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>240</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
        </obj_elem>
        <separator>
         <syntax:SyntaxToken>
          <text>.</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </separator>
        <fld_elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>ident</name>
            <fmt>
             <core:SymbolRef name='fmt-symref' />
            </fmt>
           </syntax:SyntaxIdentAttr>
           <syntax:SyntaxList>
            <element>
             <syntax:SyntaxNode>
              <name></name>
             </syntax:SyntaxNode>
            </element>
            <separator>
             <syntax:SyntaxToken>
              <text>,</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-left' />
              </fmt>
             </syntax:SyntaxToken>
            </separator>
            <prefix>
             <syntax:SyntaxToken>
              <text>(</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </prefix>
            <sufix>
             <syntax:SyntaxToken>
              <text>)</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-left' />
              </fmt>
             </syntax:SyntaxToken>
            </sufix>
            <folded_by_default>false</folded_by_default>
            <name>args</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
           </syntax:SyntaxList>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </fld_elem>
       </syntax:SyntaxJavaAccessExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-call-ctor'>
      <rnode>
       <core:SymbolRef name='CtorCallExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>obj</name>
          <expected_types>
           <core:SymbolRef name='ThisExpr' />
           <core:SymbolRef name='SuperExpr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-call-closure'>
      <rnode>
       <core:SymbolRef name='ClosureCallExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>expr</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>240</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-concat'>
      <rnode>
       <core:SymbolRef name='StringConcatExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </attr>
          <priority>100</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
        </element>
        <separator>
         <syntax:SyntaxToken>
          <text>+</text>
          <kind>OPERATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-operator' />
          </fmt>
         </syntax:SyntaxToken>
        </separator>
        <folded_by_default>false</folded_by_default>
        <name>args</name>
        <empty>
         <syntax:SyntaxToken>
          <text>&lt;?strings?></text>
         </syntax:SyntaxToken>
        </empty>
       </syntax:SyntaxList>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-comma'>
      <rnode>
       <core:SymbolRef name='CommaExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </attr>
          <priority>1</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
        </element>
        <separator>
         <syntax:SyntaxToken>
          <text>,</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
        </separator>
        <folded_by_default>false</folded_by_default>
        <name>exprs</name>
        <empty>
         <syntax:SyntaxToken>
          <text>&lt;?exprs?></text>
         </syntax:SyntaxToken>
        </empty>
       </syntax:SyntaxList>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-new'>
      <rnode>
       <core:SymbolRef name='NewExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxJavaAccessExpr>
        <obj_elem>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>outer</name>
            <empty>
             <syntax:SyntaxSpace />
            </empty>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>240</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
        </obj_elem>
        <separator>
         <syntax:SyntaxToken>
          <text>.</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </separator>
        <fld_elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxToken>
            <text>new</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
           <syntax:SyntaxSubAttr>
            <name>ntype</name>
            <expected_types>
             <core:SymbolRef name='stx-types-TypeRef' />
            </expected_types>
           </syntax:SyntaxSubAttr>
           <syntax:SyntaxList>
            <element>
             <syntax:SyntaxNode>
              <name></name>
             </syntax:SyntaxNode>
            </element>
            <separator>
             <syntax:SyntaxToken>
              <text>,</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator' />
              </fmt>
             </syntax:SyntaxToken>
            </separator>
            <prefix>
             <syntax:SyntaxToken>
              <text>(</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </prefix>
            <sufix>
             <syntax:SyntaxToken>
              <text>)</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-left' />
              </fmt>
             </syntax:SyntaxToken>
            </sufix>
            <folded_by_default>false</folded_by_default>
            <name>args</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
            <empty>
             <syntax:SyntaxToken>
              <text> ()</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-left' />
              </fmt>
             </syntax:SyntaxToken>
            </empty>
           </syntax:SyntaxList>
           <syntax:SyntaxSubAttr>
            <name>clazz</name>
            <empty>
             <syntax:SyntaxSpace />
            </empty>
           </syntax:SyntaxSubAttr>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </fld_elem>
       </syntax:SyntaxJavaAccessExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-new-enum'>
      <rnode>
       <core:SymbolRef name='NewEnumExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <separator>
         <syntax:SyntaxToken>
          <text>,</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
        </separator>
        <prefix>
         <syntax:SyntaxToken>
          <text>(</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </prefix>
        <sufix>
         <syntax:SyntaxToken>
          <text>)</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </sufix>
        <folded_by_default>false</folded_by_default>
        <name>args</name>
        <expected_types>
         <core:SymbolRef name='stx-types-Expr' />
        </expected_types>
       </syntax:SyntaxList>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-new-array'>
      <rnode>
       <core:SymbolRef name='NewArrayExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>new</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>ntype</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxSet>
            <elements>
             <syntax:SyntaxToken>
              <text>[</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
             <syntax:SyntaxNode>
              <name></name>
             </syntax:SyntaxNode>
             <syntax:SyntaxToken>
              <text>]</text>
              <kind>SEPARATOR</kind>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </elements>
            <folded_by_default>false</folded_by_default>
            <nested_function_lookup>false</nested_function_lookup>
           </syntax:SyntaxSet>
          </element>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
          <empty>
           <syntax:SyntaxToken>
            <text>[]</text>
            <kind>OPERATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </empty>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-new-array-init'>
      <rnode>
       <core:SymbolRef name='NewInitializedArrayExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>new</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>ntype</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>{</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>}</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
          <empty>
           <syntax:SyntaxToken>
            <text>{}</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </empty>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-new-closure'>
      <rnode>
       <core:SymbolRef name='NewClosure' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>fun</text>
          <kind>KEYWORD</kind>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-java-decl-formpars' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>params</name>
         </syntax:SyntaxList>
         <syntax:SyntaxToken>
          <text>-></text>
          <kind>OPERATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>type_ret</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>body</name>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-incr'>
      <rnode>
       <core:SymbolRef name='IncrementExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>lval</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-unary'>
      <rnode>
       <core:SymbolRef name='UnaryExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-binary'>
      <rnode>
       <core:SymbolRef name='BinaryExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>expr1</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr2</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-assign'>
      <rnode>
       <core:SymbolRef name='AssignExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>lval</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>value</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-bool-not'>
      <rnode>
       <core:SymbolRef name='BooleanNotExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-bool-binary'>
      <rnode>
       <core:SymbolRef name='BinaryBoolExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>expr1</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr2</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-macro-bool-binary'>
      <rnode>
       <core:SymbolRef name='MacroBinaryBoolExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>expr1</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr2</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-bool-and'>
      <rnode>
       <core:SymbolRef name='BinaryBooleanAndExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>expr1</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr2</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-bool-or'>
      <rnode>
       <core:SymbolRef name='BinaryBooleanOrExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>expr1</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr2</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-instanceof'>
      <rnode>
       <core:SymbolRef name='InstanceofExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>itype</name>
          <expected_types>
           <core:SymbolRef name='stx-types-TypeRef' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-cast'>
      <rnode>
       <core:SymbolRef name='CastExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>ctype</name>
          <expected_types>
           <core:SymbolRef name='stx-types-TypeRef' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-reinterp'>
      <rnode>
       <core:SymbolRef name='ReinterpExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>ctype</name>
          <expected_types>
           <core:SymbolRef name='stx-types-TypeRef' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-conditional'>
      <rnode>
       <core:SymbolRef name='ConditionalExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxExpr>
        <attrs>
         <syntax:SyntaxSubAttr>
          <name>cond</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr1</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>expr2</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </attrs>
        <template>
         <core:SymbolRef name='expr-template' />
        </template>
       </syntax:SyntaxExpr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-label'>
      <rnode>
       <core:SymbolRef name='Label' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add metadata</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>meta.metas</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxToken>
          <text>:</text>
          <fmt>
           <core:SymbolRef name='fmt-label-semicolon' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-case-label'>
      <rnode>
       <core:SymbolRef name='CaseLabel' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxOptional>
            <calculator>
             <syntax:CalcOptionNotNull>
              <name>val</name>
             </syntax:CalcOptionNotNull>
            </calculator>
            <opt_true>
             <syntax:SyntaxToken>
              <text>case</text>
              <fmt>
               <core:SymbolRef name='fmt-keyword' />
              </fmt>
              <funcs>
               <syntax:SyntaxFunctions>
                <funcs>
                 <syntax:SyntaxFunction>
                  <title>Add pattern variable</title>
                  <act>kiev.gui.FuncNewElemOfEmptyList</act>
                  <attr>pattern</attr>
                 </syntax:SyntaxFunction>
                </funcs>
               </syntax:SyntaxFunctions>
              </funcs>
             </syntax:SyntaxToken>
            </opt_true>
            <opt_false>
             <syntax:SyntaxToken>
              <text>default</text>
              <fmt>
               <core:SymbolRef name='fmt-keyword' />
              </fmt>
              <funcs>
               <syntax:SyntaxFunctions>
                <funcs>
                 <syntax:SyntaxFunction>
                  <title>Set case value</title>
                  <act>kiev.gui.FuncNewElemOfNull</act>
                  <attr>val</attr>
                 </syntax:SyntaxFunction>
                </funcs>
               </syntax:SyntaxFunctions>
              </funcs>
             </syntax:SyntaxToken>
            </opt_false>
           </syntax:SyntaxOptional>
           <syntax:SyntaxSubAttr>
            <name>val</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
            <empty>
             <syntax:SyntaxSpace />
            </empty>
           </syntax:SyntaxSubAttr>
           <syntax:SyntaxList>
            <element>
             <syntax:SyntaxNode>
              <name></name>
              <in_syntax>
               <core:SymbolRef name='syntax-java-decl-simple' />
              </in_syntax>
             </syntax:SyntaxNode>
            </element>
            <separator>
             <syntax:SyntaxToken>
              <text>,</text>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-left' />
              </fmt>
             </syntax:SyntaxToken>
            </separator>
            <prefix>
             <syntax:SyntaxToken>
              <text>(</text>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </prefix>
            <sufix>
             <syntax:SyntaxToken>
              <text>)</text>
              <fmt>
               <core:SymbolRef name='fmt-separator-eat-all' />
              </fmt>
             </syntax:SyntaxToken>
            </sufix>
            <folded_by_default>false</folded_by_default>
            <name>pattern</name>
            <expected_types>
             <core:SymbolRef name='LVar' />
            </expected_types>
            <empty>
             <syntax:SyntaxElemRef>
              <decl>
               <core:SymbolRef name='stx-nothing' />
              </decl>
              <text>&lt;pattern></text>
             </syntax:SyntaxElemRef>
            </empty>
           </syntax:SyntaxList>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
          <par>
           <core:SymbolRef name='par-unindented' />
          </par>
         </syntax:SyntaxSet>
         <syntax:SyntaxToken>
          <text>:</text>
          <fmt>
           <core:SymbolRef name='fmt-label-semicolon' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-catch'>
      <rnode>
       <core:SymbolRef name='CatchInfo' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>catch</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>arg</name>
          <in_syntax>
           <core:SymbolRef name='syntax-java-decl-simple' />
          </in_syntax>
          <expected_types>
           <core:SymbolRef name='LVar' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='Block' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-finally'>
      <rnode>
       <core:SymbolRef name='FinallyInfo' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>finally</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='Block' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-shadow'>
      <rnode>
       <core:SymbolRef name='Shadow' />
      </rnode>
      <elem>
       <syntax:SyntaxSubAttr>
        <name>rnode</name>
       </syntax:SyntaxSubAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-assert-enabled'>
      <rnode>
       <core:SymbolRef name='AssertEnabledExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxToken>
        <text>$assertionsEnabled</text>
        <fmt>
         <core:SymbolRef name='fmt-keyword' />
        </fmt>
       </syntax:SyntaxToken>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-expr-nop'>
      <rnode>
       <core:SymbolRef name='NopExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSpace />
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-comment'>
      <rnode>
       <core:SymbolRef name='Comment' />
      </rnode>
      <elem>
       <syntax:SyntaxJavaComment>
        <template>
         <core:SymbolRef name='java-comment-template' />
        </template>
       </syntax:SyntaxJavaComment>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-decl-var'>
      <rnode>
       <core:SymbolRef name='LVar' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxSubAttr>
          <name>vtype</name>
          <expected_types>
           <core:SymbolRef name='stx-types-TypeRef' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Edit name</title>
              <act>kiev.gui.TextEditor$Factory</act>
              <attr>sname</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add metadata</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>meta.metas</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add initializer</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>init</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionNotNull>
            <name>init</name>
           </syntax:CalcOptionNotNull>
          </calculator>
          <opt_true>
           <syntax:SyntaxToken>
            <text>=</text>
            <fmt>
             <core:SymbolRef name='fmt-operator' />
            </fmt>
           </syntax:SyntaxToken>
          </opt_true>
         </syntax:SyntaxOptional>
         <syntax:SyntaxAutoParenth>
          <attr>
           <syntax:SyntaxSubAttr>
            <name>init</name>
            <expected_types>
             <core:SymbolRef name='stx-types-Expr' />
            </expected_types>
            <empty>
             <syntax:SyntaxSpace />
            </empty>
           </syntax:SyntaxSubAttr>
          </attr>
          <priority>5</priority>
          <template>
           <core:SymbolRef name='expr-template' />
          </template>
         </syntax:SyntaxAutoParenth>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:TextSyntax name='syntax-java-decl-simple'>
      <members>
       <syntax:SyntaxElemDecl name='stx-decl-var'>
        <rnode>
         <core:SymbolRef name='LVar' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-metas' />
            </decl>
            <text>@metas</text>
           </syntax:SyntaxElemRef>
           <syntax:SyntaxSubAttr>
            <name>vtype</name>
            <expected_types>
             <core:SymbolRef name='stx-types-TypeRef' />
            </expected_types>
           </syntax:SyntaxSubAttr>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
            <fmt>
             <core:SymbolRef name='fmt-symbol' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Edit name</title>
                <act>kiev.gui.TextEditor$Factory</act>
                <attr>sname</attr>
               </syntax:SyntaxFunction>
               <syntax:SyntaxFunction>
                <title>Add metadata</title>
                <act>kiev.gui.FuncNewElemOfEmptyList</act>
                <attr>meta.metas</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxIdentAttr>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
      </members>
     </syntax:TextSyntax>
     <syntax:TextSyntax name='syntax-java-decl-group'>
      <members>
       <syntax:SyntaxElemDecl name='stx-decl-var'>
        <rnode>
         <core:SymbolRef name='LVar' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-metas' />
            </decl>
            <text>@metas</text>
           </syntax:SyntaxElemRef>
           <syntax:SyntaxSubAttr>
            <name>vtype</name>
            <expected_types>
             <core:SymbolRef name='stx-types-TypeRef' />
            </expected_types>
           </syntax:SyntaxSubAttr>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
            <fmt>
             <core:SymbolRef name='fmt-symbol' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Edit name</title>
                <act>kiev.gui.TextEditor$Factory</act>
                <attr>sname</attr>
               </syntax:SyntaxFunction>
               <syntax:SyntaxFunction>
                <title>Add metadata</title>
                <act>kiev.gui.FuncNewElemOfEmptyList</act>
                <attr>meta.metas</attr>
               </syntax:SyntaxFunction>
               <syntax:SyntaxFunction>
                <title>Add initializer</title>
                <act>kiev.gui.FuncNewElemOfNull</act>
                <attr>init</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxIdentAttr>
           <syntax:SyntaxOptional>
            <calculator>
             <syntax:CalcOptionNotNull>
              <name>init</name>
             </syntax:CalcOptionNotNull>
            </calculator>
            <opt_true>
             <syntax:SyntaxToken>
              <text>=</text>
              <fmt>
               <core:SymbolRef name='fmt-operator' />
              </fmt>
             </syntax:SyntaxToken>
            </opt_true>
           </syntax:SyntaxOptional>
           <syntax:SyntaxAutoParenth>
            <attr>
             <syntax:SyntaxSubAttr>
              <name>init</name>
              <expected_types>
               <core:SymbolRef name='stx-types-Expr' />
              </expected_types>
              <empty>
               <syntax:SyntaxSpace />
              </empty>
             </syntax:SyntaxSubAttr>
            </attr>
            <priority>5</priority>
            <template>
             <core:SymbolRef name='expr-template' />
            </template>
           </syntax:SyntaxAutoParenth>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:SyntaxElemDecl name='stx-decl-field'>
        <rnode>
         <core:SymbolRef name='Field' />
        </rnode>
        <elem>
         <syntax:SyntaxSet>
          <elements>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-metas' />
            </decl>
            <text>@metas</text>
           </syntax:SyntaxElemRef>
           <syntax:SyntaxSubAttr>
            <name>vtype</name>
            <expected_types>
             <core:SymbolRef name='stx-types-TypeRef' />
            </expected_types>
           </syntax:SyntaxSubAttr>
           <syntax:SyntaxIdentAttr>
            <decl>
             <core:SymbolRef name='ident-template' />
            </decl>
            <name>sname</name>
            <fmt>
             <core:SymbolRef name='fmt-symbol' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Edit name</title>
                <act>kiev.gui.TextEditor$Factory</act>
                <attr>sname</attr>
               </syntax:SyntaxFunction>
               <syntax:SyntaxFunction>
                <title>Add metadata</title>
                <act>kiev.gui.FuncNewElemOfEmptyList</act>
                <attr>meta.metas</attr>
               </syntax:SyntaxFunction>
               <syntax:SyntaxFunction>
                <title>Add initializer</title>
                <act>kiev.gui.FuncNewElemOfNull</act>
                <attr>init</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxIdentAttr>
           <syntax:SyntaxOptional>
            <calculator>
             <syntax:CalcOptionNotNull>
              <name>init</name>
             </syntax:CalcOptionNotNull>
            </calculator>
            <opt_true>
             <syntax:SyntaxToken>
              <text>=</text>
              <fmt>
               <core:SymbolRef name='fmt-operator' />
              </fmt>
             </syntax:SyntaxToken>
            </opt_true>
           </syntax:SyntaxOptional>
           <syntax:SyntaxAutoParenth>
            <attr>
             <syntax:SyntaxSubAttr>
              <name>init</name>
              <expected_types>
               <core:SymbolRef name='stx-types-Expr' />
              </expected_types>
              <empty>
               <syntax:SyntaxSpace />
              </empty>
             </syntax:SyntaxSubAttr>
            </attr>
            <priority>5</priority>
            <template>
             <core:SymbolRef name='expr-template' />
            </template>
           </syntax:SyntaxAutoParenth>
          </elements>
          <folded_by_default>false</folded_by_default>
          <nested_function_lookup>false</nested_function_lookup>
         </syntax:SyntaxSet>
        </elem>
       </syntax:SyntaxElemDecl>
       <syntax:TextSyntax name='syntax-java-decl-group-vars'>
        <members>
         <syntax:SyntaxElemDecl name='stx-decl-var'>
          <rnode>
           <core:SymbolRef name='LVar' />
          </rnode>
          <elem>
           <syntax:SyntaxSet>
            <elements>
             <syntax:SyntaxElemRef>
              <decl>
               <core:SymbolRef name='stx-metas' />
              </decl>
              <text>@metas</text>
             </syntax:SyntaxElemRef>
             <syntax:SyntaxIdentAttr>
              <decl>
               <core:SymbolRef name='ident-template' />
              </decl>
              <name>sname</name>
              <fmt>
               <core:SymbolRef name='fmt-symbol' />
              </fmt>
              <funcs>
               <syntax:SyntaxFunctions>
                <funcs>
                 <syntax:SyntaxFunction>
                  <title>Edit name</title>
                  <act>kiev.gui.TextEditor$Factory</act>
                  <attr>sname</attr>
                 </syntax:SyntaxFunction>
                 <syntax:SyntaxFunction>
                  <title>Add metadata</title>
                  <act>kiev.gui.FuncNewElemOfEmptyList</act>
                  <attr>meta.metas</attr>
                 </syntax:SyntaxFunction>
                 <syntax:SyntaxFunction>
                  <title>Add initializer</title>
                  <act>kiev.gui.FuncNewElemOfNull</act>
                  <attr>init</attr>
                 </syntax:SyntaxFunction>
                </funcs>
               </syntax:SyntaxFunctions>
              </funcs>
             </syntax:SyntaxIdentAttr>
             <syntax:SyntaxSubAttr>
              <name>vtype</name>
              <expected_types>
               <core:SymbolRef name='TypeDeclRef' />
               <core:SymbolRef name='TypeExpr' />
              </expected_types>
             </syntax:SyntaxSubAttr>
             <syntax:SyntaxOptional>
              <calculator>
               <syntax:CalcOptionNotNull>
                <name>init</name>
               </syntax:CalcOptionNotNull>
              </calculator>
              <opt_true>
               <syntax:SyntaxToken>
                <text>=</text>
                <fmt>
                 <core:SymbolRef name='fmt-operator' />
                </fmt>
               </syntax:SyntaxToken>
              </opt_true>
             </syntax:SyntaxOptional>
             <syntax:SyntaxAutoParenth>
              <attr>
               <syntax:SyntaxSubAttr>
                <name>init</name>
                <expected_types>
                 <core:SymbolRef name='stx-types-Expr' />
                </expected_types>
                <empty>
                 <syntax:SyntaxSpace />
                </empty>
               </syntax:SyntaxSubAttr>
              </attr>
              <priority>5</priority>
              <template>
               <core:SymbolRef name='expr-template' />
              </template>
             </syntax:SyntaxAutoParenth>
            </elements>
            <folded_by_default>false</folded_by_default>
            <nested_function_lookup>false</nested_function_lookup>
           </syntax:SyntaxSet>
          </elem>
         </syntax:SyntaxElemDecl>
         <syntax:SyntaxElemDecl name='stx-decl-field'>
          <rnode>
           <core:SymbolRef name='Field' />
          </rnode>
          <elem>
           <syntax:SyntaxSet>
            <elements>
             <syntax:SyntaxElemRef>
              <decl>
               <core:SymbolRef name='stx-metas' />
              </decl>
              <text>@metas</text>
             </syntax:SyntaxElemRef>
             <syntax:SyntaxIdentAttr>
              <decl>
               <core:SymbolRef name='ident-template' />
              </decl>
              <name>sname</name>
              <fmt>
               <core:SymbolRef name='fmt-symbol' />
              </fmt>
              <funcs>
               <syntax:SyntaxFunctions>
                <funcs>
                 <syntax:SyntaxFunction>
                  <title>Edit name</title>
                  <act>kiev.gui.TextEditor$Factory</act>
                  <attr>sname</attr>
                 </syntax:SyntaxFunction>
                 <syntax:SyntaxFunction>
                  <title>Add metadata</title>
                  <act>kiev.gui.FuncNewElemOfEmptyList</act>
                  <attr>meta.metas</attr>
                 </syntax:SyntaxFunction>
                 <syntax:SyntaxFunction>
                  <title>Add initializer</title>
                  <act>kiev.gui.FuncNewElemOfNull</act>
                  <attr>init</attr>
                 </syntax:SyntaxFunction>
                </funcs>
               </syntax:SyntaxFunctions>
              </funcs>
             </syntax:SyntaxIdentAttr>
             <syntax:SyntaxSubAttr>
              <name>vtype</name>
              <expected_types>
               <core:SymbolRef name='TypeDeclRef' />
               <core:SymbolRef name='TypeExpr' />
              </expected_types>
             </syntax:SyntaxSubAttr>
             <syntax:SyntaxOptional>
              <calculator>
               <syntax:CalcOptionNotNull>
                <name>init</name>
               </syntax:CalcOptionNotNull>
              </calculator>
              <opt_true>
               <syntax:SyntaxToken>
                <text>=</text>
                <fmt>
                 <core:SymbolRef name='fmt-operator' />
                </fmt>
               </syntax:SyntaxToken>
              </opt_true>
             </syntax:SyntaxOptional>
             <syntax:SyntaxAutoParenth>
              <attr>
               <syntax:SyntaxSubAttr>
                <name>init</name>
                <expected_types>
                 <core:SymbolRef name='stx-types-Expr' />
                </expected_types>
                <empty>
                 <syntax:SyntaxSpace />
                </empty>
               </syntax:SyntaxSubAttr>
              </attr>
              <priority>5</priority>
              <template>
               <core:SymbolRef name='expr-template' />
              </template>
             </syntax:SyntaxAutoParenth>
            </elements>
            <folded_by_default>false</folded_by_default>
            <nested_function_lookup>false</nested_function_lookup>
           </syntax:SyntaxSet>
          </elem>
         </syntax:SyntaxElemDecl>
        </members>
       </syntax:TextSyntax>
      </members>
     </syntax:TextSyntax>
     <syntax:SyntaxElemDecl name='stx-stat-expr'>
      <rnode>
       <core:SymbolRef name='ExprStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <empty>
           <syntax:SyntaxPlaceHolder>
            <text>(void)</text>
            <fmt>
             <core:SymbolRef name='fmt-placeholder' />
            </fmt>
           </syntax:SyntaxPlaceHolder>
          </empty>
          <par>
           <core:SymbolRef name='par-flow-indented' />
          </par>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Add expression</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>expr</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-return'>
      <rnode>
       <core:SymbolRef name='ReturnStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>return</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Set expression</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>expr</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <empty>
           <syntax:SyntaxSpace />
          </empty>
          <par>
           <core:SymbolRef name='par-flow-indented' />
          </par>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-throw'>
      <rnode>
       <core:SymbolRef name='ThrowStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>throw</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-cond'>
      <rnode>
       <core:SymbolRef name='CondStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>cond</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionNotNull>
            <name>message</name>
           </syntax:CalcOptionNotNull>
          </calculator>
          <opt_true>
           <syntax:SyntaxSet>
            <elements>
             <syntax:SyntaxToken>
              <text>:</text>
              <fmt>
               <core:SymbolRef name='fmt-separator' />
              </fmt>
             </syntax:SyntaxToken>
             <syntax:SyntaxSubAttr>
              <name>message</name>
             </syntax:SyntaxSubAttr>
            </elements>
            <folded_by_default>false</folded_by_default>
            <nested_function_lookup>false</nested_function_lookup>
           </syntax:SyntaxSet>
          </opt_true>
         </syntax:SyntaxOptional>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-labeled'>
      <rnode>
       <core:SymbolRef name='LabeledStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>lbl</name>
          <expected_types>
           <core:SymbolRef name='Label' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-unindented' />
          </par>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>stat</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Stat' />
          </expected_types>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-break'>
      <rnode>
       <core:SymbolRef name='BreakStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>break</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-continue'>
      <rnode>
       <core:SymbolRef name='ContinueStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>continue</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-goto-label'>
      <rnode>
       <core:SymbolRef name='GotoStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>goto</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-goto-case'>
      <rnode>
       <core:SymbolRef name='GotoCaseStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>goto</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Set expression</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>expr</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxToken>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionNotNull>
            <name>expr</name>
           </syntax:CalcOptionNotNull>
          </calculator>
          <opt_true>
           <syntax:SyntaxToken>
            <text>case</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
          </opt_true>
          <opt_false>
           <syntax:SyntaxToken>
            <text>default</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
            <funcs>
             <syntax:SyntaxFunctions>
              <funcs>
               <syntax:SyntaxFunction>
                <title>Set expression</title>
                <act>kiev.gui.FuncNewElemOfNull</act>
                <attr>expr</attr>
               </syntax:SyntaxFunction>
              </funcs>
             </syntax:SyntaxFunctions>
            </funcs>
           </syntax:SyntaxToken>
          </opt_false>
         </syntax:SyntaxOptional>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <empty>
           <syntax:SyntaxSpace />
          </empty>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-if-else'>
      <rnode>
       <core:SymbolRef name='IfElseStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>if</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword-if' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Add 'else' statement</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>elseSt</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>cond</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-if-cond' />
          </par>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>thenSt</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Stat' />
           <core:SymbolRef name='stx-types-Macro' />
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionNotNull>
            <name>elseSt</name>
           </syntax:CalcOptionNotNull>
          </calculator>
          <opt_true>
           <syntax:SyntaxToken>
            <text>else</text>
            <fmt>
             <core:SymbolRef name='fmt-keyword-else' />
            </fmt>
           </syntax:SyntaxToken>
          </opt_true>
         </syntax:SyntaxOptional>
         <syntax:SyntaxSubAttr>
          <name>elseSt</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Stat' />
           <core:SymbolRef name='stx-types-Macro' />
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <empty>
           <syntax:SyntaxSpace />
          </empty>
          <par>
           <core:SymbolRef name='par-indented-block-if' />
          </par>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-if-else'>
      <rnode>
       <core:SymbolRef name='IfElseRewr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>if#</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword-if' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>cond</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>thenSt</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Stat' />
           <core:SymbolRef name='stx-types-Macro' />
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>else</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword-else' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>elseSt</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Stat' />
           <core:SymbolRef name='stx-types-Macro' />
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block-if' />
          </par>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-while'>
      <rnode>
       <core:SymbolRef name='WhileStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>while</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>cond</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Stat' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-do-while'>
      <rnode>
       <core:SymbolRef name='DoWhileStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>do</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Stat' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>while</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>cond</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>);</text>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-for'>
      <rnode>
       <core:SymbolRef name='ForStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>for</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Add initializer</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>init</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add condition</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>cond</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add increment</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>iter</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <in_syntax>
             <core:SymbolRef name='syntax-java-decl-simple' />
            </in_syntax>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <kind>SEPARATOR</kind>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <folded_by_default>false</folded_by_default>
          <name>inits</name>
          <expected_types>
           <core:SymbolRef name='LVar' />
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxList>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>cond</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <empty>
           <syntax:SyntaxSpace />
          </empty>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>;</text>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>iter</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <empty>
           <syntax:SyntaxSpace />
          </empty>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Stat' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-foreach'>
      <rnode>
       <core:SymbolRef name='ForEachStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>foreach</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Add variable</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>var</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add filter</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>cond</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>var</name>
          <in_syntax>
           <core:SymbolRef name='syntax-for-java' />
          </in_syntax>
          <expected_types>
           <core:SymbolRef name='LVar' />
          </expected_types>
          <empty>
           <syntax:SyntaxSpace />
          </empty>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>container</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionNotNull>
            <name>cond</name>
           </syntax:CalcOptionNotNull>
          </calculator>
          <opt_true>
           <syntax:SyntaxToken>
            <text>;</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-left' />
            </fmt>
           </syntax:SyntaxToken>
          </opt_true>
         </syntax:SyntaxOptional>
         <syntax:SyntaxSubAttr>
          <name>cond</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
          <empty>
           <syntax:SyntaxSpace />
          </empty>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Stat' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-macro-foreach'>
      <rnode>
       <core:SymbolRef name='ForEachRewr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>foreach#</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Add filter</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>cond</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>var</name>
          <in_syntax>
           <core:SymbolRef name='syntax-java-decl-group' />
          </in_syntax>
          <expected_types>
           <core:SymbolRef name='LVar' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>in</text>
          <kind>KEYWORD</kind>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>container</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxOptional>
          <calculator>
           <syntax:CalcOptionNotNull>
            <name>cond</name>
           </syntax:CalcOptionNotNull>
          </calculator>
          <opt_true>
           <syntax:SyntaxToken>
            <text>where</text>
            <kind>KEYWORD</kind>
            <fmt>
             <core:SymbolRef name='fmt-keyword' />
            </fmt>
           </syntax:SyntaxToken>
          </opt_true>
         </syntax:SyntaxOptional>
         <syntax:SyntaxSubAttr>
          <name>cond</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
           <core:SymbolRef name='stx-types-Macro' />
          </expected_types>
          <empty>
           <syntax:SyntaxSpace />
          </empty>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Stat' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-switch'>
      <rnode>
       <core:SymbolRef name='SwitchStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>switch</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>sel</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <prefix>
           <syntax:SyntaxToken>
            <text>{</text>
            <fmt>
             <core:SymbolRef name='fmt-code-block-start' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>}</text>
            <fmt>
             <core:SymbolRef name='fmt-code-block-end' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>stats</name>
          <expected_types>
           <core:SymbolRef name='CaseLabel' />
           <core:SymbolRef name='stx-types-Stat' />
           <core:SymbolRef name='stx-types-Decl' />
          </expected_types>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-switch-enum'>
      <rnode>
       <core:SymbolRef name='SwitchEnumStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>switch</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>sel</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <prefix>
           <syntax:SyntaxToken>
            <text>{</text>
            <fmt>
             <core:SymbolRef name='fmt-code-block-start' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>}</text>
            <fmt>
             <core:SymbolRef name='fmt-code-block-end' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>stats</name>
          <expected_types>
           <core:SymbolRef name='CaseLabel' />
           <core:SymbolRef name='stx-types-Stat' />
           <core:SymbolRef name='stx-types-Decl' />
          </expected_types>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-switch-type'>
      <rnode>
       <core:SymbolRef name='SwitchTypeStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>switch</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>sel</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <prefix>
           <syntax:SyntaxToken>
            <text>{</text>
            <fmt>
             <core:SymbolRef name='fmt-code-block-start' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>}</text>
            <fmt>
             <core:SymbolRef name='fmt-code-block-end' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>stats</name>
          <expected_types>
           <core:SymbolRef name='CaseLabel' />
           <core:SymbolRef name='stx-types-Stat' />
           <core:SymbolRef name='stx-types-Decl' />
          </expected_types>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-match'>
      <rnode>
       <core:SymbolRef name='MatchStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>switch</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>sel</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <prefix>
           <syntax:SyntaxToken>
            <text>{</text>
            <fmt>
             <core:SymbolRef name='fmt-code-block-start' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>}</text>
            <fmt>
             <core:SymbolRef name='fmt-code-block-end' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>stats</name>
          <expected_types>
           <core:SymbolRef name='CaseLabel' />
           <core:SymbolRef name='stx-types-Stat' />
           <core:SymbolRef name='stx-types-Decl' />
          </expected_types>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-macro-switch'>
      <rnode>
       <core:SymbolRef name='SwitchRewr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>switch#</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>sel</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <prefix>
           <syntax:SyntaxToken>
            <text>{</text>
            <fmt>
             <core:SymbolRef name='fmt-code-block-start' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>}</text>
            <fmt>
             <core:SymbolRef name='fmt-code-block-end' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>stats</name>
          <expected_types>
           <core:SymbolRef name='CaseLabel' />
           <core:SymbolRef name='stx-types-Stat' />
           <core:SymbolRef name='stx-types-Decl' />
          </expected_types>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-try'>
      <rnode>
       <core:SymbolRef name='TryStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>try</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
          <funcs>
           <syntax:SyntaxFunctions>
            <funcs>
             <syntax:SyntaxFunction>
              <title>Add catch</title>
              <act>kiev.gui.FuncNewElemOfEmptyList</act>
              <attr>catchers</attr>
             </syntax:SyntaxFunction>
             <syntax:SyntaxFunction>
              <title>Add finally</title>
              <act>kiev.gui.FuncNewElemOfNull</act>
              <attr>finally_catcher</attr>
             </syntax:SyntaxFunction>
            </funcs>
           </syntax:SyntaxFunctions>
          </funcs>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='Block' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <folded_by_default>false</folded_by_default>
          <name>catchers</name>
          <expected_types>
           <core:SymbolRef name='CatchInfo' />
          </expected_types>
          <empty>
           <syntax:SyntaxElemRef>
            <decl>
             <core:SymbolRef name='stx-nothing' />
            </decl>
            <text>&lt;catchers></text>
           </syntax:SyntaxElemRef>
          </empty>
         </syntax:SyntaxList>
         <syntax:SyntaxSubAttr>
          <name>finally_catcher</name>
          <expected_types>
           <core:SymbolRef name='FinallyInfo' />
          </expected_types>
          <empty>
           <syntax:SyntaxSpace />
          </empty>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-synchronized'>
      <rnode>
       <core:SymbolRef name='SynchronizedStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>synchronized</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='Block' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-stat-with'>
      <rnode>
       <core:SymbolRef name='WithStat' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>with</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxToken>
          <text>(</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-start' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>)</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-cond-end' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>body</name>
          <expected_types>
           <core:SymbolRef name='Block' />
          </expected_types>
          <par>
           <core:SymbolRef name='par-indented-block' />
          </par>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rwr-case'>
      <rnode>
       <core:SymbolRef name='RewriteCase' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>case</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>var</name>
          <expected_types>
           <core:SymbolRef name='RewritePattern' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>:</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
            <fmt>
             <core:SymbolRef name='fmt-space-nl++' />
            </fmt>
           </syntax:SyntaxNode>
          </element>
          <elpar>
           <core:SymbolRef name='par-indented' />
          </elpar>
          <folded_by_default>false</folded_by_default>
          <name>stats</name>
          <empty>
           <syntax:SyntaxToken>
            <text>&lt;?stats?></text>
           </syntax:SyntaxToken>
          </empty>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rwr-pattern'>
      <rnode>
       <core:SymbolRef name='RewritePattern' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxElemRef>
          <decl>
           <core:SymbolRef name='stx-metas' />
          </decl>
          <text>@metas</text>
         </syntax:SyntaxElemRef>
         <syntax:SyntaxSubAttr>
          <name>vtype</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>sname</name>
          <fmt>
           <core:SymbolRef name='fmt-symbol' />
          </fmt>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>vars</name>
          <expected_types>
           <core:SymbolRef name='RewritePattern' />
          </expected_types>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rwr-factory'>
      <rnode>
       <core:SymbolRef name='RewriteNodeFactory' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>new#</text>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>ident</name>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxList>
          <element>
           <syntax:SyntaxNode>
            <name></name>
           </syntax:SyntaxNode>
          </element>
          <separator>
           <syntax:SyntaxToken>
            <text>,</text>
            <fmt>
             <core:SymbolRef name='fmt-separator' />
            </fmt>
           </syntax:SyntaxToken>
          </separator>
          <prefix>
           <syntax:SyntaxToken>
            <text>(</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </prefix>
          <sufix>
           <syntax:SyntaxToken>
            <text>)</text>
            <fmt>
             <core:SymbolRef name='fmt-separator-eat-all' />
            </fmt>
           </syntax:SyntaxToken>
          </sufix>
          <folded_by_default>false</folded_by_default>
          <name>args</name>
          <expected_types>
           <core:SymbolRef name='RewriteNodeArg' />
          </expected_types>
         </syntax:SyntaxList>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rwr-arg'>
      <rnode>
       <core:SymbolRef name='RewriteNodeArg' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>attr</name>
          <fmt>
           <core:SymbolRef name='fmt-symref' />
          </fmt>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxToken>
          <text>=</text>
          <fmt>
           <core:SymbolRef name='fmt-operator' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>anode</name>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-rwr-arg-array'>
      <rnode>
       <core:SymbolRef name='RewriteNodeArgArray' />
      </rnode>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <separator>
         <syntax:SyntaxToken>
          <text>,</text>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
        </separator>
        <prefix>
         <syntax:SyntaxToken>
          <text>{</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </prefix>
        <sufix>
         <syntax:SyntaxToken>
          <text>}</text>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
        </sufix>
        <folded_by_default>false</folded_by_default>
        <name>args</name>
       </syntax:SyntaxList>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-unparsed-expr'>
      <rnode>
       <core:SymbolRef name='ASTExpression' />
      </rnode>
      <elem>
       <syntax:SyntaxList>
        <element>
         <syntax:SyntaxNode>
          <name></name>
         </syntax:SyntaxNode>
        </element>
        <prefix>
         <syntax:SyntaxToken>
          <text>((</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
        </prefix>
        <sufix>
         <syntax:SyntaxToken>
          <text>))</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator' />
          </fmt>
         </syntax:SyntaxToken>
        </sufix>
        <folded_by_default>false</folded_by_default>
        <name>nodes</name>
        <expected_types>
         <core:SymbolRef name='EToken' />
        </expected_types>
       </syntax:SyntaxList>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-unparsed-token'>
      <rnode>
       <core:SymbolRef name='EToken' />
      </rnode>
      <elem>
       <syntax:SyntaxEnumChoice>
        <elements>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-default' />
          </fmt>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-symref' />
          </fmt>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-type' />
          </fmt>
         </syntax:SyntaxIdentAttr>
         <syntax:SyntaxSubAttr>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-operator' />
          </fmt>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxSubAttr>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-number' />
          </fmt>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxStrAttr>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-string' />
          </fmt>
         </syntax:SyntaxStrAttr>
         <syntax:SyntaxCharAttr>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-string' />
          </fmt>
         </syntax:SyntaxCharAttr>
        </elements>
        <name>base_kind</name>
       </syntax:SyntaxEnumChoice>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-const-bool'>
      <rnode>
       <core:SymbolRef name='ConstBoolExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSubAttr>
        <name>value</name>
        <fmt>
         <core:SymbolRef name='fmt-keyword' />
        </fmt>
        <funcs>
         <syntax:SyntaxFunctions>
          <funcs>
           <syntax:SyntaxFunction>
            <title>Edit value</title>
            <act>kiev.gui.EnumEditor$Factory</act>
           </syntax:SyntaxFunction>
          </funcs>
         </syntax:SyntaxFunctions>
        </funcs>
       </syntax:SyntaxSubAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-const-null'>
      <rnode>
       <core:SymbolRef name='ConstNullExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxToken>
        <text>null</text>
        <fmt>
         <core:SymbolRef name='fmt-keyword' />
        </fmt>
       </syntax:SyntaxToken>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-const-str'>
      <rnode>
       <core:SymbolRef name='ConstStringExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxStrAttr>
        <name>value</name>
        <fmt>
         <core:SymbolRef name='fmt-string' />
        </fmt>
       </syntax:SyntaxStrAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-const-char'>
      <rnode>
       <core:SymbolRef name='ConstCharExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxCharAttr>
        <name>value</name>
        <fmt>
         <core:SymbolRef name='fmt-string' />
        </fmt>
       </syntax:SyntaxCharAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-const-byte'>
      <rnode>
       <core:SymbolRef name='ConstByteExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSubAttr>
        <name>value</name>
        <fmt>
         <core:SymbolRef name='fmt-number' />
        </fmt>
        <funcs>
         <syntax:SyntaxFunctions>
          <funcs>
           <syntax:SyntaxFunction>
            <title>Edit value</title>
            <act>kiev.gui.IntEditor$Factory</act>
            <attr>value</attr>
           </syntax:SyntaxFunction>
          </funcs>
         </syntax:SyntaxFunctions>
        </funcs>
       </syntax:SyntaxSubAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-const-short'>
      <rnode>
       <core:SymbolRef name='ConstShortExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSubAttr>
        <name>value</name>
        <fmt>
         <core:SymbolRef name='fmt-number' />
        </fmt>
        <funcs>
         <syntax:SyntaxFunctions>
          <funcs>
           <syntax:SyntaxFunction>
            <title>Edit value</title>
            <act>kiev.gui.IntEditor$Factory</act>
            <attr>value</attr>
           </syntax:SyntaxFunction>
          </funcs>
         </syntax:SyntaxFunctions>
        </funcs>
       </syntax:SyntaxSubAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-const-int'>
      <rnode>
       <core:SymbolRef name='ConstIntExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSubAttr>
        <name>value</name>
        <fmt>
         <core:SymbolRef name='fmt-number' />
        </fmt>
        <funcs>
         <syntax:SyntaxFunctions>
          <funcs>
           <syntax:SyntaxFunction>
            <title>Edit value</title>
            <act>kiev.gui.IntEditor$Factory</act>
            <attr>value</attr>
           </syntax:SyntaxFunction>
          </funcs>
         </syntax:SyntaxFunctions>
        </funcs>
       </syntax:SyntaxSubAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-const-long'>
      <rnode>
       <core:SymbolRef name='ConstLongExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSubAttr>
        <name>value</name>
        <fmt>
         <core:SymbolRef name='fmt-number' />
        </fmt>
        <funcs>
         <syntax:SyntaxFunctions>
          <funcs>
           <syntax:SyntaxFunction>
            <title>Edit value</title>
            <act>kiev.gui.IntEditor$Factory</act>
            <attr>value</attr>
           </syntax:SyntaxFunction>
          </funcs>
         </syntax:SyntaxFunctions>
        </funcs>
       </syntax:SyntaxSubAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-const-float'>
      <rnode>
       <core:SymbolRef name='ConstFloatExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSubAttr>
        <name>value</name>
        <fmt>
         <core:SymbolRef name='fmt-number' />
        </fmt>
       </syntax:SyntaxSubAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-const-double'>
      <rnode>
       <core:SymbolRef name='ConstDoubleExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSubAttr>
        <name>value</name>
        <fmt>
         <core:SymbolRef name='fmt-number' />
        </fmt>
       </syntax:SyntaxSubAttr>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-macro-access'>
      <rnode>
       <core:SymbolRef name='MacroAccessExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>obj</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>↣</text>
          <kind>OPERATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxIdentAttr>
          <decl>
           <core:SymbolRef name='ident-template' />
          </decl>
          <name>ident</name>
          <fmt>
           <core:SymbolRef name='fmt-symref' />
          </fmt>
         </syntax:SyntaxIdentAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-macro-subst-expr'>
      <rnode>
       <core:SymbolRef name='MacroSubstExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>#[</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-right' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>]</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-left' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-macro-subst-type'>
      <rnode>
       <core:SymbolRef name='MacroSubstTypeRef' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxToken>
          <text>#&lt;</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-right' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>mtype</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>:</text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-all' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>req_type</name>
          <expected_types>
           <core:SymbolRef name='stx-types-TypeRef' />
          </expected_types>
          <empty>
           <syntax:SyntaxPlaceHolder>
            <text>any</text>
            <fmt>
             <core:SymbolRef name='fmt-placeholder' />
            </fmt>
           </syntax:SyntaxPlaceHolder>
          </empty>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>></text>
          <kind>SEPARATOR</kind>
          <fmt>
           <core:SymbolRef name='fmt-separator-eat-left' />
          </fmt>
         </syntax:SyntaxToken>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
     <syntax:SyntaxElemDecl name='stx-macro-has-meta'>
      <rnode>
       <core:SymbolRef name='MacroHasMetaExpr' />
      </rnode>
      <elem>
       <syntax:SyntaxSet>
        <elements>
         <syntax:SyntaxSubAttr>
          <name>expr</name>
          <expected_types>
           <core:SymbolRef name='stx-types-Macro' />
           <core:SymbolRef name='stx-types-Expr' />
          </expected_types>
         </syntax:SyntaxSubAttr>
         <syntax:SyntaxToken>
          <text>has</text>
          <kind>KEYWORD</kind>
          <fmt>
           <core:SymbolRef name='fmt-keyword' />
          </fmt>
         </syntax:SyntaxToken>
         <syntax:SyntaxSubAttr>
          <name>meta</name>
          <in_syntax>
           <core:SymbolRef name='syntax-java-meta' />
          </in_syntax>
          <expected_types>
           <core:SymbolRef name='stx-types-Meta' />
          </expected_types>
          <empty>
           <syntax:SyntaxPlaceHolder>
            <text>&lt;meta></text>
            <fmt>
             <core:SymbolRef name='fmt-placeholder-required' />
            </fmt>
           </syntax:SyntaxPlaceHolder>
          </empty>
         </syntax:SyntaxSubAttr>
        </elements>
        <folded_by_default>false</folded_by_default>
        <nested_function_lookup>false</nested_function_lookup>
       </syntax:SyntaxSet>
      </elem>
     </syntax:SyntaxElemDecl>
    </members>
   </syntax:KievTextSyntax>
  </members>
 </core:FileUnit>
</sop:dump>
// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: kiev06.flex

/*******************************************************************************
 * Copyright (c) 2005-2007 UAB "MAKSINETA".
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License Version 1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *     "Maxim Kizub" mkizub@symade.com - initial design and implementation
 *******************************************************************************/
package org.symade.kiev.language.parser;

//import com.intellij.lexer.FlexLexer;
//import com.intellij.psi.tree.IElementType;
//import org.symade.kiev.language.psi.KievTokenTypes;
//import org.symade.kiev.language.psi.KievTokenType;
//import com.intellij.psi.KievTokenType;


public class KievLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int IN_IMPORT = 4;
  public static final int IN_ACCESS = 6;
  public static final int IN_ACCESS_COLON = 8;
  public static final int IN_ACCESS_PARENTH = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
     0,  0,  0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\1\u1f00\11\u2000\1\u2100\1\u2200\1\u2300\1\u2000"+
    "\1\u2400\1\u2500\2\u2000\31\u0100\1\u2600\121\u0100\1\u2700\4\u0100"+
    "\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\53\u0100\1\u2f00\10\u3000\31\u2000\1\u0100\1\u3100\1\u3200\1\u0100"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000\1\u5000"+
    "\1\u5100\1\u5200\1\u5300\3\u0100\1\u5400\1\u5500\1\u5600\12\u2000"+
    "\4\u0100\1\u5700\17\u2000\2\u0100\1\u5800\41\u2000\2\u0100\1\u5900"+
    "\1\u5a00\2\u2000\1\u5b00\1\u5c00\27\u0100\1\u5d00\4\u0100\1\u5e00"+
    "\1\u5f00\42\u2000\1\u0100\1\u6000\1\u6100\11\u2000\1\u6200\24\u2000"+
    "\1\u6300\1\u6400\1\u2000\1\u6500\1\u6600\1\u6700\1\u6800\2\u2000"+
    "\1\u6900\5\u2000\1\u6a00\1\u6b00\1\u6c00\5\u2000\1\u6d00\1\u6e00"+
    "\2\u2000\1\u6f00\1\u2000\1\u7000\14\u2000\1\u7100\4\u2000\246\u0100"+
    "\1\u7200\20\u0100\1\u7300\1\u7400\25\u0100\1\u7500\34\u0100\1\u7600"+
    "\14\u2000\2\u0100\1\u7700\5\u2000\23\u0100\1\u7800\u0aec\u2000\1\u7900"+
    "\1\u7a00\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\16\0\4\5"+
    "\1\1\1\6\1\7\1\10\1\11\2\6\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\3\24\4\25\2\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\36\1\40\1\41\1\42"+
    "\5\43\1\44\3\43\1\45\7\43\1\46\2\43\1\47"+
    "\1\50\1\51\1\6\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\43\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\6\1\106\1\6\6\0\1\107\32\0\2\5\4\43"+
    "\4\5\1\43\2\5\1\0\7\5\1\43\4\5\1\43"+
    "\5\5\27\43\1\5\37\43\1\5\u01ca\43\4\5\14\43"+
    "\16\5\5\43\7\5\1\43\1\5\1\43\21\5\160\0"+
    "\5\43\1\5\2\43\2\5\4\43\1\5\1\43\6\5"+
    "\1\43\1\5\3\43\1\5\1\43\1\5\24\43\1\5"+
    "\123\43\1\5\213\43\1\5\5\0\2\5\246\43\1\5"+
    "\46\43\2\5\1\43\6\5\51\43\6\5\1\43\1\5"+
    "\55\0\1\5\1\0\1\5\2\0\1\5\2\0\1\5"+
    "\1\0\10\5\33\43\4\5\4\43\15\5\6\0\5\5"+
    "\1\43\4\5\13\0\1\5\1\0\3\5\53\43\37\0"+
    "\4\5\2\43\1\0\143\43\1\5\1\43\10\0\1\5"+
    "\6\0\2\43\2\0\1\5\4\0\2\43\12\0\3\43"+
    "\2\5\1\43\17\5\1\0\1\43\1\0\36\43\33\0"+
    "\2\5\131\43\13\0\1\43\16\5\12\0\41\43\11\0"+
    "\2\43\4\5\1\43\2\5\1\0\30\43\4\0\1\43"+
    "\11\0\1\43\3\0\1\43\5\0\22\5\31\43\3\0"+
    "\4\5\13\43\65\5\25\43\1\5\22\43\13\5\61\0"+
    "\66\43\3\0\1\43\22\0\1\43\7\0\12\43\2\0"+
    "\2\5\12\0\1\5\20\43\3\0\1\5\10\43\2\5"+
    "\2\43\2\5\26\43\1\5\7\43\1\5\1\43\3\5"+
    "\4\43\2\5\1\0\1\43\7\0\2\5\2\0\2\5"+
    "\3\0\1\43\10\5\1\0\4\5\2\43\1\5\3\43"+
    "\2\0\2\5\12\0\4\43\7\5\2\43\1\5\1\0"+
    "\2\5\3\0\1\5\6\43\4\5\2\43\2\5\26\43"+
    "\1\5\7\43\1\5\2\43\1\5\2\43\1\5\2\43"+
    "\2\5\1\0\1\5\5\0\4\5\2\0\2\5\3\0"+
    "\3\5\1\0\7\5\4\43\1\5\1\43\7\5\14\0"+
    "\3\43\1\0\13\5\3\0\1\5\11\43\1\5\3\43"+
    "\1\5\26\43\1\5\7\43\1\5\2\43\1\5\5\43"+
    "\2\5\1\0\1\43\10\0\1\5\3\0\1\5\3\0"+
    "\2\5\1\43\17\5\2\43\2\0\2\5\12\0\1\5"+
    "\1\43\7\5\1\43\6\0\1\5\3\0\1\5\10\43"+
    "\2\5\2\43\2\5\26\43\1\5\7\43\1\5\2\43"+
    "\1\5\5\43\2\5\1\0\1\43\7\0\2\5\2\0"+
    "\2\5\3\0\7\5\3\0\4\5\2\43\1\5\3\43"+
    "\2\0\2\5\12\0\1\5\1\43\20\5\1\0\1\43"+
    "\1\5\6\43\3\5\3\43\1\5\4\43\3\5\2\43"+
    "\1\5\1\43\1\5\2\43\3\5\2\43\3\5\3\43"+
    "\3\5\14\43\4\5\5\0\3\5\3\0\1\5\4\0"+
    "\2\5\1\43\6\5\1\0\16\5\12\0\11\5\1\43"+
    "\6\5\5\0\10\43\1\5\3\43\1\5\27\43\1\5"+
    "\20\43\3\5\1\43\7\0\1\5\3\0\1\5\4\0"+
    "\7\5\2\0\1\5\3\43\5\5\2\43\2\0\2\5"+
    "\12\0\20\5\1\43\3\0\1\5\10\43\1\5\3\43"+
    "\1\5\27\43\1\5\12\43\1\5\5\43\2\5\1\0"+
    "\1\43\7\0\1\5\3\0\1\5\4\0\7\5\2\0"+
    "\7\5\1\43\1\5\2\43\2\0\2\5\12\0\1\5"+
    "\2\43\15\5\4\0\11\43\1\5\3\43\1\5\51\43"+
    "\2\0\1\43\7\0\1\5\3\0\1\5\4\0\1\43"+
    "\5\5\3\43\1\0\7\5\3\43\2\0\2\5\12\0"+
    "\12\5\6\43\1\5\3\0\1\5\22\43\3\5\30\43"+
    "\1\5\11\43\1\5\1\43\2\5\7\43\3\5\1\0"+
    "\4\5\6\0\1\5\1\0\1\5\10\0\6\5\12\0"+
    "\2\5\2\0\15\5\60\43\1\0\2\43\7\0\4\5"+
    "\10\43\10\0\1\5\12\0\47\5\2\43\1\5\1\43"+
    "\1\5\5\43\1\5\30\43\1\5\1\43\1\5\12\43"+
    "\1\0\2\43\11\0\1\43\2\5\5\43\1\5\1\43"+
    "\1\5\6\0\2\5\12\0\2\5\4\43\40\5\1\43"+
    "\27\5\2\0\6\5\12\0\13\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\2\0\10\43\1\5\44\43\4\5"+
    "\24\0\1\5\2\0\5\43\13\0\1\5\44\0\11\5"+
    "\1\0\71\5\53\43\24\0\1\43\12\0\6\5\6\43"+
    "\4\0\4\43\3\0\1\43\3\0\2\43\7\0\3\43"+
    "\4\0\15\43\14\0\1\43\17\0\2\5\46\43\1\5"+
    "\1\43\5\5\1\43\2\5\53\43\1\5\115\43\1\5"+
    "\4\43\2\5\7\43\1\5\1\43\1\5\4\43\2\5"+
    "\51\43\1\5\4\43\2\5\41\43\1\5\4\43\2\5"+
    "\7\43\1\5\1\43\1\5\4\43\2\5\17\43\1\5"+
    "\71\43\1\5\4\43\2\5\103\43\2\5\3\0\40\5"+
    "\20\43\20\5\126\43\2\5\6\43\3\5\u016c\43\2\5"+
    "\21\43\1\5\32\43\5\5\113\43\3\5\13\43\7\5"+
    "\15\43\1\5\4\43\3\0\13\5\22\43\3\0\13\5"+
    "\22\43\2\0\14\5\15\43\1\5\3\43\1\5\2\0"+
    "\14\5\64\43\40\0\3\5\1\43\3\5\2\43\1\0"+
    "\2\5\12\0\41\5\4\0\1\5\12\0\6\5\131\43"+
    "\7\5\5\43\2\0\42\43\1\0\1\43\5\5\106\43"+
    "\12\5\37\43\1\5\14\0\4\5\14\0\12\5\12\0"+
    "\36\43\2\5\5\43\13\5\54\43\4\5\32\43\6\5"+
    "\12\0\46\5\27\43\5\0\4\5\65\43\12\0\1\5"+
    "\35\0\2\5\13\0\6\5\12\0\15\5\1\43\10\5"+
    "\16\0\1\5\2\0\77\5\5\0\57\43\21\0\7\43"+
    "\4\5\12\0\21\5\11\0\14\5\3\0\36\43\15\0"+
    "\2\43\12\0\54\43\16\0\14\5\44\43\24\0\10\5"+
    "\12\0\3\5\3\43\12\0\44\43\2\5\11\43\7\5"+
    "\53\43\2\5\3\43\20\5\3\0\1\5\25\0\4\43"+
    "\1\0\6\43\1\0\2\43\3\0\1\43\5\5\300\43"+
    "\72\0\1\5\5\0\26\43\2\5\6\43\2\5\46\43"+
    "\2\5\6\43\2\5\10\43\1\5\1\43\1\5\1\43"+
    "\1\5\1\43\1\5\37\43\2\5\65\43\1\5\7\43"+
    "\1\5\1\43\3\5\3\43\1\5\7\43\3\5\4\43"+
    "\2\5\6\43\4\5\15\43\5\5\3\43\1\5\7\43"+
    "\16\5\5\0\30\5\2\3\5\0\20\5\2\43\23\5"+
    "\1\43\13\5\5\0\1\5\12\0\1\5\1\43\10\5"+
    "\1\110\1\111\3\5\1\43\20\5\15\43\3\5\40\43"+
    "\20\5\15\0\4\5\1\0\3\5\14\0\21\5\1\43"+
    "\4\5\1\43\2\5\12\43\1\5\1\43\3\5\5\43"+
    "\6\5\1\43\1\5\1\43\1\5\1\43\1\5\4\43"+
    "\1\5\13\43\2\5\4\43\5\5\5\43\4\5\1\43"+
    "\21\5\51\43\7\5\324\6\1\112\1\113\214\6\u010e\5"+
    "\57\43\1\5\57\43\1\5\205\43\6\5\4\43\3\0"+
    "\2\43\14\5\46\43\1\5\1\43\5\5\1\43\2\5"+
    "\70\43\7\5\1\43\17\5\1\0\27\43\11\5\7\43"+
    "\1\5\7\43\1\5\7\43\1\5\7\43\1\5\7\43"+
    "\1\5\7\43\1\5\7\43\1\5\7\43\1\5\40\0"+
    "\57\5\1\43\325\5\3\43\31\5\11\43\6\0\1\5"+
    "\5\43\2\5\5\43\4\5\126\43\2\5\2\0\2\5"+
    "\3\43\1\5\132\43\1\5\4\43\5\5\53\43\1\5"+
    "\136\43\21\5\40\43\60\5\320\43\100\5\375\43\3\5"+
    "\215\43\103\5\56\43\2\5\15\43\3\5\20\43\12\0"+
    "\2\43\24\5\57\43\1\0\4\5\12\0\1\5\37\43"+
    "\2\0\120\43\2\0\45\5\11\43\2\5\147\43\2\5"+
    "\65\43\2\5\11\43\52\5\15\43\1\0\3\43\1\0"+
    "\4\43\1\0\27\43\5\0\4\5\1\0\13\5\1\43"+
    "\7\5\64\43\14\5\2\0\62\43\22\0\12\5\12\0"+
    "\6\5\22\0\6\43\3\5\1\43\1\5\2\43\13\0"+
    "\34\43\10\0\2\5\27\43\15\0\14\5\35\43\3\5"+
    "\4\0\57\43\16\0\16\5\1\43\12\0\6\5\5\43"+
    "\1\0\12\43\12\0\5\43\1\5\51\43\16\0\11\5"+
    "\3\43\1\0\10\43\2\0\2\5\12\0\6\5\27\43"+
    "\3\5\1\43\3\0\62\43\1\0\1\43\3\0\2\43"+
    "\2\0\5\43\2\0\1\43\1\0\1\43\30\5\3\43"+
    "\2\5\13\43\5\0\2\5\3\43\2\0\12\5\6\43"+
    "\2\5\6\43\2\5\6\43\11\5\7\43\1\5\7\43"+
    "\1\5\53\43\1\5\16\43\6\5\163\43\10\0\1\5"+
    "\2\0\2\5\12\0\6\5\244\43\14\5\27\43\4\5"+
    "\61\43\4\5\u0100\3\156\43\2\5\152\43\46\5\7\43"+
    "\14\5\5\43\5\5\1\43\1\0\12\43\1\5\15\43"+
    "\1\5\5\43\1\5\1\43\1\5\2\43\1\5\2\43"+
    "\1\5\154\43\41\5\153\43\22\5\100\43\2\5\66\43"+
    "\50\5\15\43\3\5\20\0\20\5\20\0\3\5\2\43"+
    "\30\5\3\43\31\5\1\43\6\5\5\43\1\5\207\43"+
    "\2\5\1\0\4\5\1\43\13\5\12\0\7\5\32\43"+
    "\4\5\1\43\1\5\32\43\13\5\131\43\3\5\6\43"+
    "\2\5\6\43\2\5\6\43\2\5\3\43\3\5\2\43"+
    "\3\5\2\43\22\5\3\0\4\5\14\43\1\5\32\43"+
    "\1\5\23\43\1\5\2\43\1\5\17\43\2\5\16\43"+
    "\42\5\173\43\105\5\65\43\210\5\1\0\202\5\35\43"+
    "\3\5\61\43\17\5\1\0\37\5\40\43\15\5\36\43"+
    "\5\5\46\43\5\0\5\5\36\43\2\5\44\43\4\5"+
    "\10\43\1\5\5\43\52\5\236\43\2\5\12\0\6\5"+
    "\44\43\4\5\44\43\4\5\50\43\10\5\64\43\234\5"+
    "\67\43\11\5\26\43\12\5\10\43\230\5\6\43\2\5"+
    "\1\43\1\5\54\43\1\5\2\43\3\5\1\43\2\5"+
    "\27\43\12\5\27\43\11\5\37\43\101\5\23\43\1\5"+
    "\2\43\12\5\26\43\12\5\32\43\106\5\70\43\6\5"+
    "\2\43\100\5\1\43\3\0\1\5\2\0\5\5\4\0"+
    "\4\43\1\5\3\43\1\5\35\43\2\5\3\0\4\5"+
    "\1\0\40\5\35\43\3\5\35\43\43\5\10\43\1\5"+
    "\34\43\2\0\31\5\66\43\12\5\26\43\12\5\23\43"+
    "\15\5\22\43\156\5\111\43\67\5\63\43\15\5\63\43"+
    "\15\5\44\43\4\0\10\5\12\0\u0146\5\52\43\1\5"+
    "\2\0\3\5\2\43\116\5\35\43\12\5\1\43\10\5"+
    "\26\43\13\0\137\5\25\43\33\5\27\43\11\5\3\0"+
    "\65\43\17\0\37\5\12\0\17\5\4\0\55\43\13\0"+
    "\2\5\1\0\17\5\1\0\2\5\31\43\7\5\12\0"+
    "\6\5\3\0\44\43\16\0\1\5\12\0\4\5\1\43"+
    "\2\0\1\43\10\5\43\43\1\0\2\5\1\43\11\5"+
    "\3\0\60\43\16\0\4\43\4\5\4\0\1\5\14\0"+
    "\1\43\1\5\1\43\43\5\22\43\1\5\31\43\14\0"+
    "\6\5\1\0\101\5\7\43\1\5\1\43\1\5\4\43"+
    "\1\5\17\43\1\5\12\43\7\5\57\43\14\0\5\5"+
    "\12\0\6\5\4\0\1\5\10\43\2\5\2\43\2\5"+
    "\26\43\1\5\7\43\1\5\2\43\1\5\5\43\1\5"+
    "\2\0\1\43\7\0\2\5\2\0\2\5\3\0\2\5"+
    "\1\43\6\5\1\0\5\5\5\43\2\0\2\5\7\0"+
    "\3\5\5\0\213\5\65\43\22\0\4\43\5\5\12\0"+
    "\4\5\1\0\3\43\36\5\60\43\24\0\2\43\1\5"+
    "\1\43\10\5\12\0\246\5\57\43\7\0\2\5\11\0"+
    "\27\5\4\43\2\0\42\5\60\43\21\0\3\5\1\43"+
    "\13\5\12\0\46\5\53\43\15\0\1\43\7\5\12\0"+
    "\66\5\33\43\2\5\17\0\4\5\12\0\306\5\54\43"+
    "\17\0\145\5\100\43\12\0\25\5\10\43\2\5\1\43"+
    "\2\5\10\43\1\5\2\43\1\5\30\43\6\0\1\5"+
    "\2\0\2\5\4\0\1\43\1\0\1\43\2\0\14\5"+
    "\12\0\106\5\10\43\2\5\47\43\7\0\2\5\7\0"+
    "\1\43\1\5\1\43\1\0\33\5\1\43\12\0\50\43"+
    "\7\0\1\43\4\0\10\5\1\0\10\5\1\43\13\0"+
    "\56\43\20\0\3\5\1\43\42\5\71\43\7\5\11\43"+
    "\1\5\45\43\10\0\1\5\10\0\1\43\17\5\12\0"+
    "\30\5\36\43\2\5\26\0\1\5\16\0\111\5\7\43"+
    "\1\5\2\43\1\5\46\43\6\0\3\5\1\0\1\5"+
    "\2\0\1\5\7\0\1\43\1\0\10\5\12\0\6\5"+
    "\6\43\1\5\2\43\1\5\40\43\5\0\1\5\2\0"+
    "\1\5\5\0\1\43\7\5\12\0\u0136\5\23\43\4\0"+
    "\271\5\1\43\54\5\4\43\37\5\232\43\146\5\157\43"+
    "\21\5\304\43\274\5\57\43\1\5\11\0\307\5\107\43"+
    "\271\5\71\43\7\5\37\43\1\5\12\0\146\5\36\43"+
    "\2\5\5\0\13\5\60\43\7\0\11\5\4\43\14\5"+
    "\12\0\11\5\25\43\5\5\23\43\260\5\100\43\200\5"+
    "\113\43\4\5\1\0\1\43\67\0\7\5\4\0\15\43"+
    "\100\5\2\43\1\5\1\43\1\0\13\5\2\0\16\5"+
    "\370\43\10\5\326\43\52\5\11\43\367\5\37\43\61\5"+
    "\3\43\21\5\4\43\10\5\u018c\43\4\5\153\43\5\5"+
    "\15\43\3\5\11\43\7\5\12\43\3\5\2\0\1\5"+
    "\4\0\301\5\5\0\3\5\26\0\2\5\7\0\36\5"+
    "\4\0\224\5\3\0\273\5\125\43\1\5\107\43\1\5"+
    "\2\43\2\5\1\43\2\5\2\43\2\5\4\43\1\5"+
    "\14\43\1\5\1\43\1\5\7\43\1\5\101\43\1\5"+
    "\4\43\2\5\10\43\1\5\7\43\1\5\34\43\1\5"+
    "\4\43\1\5\5\43\1\5\1\43\3\5\7\43\1\5"+
    "\u0154\43\2\5\31\43\1\5\31\43\1\5\37\43\1\5"+
    "\31\43\1\5\37\43\1\5\31\43\1\5\37\43\1\5"+
    "\31\43\1\5\37\43\1\5\31\43\1\5\10\43\2\5"+
    "\151\0\4\5\62\0\10\5\1\0\16\5\1\0\26\5"+
    "\5\0\1\5\17\0\120\5\7\0\1\5\21\0\2\5"+
    "\7\0\1\5\2\0\1\5\5\0\325\5\55\43\3\5"+
    "\7\0\7\43\2\5\12\0\4\5\1\43\u0171\5\54\43"+
    "\16\0\5\5\306\43\13\5\7\0\51\5\104\43\7\0"+
    "\1\43\4\5\12\0\u0156\5\1\43\117\5\4\43\1\5"+
    "\33\43\1\5\2\43\1\5\1\43\2\5\1\43\1\5"+
    "\12\43\1\5\4\43\1\5\1\43\1\5\1\43\6\5"+
    "\1\43\4\5\1\43\1\5\1\43\1\5\1\43\1\5"+
    "\3\43\1\5\2\43\1\5\1\43\2\5\1\43\1\5"+
    "\1\43\1\5\1\43\1\5\1\43\1\5\1\43\1\5"+
    "\2\43\1\5\1\43\2\5\4\43\1\5\7\43\1\5"+
    "\4\43\1\5\4\43\1\5\1\43\1\5\12\43\1\5"+
    "\21\43\5\5\3\43\1\5\5\43\1\5\21\43\u0134\5"+
    "\12\0\6\5\336\43\42\5\65\43\13\5\336\43\2\5"+
    "\u0182\43\16\5\u0131\43\37\5\36\43\342\5\113\43\266\5"+
    "\1\0\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31488];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\3\1\12\1\3\2\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\6\1\23"+
    "\1\24\1\25\20\6\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\6\1\35\1\36\1\37\1\40\1\41"+
    "\3\40\1\42\1\4\1\0\1\6\1\43\1\0\1\44"+
    "\1\0\1\45\1\46\1\47\1\13\2\45\1\50\1\51"+
    "\1\13\1\52\1\53\2\0\1\54\1\0\1\25\7\6"+
    "\1\55\10\6\1\56\25\6\1\57\1\60\1\61\1\62"+
    "\1\0\1\6\3\43\1\0\1\63\1\0\1\45\1\0"+
    "\1\13\4\0\16\6\1\64\1\65\5\6\1\66\21\6"+
    "\1\67\5\6\1\0\1\70\1\0\1\46\6\0\3\6"+
    "\1\71\4\6\1\72\1\6\1\73\4\6\1\74\5\6"+
    "\1\75\14\6\1\76\2\6\1\77\1\100\2\6\1\101"+
    "\1\6\7\0\1\6\1\102\1\103\1\104\1\105\4\6"+
    "\1\106\1\107\17\6\1\110\2\6\1\111\3\6\1\112"+
    "\1\6\7\0\3\6\1\113\4\6\1\114\2\6\1\115"+
    "\2\6\1\116\2\6\1\117\1\6\1\120\1\121\1\122"+
    "\1\6\1\123\3\6\1\124\1\125\2\0\1\126\2\6"+
    "\1\127\1\130\1\131\1\132\4\6\1\133\1\134\1\6"+
    "\1\135\2\6\1\136\1\6\1\137\1\0\1\140\1\141"+
    "\3\6\1\142\3\6\1\143\1\0\1\6\1\144\1\145"+
    "\1\146\1\6\1\147\1\150\1\151\2\6\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u017c"+
    "\0\u0214\0\u017c\0\u0260\0\u02ac\0\u017c\0\u017c\0\u017c\0\u02f8"+
    "\0\u0344\0\u0390\0\u03dc\0\u0428\0\u017c\0\u017c\0\u017c\0\u017c"+
    "\0\u017c\0\u0474\0\u04c0\0\u050c\0\u0558\0\u017c\0\u05a4\0\u05f0"+
    "\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850"+
    "\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u017c"+
    "\0\u017c\0\u017c\0\u017c\0\u017c\0\u017c\0\u017c\0\u0ab0\0\u0afc"+
    "\0\u017c\0\u017c\0\u017c\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\u017c"+
    "\0\u017c\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u017c\0\u0da8\0\u0df4"+
    "\0\u0e40\0\u0e8c\0\u0ed8\0\u017c\0\u0f24\0\u017c\0\u017c\0\u0f70"+
    "\0\u017c\0\u017c\0\u0fbc\0\u1008\0\u017c\0\u1054\0\u017c\0\u10a0"+
    "\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u050c\0\u12b4"+
    "\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u050c"+
    "\0\u1514\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u1728"+
    "\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u1988"+
    "\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u017c\0\u017c\0\u017c"+
    "\0\u017c\0\u1b50\0\u1b9c\0\u017c\0\u1be8\0\u1c34\0\u1c80\0\u017c"+
    "\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0"+
    "\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8\0\u20f4\0\u2140"+
    "\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u050c"+
    "\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u050c\0\u251c\0\u2568"+
    "\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4\0\u2730\0\u277c\0\u27c8"+
    "\0\u2814\0\u2860\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u29dc\0\u050c"+
    "\0\u2a28\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58\0\u2ba4\0\u050c\0\u2bf0"+
    "\0\u017c\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04"+
    "\0\u2e50\0\u2e9c\0\u050c\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u050c"+
    "\0\u3018\0\u050c\0\u3064\0\u30b0\0\u30fc\0\u3148\0\u050c\0\u3194"+
    "\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u050c\0\u3310\0\u335c\0\u33a8"+
    "\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608"+
    "\0\u3654\0\u050c\0\u36a0\0\u36ec\0\u050c\0\u3738\0\u3784\0\u37d0"+
    "\0\u050c\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4"+
    "\0\u3a30\0\u3a7c\0\u050c\0\u050c\0\u050c\0\u050c\0\u3ac8\0\u3b14"+
    "\0\u3b60\0\u3bac\0\u050c\0\u3bf8\0\u3c44\0\u3c90\0\u3cdc\0\u3d28"+
    "\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88"+
    "\0\u3fd4\0\u4020\0\u406c\0\u050c\0\u40b8\0\u4104\0\u4150\0\u419c"+
    "\0\u41e8\0\u4234\0\u050c\0\u4280\0\u42cc\0\u4318\0\u4364\0\u43b0"+
    "\0\u43fc\0\u4448\0\u4494\0\u44e0\0\u452c\0\u4578\0\u050c\0\u45c4"+
    "\0\u4610\0\u465c\0\u46a8\0\u050c\0\u46f4\0\u4740\0\u050c\0\u478c"+
    "\0\u47d8\0\u050c\0\u4824\0\u4870\0\u050c\0\u48bc\0\u050c\0\u050c"+
    "\0\u050c\0\u4908\0\u050c\0\u4954\0\u49a0\0\u49ec\0\u050c\0\u017c"+
    "\0\u4a38\0\u4a84\0\u017c\0\u4ad0\0\u4b1c\0\u050c\0\u050c\0\u050c"+
    "\0\u050c\0\u4b68\0\u4bb4\0\u4c00\0\u4c4c\0\u050c\0\u050c\0\u4c98"+
    "\0\u050c\0\u4ce4\0\u4d30\0\u050c\0\u4d7c\0\u017c\0\u4dc8\0\u050c"+
    "\0\u050c\0\u4e14\0\u4e60\0\u4eac\0\u050c\0\u4ef8\0\u4f44\0\u4f90"+
    "\0\u050c\0\u4fdc\0\u5028\0\u050c\0\u050c\0\u050c\0\u5074\0\u050c"+
    "\0\u017c\0\u050c\0\u50c0\0\u510c\0\u050c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\6\1\7\1\6\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\2\10\1\17\1\20\1\21"+
    "\1\22\1\23\3\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\11\34\1\35\1\6\1\36\1\34\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\34"+
    "\1\47\3\34\1\50\1\51\1\52\1\34\1\53\1\54"+
    "\1\55\1\34\1\56\1\57\3\34\1\60\1\61\1\6"+
    "\1\62\1\63\1\64\1\65\1\6\2\7\1\6\1\7"+
    "\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\10\1\17\1\20\1\21\1\22\1\23\3\24\1\25"+
    "\1\66\1\27\1\30\1\31\1\32\1\33\11\34\1\35"+
    "\1\6\1\36\1\34\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\34\1\47\3\34\1\50\1\51"+
    "\1\52\1\34\1\53\1\67\1\55\1\34\1\56\1\57"+
    "\3\34\1\60\1\61\1\6\1\62\1\63\1\64\1\65"+
    "\1\0\2\70\1\0\1\70\6\0\1\71\13\0\1\72"+
    "\64\0\1\73\2\74\1\73\1\74\12\73\1\17\50\73"+
    "\1\75\3\73\1\76\4\73\1\77\13\73\2\7\1\73"+
    "\1\7\7\73\1\100\2\73\1\17\50\73\1\75\3\73"+
    "\1\76\4\73\1\77\12\73\115\0\2\7\1\0\1\7"+
    "\107\0\2\11\1\0\4\11\1\101\40\11\1\102\43\11"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\2\34\1\103\26\34\2\0\1\34\4\0"+
    "\50\104\1\105\43\104\33\0\1\106\101\0\1\107\1\0"+
    "\4\110\102\0\1\111\4\0\1\112\112\0\1\110\1\0"+
    "\4\24\10\0\1\113\1\114\1\115\1\116\1\0\1\117"+
    "\1\0\1\120\3\0\1\24\2\0\1\113\1\0\1\114"+
    "\1\115\1\116\4\0\1\117\13\0\1\120\32\0\1\110"+
    "\1\0\4\24\11\0\1\114\1\115\1\116\1\0\1\117"+
    "\5\0\1\24\4\0\1\114\1\115\1\116\4\0\1\117"+
    "\57\0\1\121\113\0\1\122\21\0\1\123\15\0\1\124"+
    "\21\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\31\34\2\0\1\34\55\0\1\125"+
    "\42\0\2\37\1\0\45\37\1\126\2\37\1\127\40\37"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\1\34\1\130\10\34\1\131\16\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\20\34\1\132\10\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\1\133\11\34\1\134\2\34"+
    "\1\135\13\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\4\34"+
    "\1\136\10\34\1\137\13\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\12\34\1\140\1\34\1\141\11\34\1\142\2\34"+
    "\2\0\1\34\4\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\1\143\7\34\1\144"+
    "\4\34\1\145\5\34\1\146\5\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\15\34\1\147\13\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\5\34\1\150\5\34\1\151\1\152\14\34"+
    "\2\0\1\34\4\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\1\153\3\34\1\154"+
    "\16\34\1\155\5\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\16\34\1\156\12\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\1\157\17\34\1\160\2\34\1\161\5\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\4\34\1\162\24\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\22\34\1\163\1\164\1\34\1\165"+
    "\1\34\1\166\1\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\7\34\1\167\10\34\1\170\6\34\1\171\1\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\15\34\1\172\13\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\7\34\1\173\1\174\20\34"+
    "\2\0\1\34\4\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\22\34\1\163\1\164"+
    "\1\34\1\165\1\34\1\175\1\34\2\0\1\34\5\0"+
    "\2\70\1\0\1\70\110\0\2\74\1\0\1\74\200\0"+
    "\1\176\113\0\1\177\7\0\1\200\103\0\1\201\31\0"+
    "\1\11\2\0\1\11\10\0\3\11\22\0\1\11\4\0"+
    "\1\11\3\0\1\11\6\0\1\11\3\0\1\11\1\0"+
    "\1\11\1\202\14\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\23\34\1\203\5\34"+
    "\2\0\1\34\16\0\1\204\110\0\1\104\2\0\1\104"+
    "\10\0\2\205\1\206\22\0\1\104\4\0\1\104\3\0"+
    "\1\104\6\0\1\104\3\0\1\104\1\0\1\104\1\207"+
    "\35\0\1\210\115\0\4\110\11\0\1\114\1\115\1\116"+
    "\7\0\1\110\4\0\1\114\1\115\1\116\32\0\15\111"+
    "\1\211\76\111\2\112\3\0\102\112\1\0\4\112\23\0"+
    "\4\113\15\0\1\117\5\0\1\113\13\0\1\117\43\0"+
    "\1\212\1\0\1\212\2\0\4\212\11\0\1\114\1\0"+
    "\1\116\7\0\1\212\4\0\1\114\1\0\1\116\53\0"+
    "\1\213\1\0\4\214\7\0\5\214\1\0\1\117\5\0"+
    "\1\214\1\0\6\214\4\0\1\117\103\0\1\215\131\0"+
    "\1\216\2\0\1\217\23\0\1\37\2\0\1\37\10\0"+
    "\3\37\22\0\1\37\4\0\1\37\3\0\1\37\6\0"+
    "\1\37\3\0\1\37\1\0\1\37\1\220\14\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\21\34\1\221\7\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\10\34\1\222\20\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\4\34\1\223\24\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\21\34\1\224\1\225\6\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\1\226\30\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\14\34\1\227\14\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\5\34\1\230\23\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\21\34\1\231\7\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\21\34\1\232\1\34\1\233\5\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\22\34\1\234\6\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\12\34\1\235\16\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\14\34\1\236\14\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\20\34\1\237\10\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\14\34\1\240\14\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\22\34\1\241\6\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\16\34\1\242\12\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\22\34\1\243\1\34\1\244\4\34"+
    "\2\0\1\34\4\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\22\34\1\245\6\34"+
    "\2\0\1\34\4\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\25\34\1\246\3\34"+
    "\2\0\1\34\4\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\12\34\1\247\16\34"+
    "\2\0\1\34\4\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\4\34\1\250\24\34"+
    "\2\0\1\34\4\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\2\34\1\251\26\34"+
    "\2\0\1\34\4\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\1\252\7\34\1\253"+
    "\4\34\1\254\13\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\1\34\1\255\27\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\17\34\1\256\2\34\1\257\6\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\1\260\30\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\16\34\1\261\12\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\10\34\1\262\20\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\14\34\1\263\14\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\10\34\1\264\7\34\1\265\10\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\1\266\22\34\1\267\3\34\1\270"+
    "\1\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\16\34\1\271"+
    "\12\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\12\34\1\272"+
    "\16\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\10\34\1\273"+
    "\20\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\22\34\1\274"+
    "\6\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\14\34\1\275"+
    "\14\34\2\0\1\34\27\0\4\276\7\0\5\276\11\0"+
    "\6\276\32\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\22\34\1\277\6\34\2\0"+
    "\1\34\16\0\1\204\10\0\3\206\100\0\1\204\10\0"+
    "\3\104\111\0\4\300\7\0\5\300\11\0\6\300\32\0"+
    "\15\111\1\211\4\111\1\301\71\111\23\0\4\212\11\0"+
    "\1\114\1\0\1\116\7\0\1\212\4\0\1\114\1\0"+
    "\1\116\55\0\4\302\7\0\5\302\7\0\1\302\1\0"+
    "\6\302\53\0\1\302\1\0\4\214\7\0\5\214\1\0"+
    "\1\117\1\115\4\0\1\214\1\0\6\214\4\0\1\117"+
    "\3\0\1\115\77\0\1\303\121\0\1\304\4\0\1\305"+
    "\77\0\1\306\61\0\4\307\7\0\5\307\11\0\6\307"+
    "\32\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\22\34\1\310\6\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\1\311\30\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\1\312\30\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\4\34\1\313\24\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\2\34\1\314\26\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\21\34\1\315\7\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\22\34\1\316\6\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\1\317\30\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\4\34\1\320\24\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\23\34\1\321\5\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\13\34\1\322\15\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\4\34\1\323\24\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\21\34\1\324\7\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\1\325\30\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\4\34"+
    "\1\326\24\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\15\34"+
    "\1\327\13\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\12\34"+
    "\1\330\2\34\1\331\13\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\4\34\1\332\24\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\1\333\30\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\10\34\1\334\20\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\12\34\1\335\16\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\20\34\1\336\10\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\11\34\1\337\17\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\6\34\1\340\22\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\24\34\1\341\4\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\22\34\1\342\6\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\12\34\1\343\16\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\23\34\1\344\5\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\23\34\1\345\5\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\22\34\1\346\6\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\4\34\1\347\24\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\22\34\1\350\6\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\2\34\1\351\26\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\21\34\1\352\7\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\15\34\1\353\13\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\14\34\1\354\14\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\4\34\1\355\24\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\4\34\1\356\24\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\1\357\30\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\12\34"+
    "\1\360\16\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\7\34"+
    "\1\361\21\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\2\34"+
    "\1\351\17\34\1\362\6\34\2\0\1\34\27\0\4\363"+
    "\7\0\5\363\11\0\6\363\55\0\4\364\7\0\5\364"+
    "\11\0\6\364\55\0\4\302\7\0\5\302\2\0\1\115"+
    "\4\0\1\302\1\0\6\302\10\0\1\115\101\0\1\365"+
    "\133\0\1\366\111\0\1\367\103\0\1\370\50\0\4\371"+
    "\7\0\5\371\11\0\6\371\32\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\20\34"+
    "\1\372\10\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\21\34"+
    "\1\373\7\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\11\34"+
    "\1\374\17\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\7\34"+
    "\1\375\21\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\21\34"+
    "\1\376\7\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\10\34"+
    "\1\377\20\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\23\34"+
    "\1\u0100\5\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\20\34"+
    "\1\u0101\10\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\14\34"+
    "\1\u0102\14\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\4\34"+
    "\1\u0103\24\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\12\34"+
    "\1\u0104\16\34\2\0\1\34\4\0\1\34\10\0\1\34"+
    "\11\0\4\34\7\0\11\34\3\0\1\34\1\0\1\u0105"+
    "\30\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\4\34\1\u0106"+
    "\24\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\20\34\1\u0107"+
    "\10\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\20\34\1\u0108"+
    "\10\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\20\34\1\u0109"+
    "\10\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\24\34\1\u010a"+
    "\4\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\1\u010b\30\34"+
    "\2\0\1\34\4\0\1\34\10\0\1\34\11\0\4\34"+
    "\7\0\11\34\3\0\1\34\1\0\1\u010c\30\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\13\34\1\u010d\15\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\1\u010e\30\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\4\34\1\u010f\24\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\10\34\1\u0110\20\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\10\34\1\u0111\20\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\20\34\1\u0112\10\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\10\34\1\u0113\20\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\20\34\1\u0114\10\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\2\34\1\u0115\26\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\7\34\1\u0116\21\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\25\34\1\u0117\3\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\21\34\1\u0118\7\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\3\34\1\u0119\25\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\22\34\1\u011a\6\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\4\34\1\u011b\24\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\1\u011c\30\34\2\0\1\34\27\0"+
    "\4\u011d\7\0\5\u011d\11\0\6\u011d\55\0\4\u011e\7\0"+
    "\5\u011e\11\0\6\u011e\127\0\1\u011f\72\0\1\u0120\117\0"+
    "\1\u0121\117\0\1\u0122\52\0\4\u0123\7\0\5\u0123\11\0"+
    "\6\u0123\32\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\1\u0124\30\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\14\34\1\u0125\14\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\12\34\1\u0126\16\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\4\34\1\u0127\24\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\3\34\1\u0128\25\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\12\34\1\u0129\16\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\2\34\1\u012a\26\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\13\34\1\u012b\15\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\22\34\1\u012c\6\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\5\34\1\u012d\23\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\10\34\1\u012e\20\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\4\34\1\u012f\24\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\22\34\1\u0130\6\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\6\34\1\u0131\22\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\1\u0132\30\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\22\34\1\u0133\6\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\2\34\1\u0134\26\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\2\34\1\u0135\26\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\20\34\1\u0136\10\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\14\34\1\u0137\14\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\2\34\1\u0138\26\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\7\34\1\u0139\21\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\20\34\1\u013a\10\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\21\34\1\u013b\7\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\10\34\1\u013c\20\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\4\34\1\u013d\24\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\10\34\1\u013e\20\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\26\34\1\u013f\2\34\2\0\1\34\27\0"+
    "\4\11\7\0\5\11\11\0\6\11\55\0\4\104\7\0"+
    "\5\104\11\0\6\104\127\0\1\u0140\114\0\1\u0141\73\0"+
    "\1\u0142\113\0\1\u0143\60\0\4\37\7\0\5\37\11\0"+
    "\6\37\32\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\2\34\1\u0144\26\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\23\34\1\u0145\5\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\22\34\1\u0146\6\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\21\34\1\u0147\7\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\27\34\1\u0148\1\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\7\34\1\u0149\21\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\4\34\1\u014a\24\34\2\0"+
    "\1\34\4\0\1\34\10\0\1\34\11\0\4\34\7\0"+
    "\11\34\3\0\1\34\1\0\1\u014b\30\34\2\0\1\34"+
    "\4\0\1\34\10\0\1\34\11\0\4\34\7\0\11\34"+
    "\3\0\1\34\1\0\1\u014c\30\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\15\34\1\u014d\13\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\4\34\1\u014e\24\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\4\34\1\u014f\24\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\22\34\1\u0150\6\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\4\34\1\u0151\24\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\15\34\1\u0152\13\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\4\34\1\u0153\24\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\5\34\1\u0154\23\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\12\34\1\u0155\16\34\2\0\1\34\64\0"+
    "\1\u0156\131\0\1\u0157\15\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\22\34\1\u0158"+
    "\6\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\4\34\1\u0159"+
    "\24\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\14\34\1\u015a"+
    "\14\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\2\34\1\u015b"+
    "\26\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\14\34\1\u015c"+
    "\14\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\20\34\1\u015d"+
    "\10\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\4\34\1\u015e"+
    "\24\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\14\34\1\u015f"+
    "\14\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\14\34\1\u0160"+
    "\14\34\2\0\1\34\4\0\1\34\10\0\1\34\11\0"+
    "\4\34\7\0\11\34\3\0\1\34\1\0\4\34\1\u0161"+
    "\24\34\2\0\1\34\64\0\1\u0162\33\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\22\34\1\u0163\6\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\4\34\1\u0164\24\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\22\34\1\u0165\6\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\3\34\1\u0166\25\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\10\34\1\u0167\20\34\2\0\1\34\4\0\1\34\10\0"+
    "\1\34\11\0\4\34\7\0\11\34\3\0\1\34\1\0"+
    "\22\34\1\u0168\6\34\2\0\1\34\63\0\1\u0169\34\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\21\34\1\u016a\7\34\2\0\1\34\4\0"+
    "\1\34\10\0\1\34\11\0\4\34\7\0\11\34\3\0"+
    "\1\34\1\0\30\34\1\u016b\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\4\34\1\u016c\24\34\2\0\1\34\4\0\1\34"+
    "\10\0\1\34\11\0\4\34\7\0\11\34\3\0\1\34"+
    "\1\0\3\34\1\u016d\25\34\2\0\1\34\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20824];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\1\1\1\11\2\1\3\11"+
    "\5\1\5\11\4\1\1\11\21\1\7\11\2\1\3\11"+
    "\4\1\2\11\1\0\2\1\1\0\1\11\1\0\4\1"+
    "\1\11\1\1\2\11\1\1\2\11\2\0\1\11\1\0"+
    "\1\11\46\1\4\11\1\0\1\1\1\11\2\1\1\0"+
    "\1\11\1\0\1\1\1\0\1\1\4\0\55\1\1\0"+
    "\1\1\1\0\1\11\6\0\53\1\7\0\43\1\7\0"+
    "\34\1\1\11\2\0\1\11\22\1\1\11\1\0\12\1"+
    "\1\0\6\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
      public final int getLineNo() {
        return yyline+1;
      }
      public final int getColumn() {
        return yycolumn+1;
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public KievLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public KievTokenType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      {
        zzForAction: while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return KievTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 107: break;
          case 2:
            { return KievTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 108: break;
          case 3:
            { return KievTokenTypes.OPERATOR;
            }
          // fall through
          case 109: break;
          case 4:
            { return KievTokenTypes.STRING_LITERAL;
            }
          // fall through
          case 110: break;
          case 5:
            { return KievTokenTypes.OP_SHARP;
            }
          // fall through
          case 111: break;
          case 6:
            { return KievTokenTypes.IDENTIFIER;
            }
          // fall through
          case 112: break;
          case 7:
            { return KievTokenTypes.OP_LPAREN;
            }
          // fall through
          case 113: break;
          case 8:
            { return KievTokenTypes.OP_RPAREN;
            }
          // fall through
          case 114: break;
          case 9:
            { return KievTokenTypes.OP_COMMA;
            }
          // fall through
          case 115: break;
          case 10:
            { return KievTokenTypes.OP_DOT;
            }
          // fall through
          case 116: break;
          case 11:
            { return KievTokenTypes.INTEGER_LITERAL;
            }
          // fall through
          case 117: break;
          case 12:
            { return KievTokenTypes.OP_COLON;
            }
          // fall through
          case 118: break;
          case 13:
            { return KievTokenTypes.OP_SEMICOLON;
            }
          // fall through
          case 119: break;
          case 14:
            { return KievTokenTypes.OP_LT;
            }
          // fall through
          case 120: break;
          case 15:
            { return KievTokenTypes.OP_ASSIGN;
            }
          // fall through
          case 121: break;
          case 16:
            { return KievTokenTypes.OP_GT;
            }
          // fall through
          case 122: break;
          case 17:
            { return KievTokenTypes.OP_QUESTION;
            }
          // fall through
          case 123: break;
          case 18:
            { return KievTokenTypes.OP_AT;
            }
          // fall through
          case 124: break;
          case 19:
            { return KievTokenTypes.OP_LBRACKET;
            }
          // fall through
          case 125: break;
          case 20:
            { return KievTokenTypes.OP_RBRACKET;
            }
          // fall through
          case 126: break;
          case 21:
            { return KievTokenTypes.ESC_IDENTIFIER;
            }
          // fall through
          case 127: break;
          case 22:
            { return KievTokenTypes.OP_LBRACE;
            }
          // fall through
          case 128: break;
          case 23:
            { return KievTokenTypes.OP_RBRACE;
            }
          // fall through
          case 129: break;
          case 24:
            { return KievTokenTypes.OP_SUPERSCRIPT_PLUS;
            }
          // fall through
          case 130: break;
          case 25:
            { return KievTokenTypes.OP_SUPERSCRIPT_MINUS;
            }
          // fall through
          case 131: break;
          case 26:
            { return KievTokenTypes.OP_UPPER_BOUND;
            }
          // fall through
          case 132: break;
          case 27:
            { return KievTokenTypes.OP_LOWER_BOUND;
            }
          // fall through
          case 133: break;
          case 28:
            { yybegin(YYINITIAL); return KievTokenTypes.OP_SEMICOLON;
            }
          // fall through
          case 134: break;
          case 29:
            { yybegin(YYINITIAL);         return KievTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 135: break;
          case 30:
            { yybegin(IN_ACCESS_PARENTH); return KievTokenTypes.OP_LPAREN;
            }
          // fall through
          case 136: break;
          case 31:
            { yybegin(IN_ACCESS_COLON);   return KievTokenTypes.OP_COLON;
            }
          // fall through
          case 137: break;
          case 32:
            { yybegin(YYINITIAL); return KievTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 138: break;
          case 33:
            { yybegin(YYINITIAL); return KievTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 139: break;
          case 34:
            { yybegin(YYINITIAL); return KievTokenTypes.OP_RPAREN;
            }
          // fall through
          case 140: break;
          case 35:
            { return KievTokenTypes.CHARACTER_LITERAL;
            }
          // fall through
          case 141: break;
          case 36:
            { return KievTokenTypes.OP_ARROW;
            }
          // fall through
          case 142: break;
          case 37:
            { return KievTokenTypes.DOUBLE_LITERAL;
            }
          // fall through
          case 143: break;
          case 38:
            { return KievTokenTypes.BLOCK_COMMENT;
            }
          // fall through
          case 144: break;
          case 39:
            { return KievTokenTypes.LINE_COMMENT;
            }
          // fall through
          case 145: break;
          case 40:
            { return KievTokenTypes.FLOAT_LITERAL;
            }
          // fall through
          case 146: break;
          case 41:
            { return KievTokenTypes.LONG_LITERAL;
            }
          // fall through
          case 147: break;
          case 42:
            { return KievTokenTypes.OP_IS_THE;
            }
          // fall through
          case 148: break;
          case 43:
            { return KievTokenTypes.OP_IS_ONE_OF;
            }
          // fall through
          case 149: break;
          case 44:
            { return KievTokenTypes.OP_LRBRACKETS;
            }
          // fall through
          case 150: break;
          case 45:
            { return KievTokenTypes.KW_DO;
            }
          // fall through
          case 151: break;
          case 46:
            { return KievTokenTypes.KW_IF;
            }
          // fall through
          case 152: break;
          case 47:
            { return KievTokenTypes.KW_ACC_NO;
            }
          // fall through
          case 153: break;
          case 48:
            { return KievTokenTypes.KW_ACC_RO;
            }
          // fall through
          case 154: break;
          case 49:
            { return KievTokenTypes.KW_ACC_RW;
            }
          // fall through
          case 155: break;
          case 50:
            { return KievTokenTypes.KW_ACC_WO;
            }
          // fall through
          case 156: break;
          case 51:
            { return KievTokenTypes.OP_VARARGS;
            }
          // fall through
          case 157: break;
          case 52:
            { return KievTokenTypes.KW_FOR;
            }
          // fall through
          case 158: break;
          case 53:
            { return KievTokenTypes.KW_FUN;
            }
          // fall through
          case 159: break;
          case 54:
            { return KievTokenTypes.KW_NEW;
            }
          // fall through
          case 160: break;
          case 55:
            { return KievTokenTypes.KW_TRY;
            }
          // fall through
          case 161: break;
          case 56:
            { return KievTokenTypes.KW_PCUT;
            }
          // fall through
          case 162: break;
          case 57:
            { return KievTokenTypes.KW_CASE;
            }
          // fall through
          case 163: break;
          case 58:
            { return KievTokenTypes.KW_ELSE;
            }
          // fall through
          case 164: break;
          case 59:
            { return KievTokenTypes.KW_ENUM;
            }
          // fall through
          case 165: break;
          case 60:
            { return KievTokenTypes.KW_GOTO;
            }
          // fall through
          case 166: break;
          case 61:
            { return KievTokenTypes.KW_NULL;
            }
          // fall through
          case 167: break;
          case 62:
            { return KievTokenTypes.KW_THIS;
            }
          // fall through
          case 168: break;
          case 63:
            { return KievTokenTypes.KW_TRUE;
            }
          // fall through
          case 169: break;
          case 64:
            { return KievTokenTypes.KW_TYPE;
            }
          // fall through
          case 170: break;
          case 65:
            { return KievTokenTypes.KW_WITH;
            }
          // fall through
          case 171: break;
          case 66:
            { return KievTokenTypes.KW_ALIAS;
            }
          // fall through
          case 172: break;
          case 67:
            { return KievTokenTypes.KW_BREAK;
            }
          // fall through
          case 173: break;
          case 68:
            { return KievTokenTypes.KW_CATCH;
            }
          // fall through
          case 174: break;
          case 69:
            { return KievTokenTypes.KW_CLASS;
            }
          // fall through
          case 175: break;
          case 70:
            { return KievTokenTypes.KW_FALSE;
            }
          // fall through
          case 176: break;
          case 71:
            { return KievTokenTypes.KW_FINAL;
            }
          // fall through
          case 177: break;
          case 72:
            { return KievTokenTypes.KW_SUPER;
            }
          // fall through
          case 178: break;
          case 73:
            { return KievTokenTypes.KW_THROW;
            }
          // fall through
          case 179: break;
          case 74:
            { return KievTokenTypes.KW_WHILE;
            }
          // fall through
          case 180: break;
          case 75:
            { return KievTokenTypes.KW_ENSURE;
            }
          // fall through
          case 181: break;
          case 76:
            { yybegin(IN_IMPORT); return KievTokenTypes.KW_IMPORT;
            }
          // fall through
          case 182: break;
          case 77:
            { return KievTokenTypes.KW_NATIVE;
            }
          // fall through
          case 183: break;
          case 78:
            { return KievTokenTypes.KW_PRAGMA;
            }
          // fall through
          case 184: break;
          case 79:
            { yybegin(IN_ACCESS); return KievTokenTypes.KW_PUBLIC;
            }
          // fall through
          case 185: break;
          case 80:
            { return KievTokenTypes.KW_RETURN;
            }
          // fall through
          case 186: break;
          case 81:
            { return KievTokenTypes.KW_STATIC;
            }
          // fall through
          case 187: break;
          case 82:
            { return KievTokenTypes.KW_SWITCH;
            }
          // fall through
          case 188: break;
          case 83:
            { return KievTokenTypes.KW_THROWS;
            }
          // fall through
          case 189: break;
          case 84:
            { return KievTokenTypes.KW_SYNTAX;
            }
          // fall through
          case 190: break;
          case 85:
            { yybegin(IN_ACCESS); return KievTokenTypes.META_ACCESS;
            }
          // fall through
          case 191: break;
          case 86:
            { yybegin(IN_ACCESS); return KievTokenTypes.META_PUBLIC;
            }
          // fall through
          case 192: break;
          case 87:
            { return KievTokenTypes.KW_DEFAULT;
            }
          // fall through
          case 193: break;
          case 88:
            { return KievTokenTypes.KW_EXTENDS;
            }
          // fall through
          case 194: break;
          case 89:
            { return KievTokenTypes.KW_FINALLY;
            }
          // fall through
          case 195: break;
          case 90:
            { return KievTokenTypes.KW_FOREACH;
            }
          // fall through
          case 196: break;
          case 91:
            { return KievTokenTypes.KW_PACKAGE;
            }
          // fall through
          case 197: break;
          case 92:
            { yybegin(IN_ACCESS); return KievTokenTypes.KW_PRIVATE;
            }
          // fall through
          case 198: break;
          case 93:
            { return KievTokenTypes.KW_REQUIRE;
            }
          // fall through
          case 199: break;
          case 94:
            { return KievTokenTypes.KW_TYPEDEF;
            }
          // fall through
          case 200: break;
          case 95:
            { yybegin(IN_ACCESS); return KievTokenTypes.META_PRIVATE;
            }
          // fall through
          case 201: break;
          case 96:
            { return KievTokenTypes.KW_ABSTRACT;
            }
          // fall through
          case 202: break;
          case 97:
            { return KievTokenTypes.KW_CONTINUE;
            }
          // fall through
          case 203: break;
          case 98:
            { return KievTokenTypes.KW_OPERATOR;
            }
          // fall through
          case 204: break;
          case 99:
            { return KievTokenTypes.KW_VOLATILE;
            }
          // fall through
          case 205: break;
          case 100:
            { return KievTokenTypes.KW_INTERFACE;
            }
          // fall through
          case 206: break;
          case 101:
            { return KievTokenTypes.KW_INVARIANT;
            }
          // fall through
          case 207: break;
          case 102:
            { yybegin(IN_ACCESS); return KievTokenTypes.KW_PROTECTED;
            }
          // fall through
          case 208: break;
          case 103:
            { return KievTokenTypes.KW_TRANSIENT;
            }
          // fall through
          case 209: break;
          case 104:
            { yybegin(IN_ACCESS); return KievTokenTypes.META_PROTECTED;
            }
          // fall through
          case 210: break;
          case 105:
            { return KievTokenTypes.KW_IMPLEMENTS;
            }
          // fall through
          case 211: break;
          case 106:
            { return KievTokenTypes.KW_SYNCHRONIZED;
            }
          // fall through
          case 212: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
